[
    {
        "changedFiles": {
            "lib/make-badge.js": {
                "changes": [
                    98
                ]
            },
            "templates/for-the-badge-template.svg": {
                "changes": [
                    10
                ]
            }
        },
        "project": "Shields",
        "metrics": {
            "files": 2,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/make-badge.js b/lib/make-badge.js\nindex 08a36b5257..6bd3a51021 100644\n--- a/lib/make-badge.js\n+++ b/lib/make-badge.js\n@@ -95,8 +95,8 @@ function makeBadge (data) {\n     data.template = 'flat';\n   }\n   if (data.template === 'for-the-badge'){\n-    data.text[0] = data.text[0].toUpperCase();\n-    data.text[1] = data.text[1].toUpperCase();\n+    data.text[0] = ('' + data.text[0]).toUpperCase();\n+    data.text[1] = ('' + data.text[1]).toUpperCase();\n   }\n   if (data.colorscheme) {\n     let pickedColorscheme = colorscheme[data.colorscheme];\ndiff --git a/templates/for-the-badge-template.svg b/templates/for-the-badge-template.svg\nindex 34a1358cc7..76ebb8e0dc 100644\n--- a/templates/for-the-badge-template.svg\n+++ b/templates/for-the-badge-template.svg\n@@ -7,8 +7,8 @@\n     {{?it.logo}}\n       <image x=\"9\" y=\"7\" width=\"{{=it.logoWidth}}\" height=\"14\" xlink:href=\"{{=it.logo}}\"/>\n     {{?}}\n-    <text x=\"{{=((it.widths[0]+it.logoWidth+it.logoPadding)/2)*10}}\" y=\"175\" transform=\"scale(0.1)\" textLength=\"{{=(it.widths[0]-(24+it.logoWidth+it.logoPadding))*10}}\" lengthAdjust=\"spacing\">{{=it.escapeXml(it.text[0].toUpperCase())}}</text>\n-    <text x=\"{{=(it.widths[0]+it.widths[1]/2)*10}}\" y=\"175\" font-weight=\"bold\" transform=\"scale(0.1)\" textLength=\"{{=(it.widths[1]-24)*10}}\" lengthAdjust=\"spacing\">{{=it.escapeXml(it.text[1].toUpperCase())}}</text>\n+    <text x=\"{{=((it.widths[0]+it.logoWidth+it.logoPadding)/2)*10}}\" y=\"175\" transform=\"scale(0.1)\" textLength=\"{{=(it.widths[0]-(24+it.logoWidth+it.logoPadding))*10}}\" lengthAdjust=\"spacing\">{{=it.escapeXml(it.text[0])}}</text>\n+    <text x=\"{{=(it.widths[0]+it.widths[1]/2)*10}}\" y=\"175\" font-weight=\"bold\" transform=\"scale(0.1)\" textLength=\"{{=(it.widths[1]-24)*10}}\" lengthAdjust=\"spacing\">{{=it.escapeXml(it.text[1])}}</text>\n   </g>\n   {{?(it.links[0] && it.links[0].length)}}\n     <a xlink:href=\"{{=it.links[0]}}\">\n",
        "bugId": 4,
        "tax": "G-TC",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "services/base.js": {
                "insert": [
                    90
                ],
                "changes": [
                    125,
                    136
                ],
                "deletes": [
                    151
                ]
            }
        },
        "project": "Shields",
        "metrics": {
            "files": 1,
            "sizeInLines": 25,
            "linesRem": 3,
            "linesAdd": 9,
            "chunks": 4,
            "linesMod": 13
        },
        "diff": "diff --git a/services/base.js b/services/base.js\nindex 43531c11a7..d60432fc1b 100644\n--- a/services/base.js\n+++ b/services/base.js\n@@ -87,6 +87,15 @@ module.exports = class BaseService {\n     return result;\n   }\n \n+  async invokeHandler(namedParams) {\n+    try {\n+      return await this.handle(namedParams);\n+    } catch (error) {\n+      console.log(error);\n+      return { message: 'error' };\n+    }\n+  }\n+\n   static _makeBadgeData(overrides, serviceData) {\n     const {\n       style,\n@@ -122,7 +131,7 @@ module.exports = class BaseService {\n       links: toArray(overrideLink || serviceLink),\n       colorA: makeColor(overrideColorA),\n     };\n-    const color = makeColor(overrideColorB || serviceColor || defaultColor || 'lightgrey');\n+    const color = overrideColorB || serviceColor || defaultColor || 'lightgrey';\n     setBadgeColor(badgeData, color);\n \n     return badgeData;\n@@ -133,24 +142,15 @@ module.exports = class BaseService {\n \n     camp.route(this._regex,\n     handleRequest(async (queryParams, match, sendBadge, request) => {\n-      let serviceData;\n-\n-      try {\n-        const namedParams = this._namedParamsForMatch(match);\n-        const serviceInstance = new serviceClass({\n-          sendAndCacheRequest: request.asPromise,\n-        });\n-        serviceData = await serviceInstance.handle(namedParams);\n-      } catch (error) {\n-        serviceData = { message: 'error' };\n-        console.log(error);\n-      }\n+      const namedParams = this._namedParamsForMatch(match);\n+      const serviceInstance = new serviceClass({\n+        sendAndCacheRequest: request.asPromise,\n+      });\n+      const serviceData = await serviceInstance.invokeHandler(namedParams);\n+      const badgeData = this._makeBadgeData(queryParams, serviceData);\n \n       // Assumes the final capture group is the extension\n       const format = match.slice(-1)[0];\n-\n-      const badgeData = this._makeBadgeData(queryParams, serviceData);\n-\n       sendBadge(format, badgeData);\n     }));\n   }\n",
        "bugId": 3,
        "tax": "PM",
        "pan_cat": [
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/make-badge.js": {
                "changes": [
                    114
                ]
            },
            "lib/badge-data.js": {
                "changes": [
                    97
                ],
                "deletes": [
                    4,
                    109
                ]
            },
            "server.js": {
                "changes": [
                    8007
                ],
                "deletes": [
                    56
                ]
            },
            "lib/supported-features.js": {
                "changes": [
                    18
                ],
                "deletes": [
                    11
                ]
            }
        },
        "project": "Shields",
        "metrics": {
            "files": 4,
            "sizeInLines": 16,
            "linesRem": 9,
            "linesAdd": 0,
            "chunks": 8,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/badge-data.js b/lib/badge-data.js\nindex 7d279c4ce7..c7cf8bbb20 100644\n--- a/lib/badge-data.js\n+++ b/lib/badge-data.js\n@@ -1,7 +1,6 @@\n 'use strict';\n \n const logos = require('./load-logos')();\n-const { isValidStyle } = require('./supported-features');\n \n function toArray(val) {\n   if (val === undefined) {\n@@ -94,7 +93,7 @@ function makeBadgeData(defaultLabel, overrides) {\n   return {\n     text: [makeLabel(defaultLabel, overrides), 'n/a'],\n     colorscheme: 'lightgrey',\n-    template: isValidStyle(overrides.style) ? overrides.style : 'default',\n+    template: overrides.style,\n     logo: makeLogo(undefined, overrides),\n     logoWidth: +overrides.logoWidth,\n     links: toArray(overrides.link),\n@@ -106,7 +105,6 @@ function makeBadgeData(defaultLabel, overrides) {\n module.exports = {\n   prependPrefix,\n   isDataUri,\n-  isValidStyle,\n   isSixHex,\n   makeLabel,\n   makeLogo,\ndiff --git a/lib/make-badge.js b/lib/make-badge.js\nindex 2462866593..b806970586 100644\n--- a/lib/make-badge.js\n+++ b/lib/make-badge.js\n@@ -111,7 +111,7 @@ function makeBadge (measurer, {\n   }\n \n   if (!(`${template}-${format}` in templates)) {\n-    template = 'flat';\n+    template = format === 'svg' ? 'flat' : 'default';\n   }\n   if (template === 'social') {\n     text[0] = capitalize(text[0]);\ndiff --git a/lib/supported-features.js b/lib/supported-features.js\nindex 5f4695464f..28039e96d5 100644\n--- a/lib/supported-features.js\n+++ b/lib/supported-features.js\n@@ -8,13 +8,6 @@ const advertisedStyles = [\n   'social',\n ];\n \n-const validStyles = advertisedStyles.concat(['default', '_shields_test']);\n-\n-function isValidStyle(style) {\n-  return style ? validStyles.indexOf(style) >= 0 : false;\n-}\n-\n module.exports = {\n-  advertisedStyles,\n-  isValidStyle,\n+  advertisedStyles\n };\ndiff --git a/server.js b/server.js\nindex 85b9d25f85..38bf9eaf9e 100644\n--- a/server.js\n+++ b/server.js\n@@ -53,7 +53,6 @@ const {\n } = require('./lib/color-formatters');\n const {\n   makeColorB,\n-  isValidStyle,\n   isSixHex: sixHex,\n   makeLabel: getLabel,\n   makeLogo: getLogo,\n@@ -8004,9 +8003,7 @@ function(data, match, end, ask) {\n         badgeData.colorscheme = color;\n       }\n     }\n-    if (isValidStyle(data.style)) {\n-      badgeData.template = data.style;\n-    }\n+    badgeData.template = data.style;\n     if (config.profiling.makeBadge) {\n       console.time('makeBadge total');\n     }\n",
        "bugId": 2,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/request-handler.js": {
                "changes": [
                    100,
                    202
                ]
            }
        },
        "project": "Shields",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/request-handler.js b/lib/request-handler.js\nindex 42e426e53b..4e6318524f 100644\n--- a/lib/request-handler.js\n+++ b/lib/request-handler.js\n@@ -97,7 +97,7 @@ function handleRequest (handlerOptions) {\n     // Use sindresorhus query-string because it sorts the keys, whereas the\n     // builtin querystring module relies on the iteration order.\n     const stringified = queryString.stringify(filteredQueryParams);\n-    const cacheIndex = `match[0]?${stringified}`;\n+    const cacheIndex = `${match[0]}?${stringified}`;\n \n     // Should we return the data right away?\n     const cached = requestCache.get(cacheIndex);\n@@ -199,5 +199,7 @@ function clearRequestCache() {\n \n module.exports = {\n   handleRequest,\n-  clearRequestCache\n+  clearRequestCache,\n+  // Expose for testing.\n+  _requestCache: requestCache\n };\n",
        "bugId": 1,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE",
            "CF-ADD"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "include/http/request_handler.js": {
                "changes": [
                    1441,
                    1447
                ]
            }
        },
        "project": "Pencilblue",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 10,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/include/http/request_handler.js b/include/http/request_handler.js\nindex a54506dd2..11342ba03 100755\n--- a/include/http/request_handler.js\n+++ b/include/http/request_handler.js\n@@ -1438,15 +1438,25 @@ module.exports = function RequestHandlerModule(pb) {\n      * @param {Function} prototype A prototype that can have an instance created and parse the specified mime type\n      * @return {Boolean} TRUE if the body parser was registered, FALSE if not\n      */\n-    RequestHandler.registerBodyParser = function(mime, protoype) {\n-        if (!pb.validation.isNonEmptyStr(mime) || !util.isFunction(prototype)) {\n+    RequestHandler.registerBodyParser = function(mime, prototype) {\n+        if (!pb.validation.isNonEmptyStr(mime, true) || !util.isFunction(prototype)) {\n             return false;\n         }\n \n         //set the prototype handler\n-        BODY_PARSER_MAP[mime] = protoype;\n+        BODY_PARSER_MAP[mime] = prototype;\n         return true;\n     };\n+    \n+    /**\n+     * Retrieves the body parser mapping\n+     * @static\n+     * @method getBodyParsers\n+     * @return {Object} MIME string as the key and parser as the value\n+     */\n+    RequestHandler.getBodyParsers = function() {\n+        return util.merge(BODY_PARSER_MAP, {});\n+    };\n \n     return RequestHandler;\n };\n",
        "bugId": 7,
        "tax": "G-T",
        "pan_cat": [
            "MC-DAP",
            "MC-DNP",
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "include/validation/validation_service.js": {
                "insert": [
                    20
                ],
                "changes": [
                    60,
                    373,
                    408,
                    416
                ]
            },
            "include/service/jobs/job_runner.js": {
                "changes": [
                    240
                ]
            }
        },
        "project": "Pencilblue",
        "metrics": {
            "files": 2,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 6,
            "linesMod": 6
        },
        "diff": "diff --git a/include/service/jobs/job_runner.js b/include/service/jobs/job_runner.js\nindex 82c6077a3..d14609a20 100644\n--- a/include/service/jobs/job_runner.js\n+++ b/include/service/jobs/job_runner.js\n@@ -237,7 +237,7 @@ module.exports = function JobRunnerModule(pb) {\n \n         var query   = pb.DAO.getIdWhere(this.getId());\n         var updates = {};\n-        if (pb.validation.isFloat(progressIncrement, true, true)) {\n+        if (pb.validation.isNum(progressIncrement, true) && progressIncrement > 0) {\n             updates.$inc = {progress: progressIncrement};\n         }\n         if (pb.validation.isNonEmptyStr(status, true)) {\ndiff --git a/include/validation/validation_service.js b/include/validation/validation_service.js\nindex 7934516fc..4ab97eab5 100755\n--- a/include/validation/validation_service.js\n+++ b/include/validation/validation_service.js\n@@ -17,6 +17,7 @@\n 'use strict';\n \n //dependencies\n+var _        = require('lodash');\n var semver   = require('semver');\n var ObjectID = require('mongodb').ObjectID;\n var util     = require('../util.js');\n@@ -57,7 +58,7 @@ module.exports = function ValidationModule(pb) {\n      * @property\n      * @type {RegExp}\n      */\n-    var EMAIL_REGEX          = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n+    var EMAIL_REGEX          = /^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;\n \n     /**\n      * A pattern to validate a fully qualified URL\n@@ -370,7 +371,7 @@ module.exports = function ValidationModule(pb) {\n         }\n \n         var parsed = parseFloat(val);\n-        if (strict && val !== parsed) {\n+        if ((Math.floor(parsed) === val) || (strict && val !== parsed)) {\n             return false;\n         }\n         return val == parsed;\n@@ -405,15 +406,15 @@ module.exports = function ValidationModule(pb) {\n     };\n \n     /**\n-     * Validates that the value is null, defined, an empty object, or an empty\n-     * string.\n+     * Validates that the value is null, defined, an empty object, and empty\n+     * array or an empty string.\n      * @static\n      * @method isEmpty\n      * @param {*} val The value under test\n      * @return {Boolean} TRUE if the value is valid, FALSE if not\n      */\n     ValidationService.isEmpty = function(val) {\n-        return val === null || val === undefined || val === '' || val === {};\n+        return val === null || val === undefined || val === '' || _.isEqual(val, {}) || _.isEqual(val, []);\n     };\n \n     /**\n",
        "bugId": 6,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC",
            "IF-CC",
            "AS-CE",
            "IF-CC",
            "IF-CC",
            "MC-DM"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "include/service/entities/media_service.js": {
                "changes": [
                    764
                ]
            }
        },
        "project": "Pencilblue",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 5
        },
        "diff": "diff --git a/include/service/entities/media_service.js b/include/service/entities/media_service.js\nindex eea3992fe..609920e12 100755\n--- a/include/service/entities/media_service.js\n+++ b/include/service/entities/media_service.js\n@@ -761,11 +761,12 @@ module.exports = function MediaServiceModule(pb) {\n         var id    = parts[0].substring(prefix.length);\n \n         var style = {};\n-        var attrs = parts[1].split(',');\n-        attrs.forEach(function(item) {\n-            var division = item.split(':');\n-            style[division[0]] = division[1];\n-        });\n+        if (parts[1] && parts[1].length) {\n+            var attrs = parts[1].split(',').forEach(function(item) {\n+                var division = item.split(':');\n+                style[division[0]] = division[1];\n+            });\n+        }\n \n         return {\n             id: id,\n",
        "bugId": 5,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "include/service/entities/custom_object_service.js": {
                "changes": [
                    201,
                    411,
                    567,
                    708,
                    748,
                    824,
                    832,
                    941,
                    952,
                    985,
                    987,
                    994
                ]
            },
            "include/validation/validation_service.js": {
                "changes": [
                    327,
                    343,
                    362,
                    365,
                    373,
                    424
                ]
            }
        },
        "project": "Pencilblue",
        "metrics": {
            "files": 2,
            "sizeInLines": 36,
            "linesRem": 0,
            "linesAdd": 16,
            "chunks": 20,
            "linesMod": 20
        },
        "diff": "diff --git a/include/service/entities/custom_object_service.js b/include/service/entities/custom_object_service.js\nindex 52a29e66b..0b91058d3 100644\n--- a/include/service/entities/custom_object_service.js\n+++ b/include/service/entities/custom_object_service.js\n@@ -198,7 +198,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n     /**\n      * Retrieves custom objects of the specified type based on the specified options.\n      * @method findByTypeWithOrdering\n-     * @param {Object|String} The custom object type descriptor object or the ID\n+     * @param {Object|String} The custom object The custom object type descriptor object or the ID\n      * string of the type descriptor.\n      * @param {Object} [options={}] The filters and other flags.  The options object\n      * supports the same fields as the DAO.query function.\n@@ -408,7 +408,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n                     }\n                 };\n             });\n-            async.series(tasks, function(err, results) {\n+            async.series(tasks, function(err) {\n                 cb(err, custObj);\n             });\n         });\n@@ -564,7 +564,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n     /**\n      * Loads a custom object by the specified where criteria\n      * @method loadBy\n-     * @param {String} type\n+     * @param {String|Null} type\n      * @param {Object} where\n      * @param {Object} [options]\n      * @param {Function} cb\n@@ -705,7 +705,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n                 });\n             }\n         ];\n-        async.series(tasks, function(err, results) {\n+        async.series(tasks, function(err) {\n             cb(err, errors);\n         });\n     };\n@@ -745,7 +745,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n                 callback(null);\n             };\n         });\n-        async.series(tasks, function(err, results) {\n+        async.series(tasks, function(err) {\n             cb(err, errors);\n         });\n     };\n@@ -821,7 +821,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n                 });\n             }\n         ];\n-        async.series(tasks, function(err, results) {\n+        async.series(tasks, function(err) {\n             cb(err, errors);\n         });\n     };\n@@ -829,7 +829,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n     /**\n      * Validates that the field descriptor for a custom object type.\n      * @method validateFieldDescriptor\n-     * @param {String} field\n+     * @param {object} field\n      * @param {Array} customTypes\n      * @return {Array} An array of objects that contain two properties: field and\n      * error\n@@ -938,7 +938,7 @@ module.exports = function CustomObjectServiceModule(pb) {\n      * Deletes a custom object by ID\n      * @method deleteById\n      * @param {String} id\n-     * @param {Function} cb\n+     * @param {Function} cb (Error, *)\n      */\n     CustomObjectService.prototype.deleteById = function(id, cb) {\n         var dao = new pb.DAO();\n@@ -949,8 +949,8 @@ module.exports = function CustomObjectServiceModule(pb) {\n      * Deletes a custom object type by id\n      * @method deleteTypeById\n      * @param {String|ObjectID} id\n-     * @param {Object} [options={}]\n-     * @param {Function} cb\n+     * @param {object} [options={}]\n+     * @param {function} cb (Error, *)\n      */\n     CustomObjectService.prototype.deleteTypeById = function(id, options, cb) {\n         if (util.isFunction(options)) {\n@@ -982,21 +982,26 @@ module.exports = function CustomObjectServiceModule(pb) {\n     /**\n      * Deletes all custom objects of a specified type\n      * @method deleteForType\n-     * @param {String|Object} custObjType A string ID of the custom object type or\n+     * @param {string|object} custObjType A string ID of the custom object type or\n      * the custom object type itself.\n-     * @param {Object} [options={}]\n-     * @param {Function} cb\n+     * @param {Function} cb (Error, *)\n      */\n     CustomObjectService.prototype.deleteForType = function(custObjType, cb) {\n \n         var typeId = custObjType;\n         if (!util.isString(custObjType)) {\n-            typeId = custObjType.toString();\n+            typeId = custObjType[pb.DAO.getIdField()] + '';\n         }\n         var dao = new pb.DAO();\n         dao.delete({type: typeId}, CustomObjectService.CUST_OBJ_COLL, cb);\n     };\n \n+    /**\n+     * Determines if a custom object type with the specified name (case insensitive) exists\n+     * @method typeExists\n+     * @param {string} typeName\n+     * @param {function} cb (Error, Boolean)\n+     */\n     CustomObjectService.prototype.typeExists = function(typeName, cb) {\n \n         var where = {\n@@ -1006,6 +1011,16 @@ module.exports = function CustomObjectServiceModule(pb) {\n         this.siteQueryService.exists(CustomObjectService.CUST_OBJ_TYPE_COLL, where, cb);\n     };\n \n+    /**\n+     * Provides the various types of fields that are allowed for a custom object (number, boolean, string, etc).\n+     * @static\n+     * @method getFieldTypes\n+     * @returns {Array}\n+     */\n+    CustomObjectService.getFieldTypes = function() {\n+        return Object.keys(AVAILABLE_FIELD_TYPES);\n+    };\n+\n     /**\n      * Retrieves the objects types that can be referenced by custom objects\n      * @static\ndiff --git a/include/validation/validation_service.js b/include/validation/validation_service.js\nindex cd8e9c5b0..60685dc62 100755\n--- a/include/validation/validation_service.js\n+++ b/include/validation/validation_service.js\n@@ -324,7 +324,7 @@ module.exports = function ValidationModule(pb) {\n      *\n      * @method isObject\n      * @param {Object} value\n-     * @param {Boolean} required\n+     * @param {Boolean} [required=false]\n      */\n     ValidationService.isObj = function(value, required) {\n         if (!value && !required) {\n@@ -340,7 +340,7 @@ module.exports = function ValidationModule(pb) {\n      * @param {Integer} val The value under test\n      * @param {Boolean} [required=false] Indicates if the value is required. When\n      * FALSE, null will be an acceptable value.\n-     * @param {Boolean} Indicates if the value must be a number rather than a string representing a number.\n+     * @param {Boolean} strict Indicates if the value must be a number rather than a string representing a number.\n      * @return {Boolean} TRUE if the value is valid, FALSE if not\n      */\n     ValidationService.isInt = function(val, required, strict) {\n@@ -359,10 +359,10 @@ module.exports = function ValidationModule(pb) {\n      * Validates that the value is a float.\n      * @static\n      * @method isFloat\n-     * @param {Float} val The value under test\n+     * @param {Number} val The value under test\n      * @param {Boolean} [required=false] Indicates if the value is required. When\n      * FALSE, null will be an acceptable value.\n-     * @param {Boolean} Indicates if the value must be a number rather than a string representing a number.\n+     * @param {Boolean} strict Indicates if the value must be a number rather than a string representing a number.\n      * @return {Boolean} TRUE if the value is valid, FALSE if not\n      */\n     ValidationService.isFloat = function(val, required, strict) {\n@@ -370,7 +370,7 @@ module.exports = function ValidationModule(pb) {\n             return true;\n         }\n \n-        var parsed = parseFloat(val, 10);\n+        var parsed = parseFloat(val);\n         if (strict && val !== parsed) {\n             return false;\n         }\n@@ -421,7 +421,8 @@ module.exports = function ValidationModule(pb) {\n      * Validates that the value is a date object\n      * @static\n      * @method isDate\n-     * @param {*} val The value under test\n+     * @param {Date} val The value under test\n+     * @param {boolean} [required=false]\n      * @return {Boolean} TRUE if the value is valid, FALSE if not\n      */\n     ValidationService.isDate = function(val, required) {\n",
        "bugId": 4,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "MC-DNP",
            "MC-DNP",
            "MC-DNP",
            "MC-DNP",
            "AS-CE",
            "MD-ADD",
            "MC-DNP"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "include/error/formatters/error_formatters.js": {
                "insert": [
                    20
                ],
                "changes": [
                    150
                ]
            },
            "include/http/request_handler.js": {
                "changes": [
                    488
                ]
            }
        },
        "project": "Pencilblue",
        "metrics": {
            "files": 2,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/include/error/formatters/error_formatters.js b/include/error/formatters/error_formatters.js\nindex e056fbf7b..f3e97cea4 100644\n--- a/include/error/formatters/error_formatters.js\n+++ b/include/error/formatters/error_formatters.js\n@@ -17,6 +17,7 @@\n 'use strict';\n \n //dependencies\n+var _ = require('lodash');\n var path        = require('path');\n var HttpStatusCodes = require('http-status-codes');\n var XmlErrorFormatter = require('./xml_error_formatter');\n@@ -147,7 +148,7 @@ module.exports = function(pb) {\n         }\n         params.request.controllerInstance = new ErrorController();\n         params.request.controllerInstance.error = params.error;\n-        params.request.themeRoute = params.request.themeRoute || {};\n+        params.request.themeRoute = !!params.request.themeRoute ? _.clone(params.request.themeRoute) : {};\n         params.request.routeTheme = params.request.routeTheme || {};\n         params.request.siteObj = params.request.siteObj || pb.SiteService.getGlobalSiteContext();\n         params.request.themeRoute.handler = 'render';\ndiff --git a/include/http/request_handler.js b/include/http/request_handler.js\nindex 70c64ac0f..d1b1f60e9 100755\n--- a/include/http/request_handler.js\n+++ b/include/http/request_handler.js\n@@ -485,8 +485,12 @@ module.exports = function RequestHandlerModule(pb) {\n             routeDescriptor.themes[site][theme] = {};\n             routeDescriptor.themes[site].size++;\n         }\n-        routeDescriptor.themes[site][theme][descriptor.method]            = descriptor;\n-        routeDescriptor.themes[site][theme][descriptor.method].controller = Controller;\n+\n+        //set the controller then lock it down to prevent tampering\n+        descriptor.controller = Controller;\n+        routeDescriptor.themes[site][theme][descriptor.method] = Object.freeze(descriptor);\n+\n+\n \n        //only add the descriptor it is new.  We do it here because we need to\n        //know that the controller is good.\n",
        "bugId": 3,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [
            "SQ-AFO",
            "SQ-AFO",
            "SQ-AFO"
        ],
        "failingTests": 5
    },
    {
        "changedFiles": {
            "include/admin_navigation.js": {
                "changes": [
                    479,
                    481,
                    484,
                    502,
                    504,
                    507
                ]
            }
        },
        "project": "Pencilblue",
        "metrics": {
            "files": 1,
            "sizeInLines": 30,
            "linesRem": 0,
            "linesAdd": 24,
            "chunks": 8,
            "linesMod": 6
        },
        "diff": "diff --git a/include/admin_navigation.js b/include/admin_navigation.js\nindex 71adfdf88..a7fc52b19 100755\n--- a/include/admin_navigation.js\n+++ b/include/admin_navigation.js\n@@ -476,12 +476,12 @@ module.exports = function AdminNavigationModule(pb) {\n     /**\n      * Adds a new top level node\n      * @static\n-     * @method addToSite\n+     * @method add\n      * @param {Object} node\n-     * @param site\n+     * @param {String} [site='global']\n      * @return {Boolean}\n      */\n-    AdminNavigation.addToSite = function (node, site) {\n+    AdminNavigation.add = function(node, site) {\n         if (util.isNullOrUndefined(site)) {\n             site = GLOBAL_SITE;\n         }\n@@ -496,15 +496,30 @@ module.exports = function AdminNavigationModule(pb) {\n         return true;\n     };\n \n+    /**\n+     * Adds a new top level node\n+     * @static\n+     * @method addToSite\n+     * @param {Object} node\n+     * @param {String} site\n+     * @return {Boolean}\n+     */\n+    AdminNavigation.addToSite = function (node, site) {\n+        return AdminNavigation.add(node, site);\n+    };\n+\n     /**\n      * Remove a navigation node\n      * @static\n-     * @method removeFromSite\n+     * @method remove\n      * @param id\n-     * @param site\n+     * @param {String} [site='global']\n      * @return {boolean}\n      */\n-    AdminNavigation.removeFromSite = function (id, site) {\n+    AdminNavigation.remove = function(id, site) {\n+        if (util.isNullOrUndefined(site)) {\n+            site = GLOBAL_SITE;\n+        }\n         if (!isDuplicate(id, buildNavigation(site))) {\n             return false;\n         }\n@@ -543,6 +558,18 @@ module.exports = function AdminNavigationModule(pb) {\n         return true;\n     };\n \n+    /**\n+     * Remove a navigation node\n+     * @static\n+     * @method removeFromSite\n+     * @param id\n+     * @param {String} site\n+     * @return {boolean}\n+     */\n+    AdminNavigation.removeFromSite = function (id, site) {\n+        return AdminNavigation.remove(id, site);\n+    };\n+\n     /**\n      * @static\n      * @method removeUnauthorized\n",
        "bugId": 2,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "include/localization.js": {
                "insert": [
                    790
                ]
            }
        },
        "project": "Pencilblue",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/include/localization.js b/include/localization.js\nindex 096e39ebe..ef1e95427 100755\n--- a/include/localization.js\n+++ b/include/localization.js\n@@ -787,6 +787,7 @@ module.exports = function LocalizationModule(pb) {\n \n         //remove from quick lookup\n         delete Localization.supportedLookup[Localization.formatLocale(locale.language, locale.countryCode)];\n+        Localization.supported = new Locale.Locales(Object.keys(Localization.supportedLookup));\n         return keysRemoved > 0;\n     };\n \n",
        "bugId": 1,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "SQ-AFO"
        ],
        "failingTests": ["Util Util.mkdirs should callback with an error when an absolute file path is not provided","Util Util.mkdirsSync should throw an error when an absolute file path is not provided"]
    },
    {
        "changedFiles": {
            "index.js": {
                "insert": [
                    209
                ],
                "changes": [
                    210,
                    222
                ],
                "deletes": [
                    215
                ]
            }
        },
        "project": "Node_redis",
        "metrics": {
            "files": 1,
            "sizeInLines": 10,
            "linesRem": 4,
            "linesAdd": 4,
            "chunks": 5,
            "linesMod": 2
        },
        "diff": "diff --git a/index.js b/index.js\nindex 1057f5ff..efca5866 100644\n--- a/index.js\n+++ b/index.js\n@@ -206,20 +206,20 @@ RedisClient.prototype.do_auth = function () {\n                 debug(\"Warning: Redis server does not require a password, but a password was supplied.\");\n                 err = null;\n                 res = \"OK\";\n+            } else if (self.auth_callback) {\n+                self.auth_callback(err);\n+                self.auth_callback = null;\n             } else {\n-                return self.emit(\"error\", new Error(\"Auth error: \" + err.message));\n+                self.emit(\"error\", err);\n+                return;\n             }\n         }\n \n         res = res.toString();\n-        if (res !== \"OK\") {\n-            return self.emit(\"error\", new Error(\"Auth failed: \" + res));\n-        }\n-\n         debug(\"Auth succeeded \" + self.address + \" id \" + self.connection_id);\n \n         if (self.auth_callback) {\n-            self.auth_callback(err, res);\n+            self.auth_callback(null, res);\n             self.auth_callback = null;\n         }\n \n@@ -509,6 +509,7 @@ RedisClient.prototype.on_data = function (data) {\n \n RedisClient.prototype.return_error = function (err) {\n     var command_obj = this.command_queue.shift(), queue_len = this.command_queue.length;\n+    err.command_used = command_obj.command.toUpperCase();\n \n     if (this.pub_sub_mode === false && queue_len === 0) {\n         this.command_queue = new Queue();\n",
        "bugId": 7,
        "tax": "IncompFI-EH-C",
        "pan_cat": [
            "IF-ABR",
            "MC-DAP",
            "MC-DAP",
            "SQ-AFO"
        ],
        "failingTests": 247
    },
    {
        "changedFiles": {
            "lib/multi.js": {
                "insert": [
                    39
                ]
            }
        },
        "project": "Node_redis",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/multi.js b/lib/multi.js\nindex f80526b5..63f5d210 100644\n--- a/lib/multi.js\n+++ b/lib/multi.js\n@@ -36,6 +36,7 @@ function pipeline_transaction_command (self, command_obj, index) {\n         // Keep track of who wants buffer responses:\n         // By the time the callback is called the command_obj got the buffer_args attribute attached\n         self.wants_buffers[index] = command_obj.buffer_args;\n+        command_obj.callback = tmp;\n     };\n     self._client.internal_send_command(command_obj);\n }\n",
        "bugId": 6,
        "tax": "G-DP",
        "pan_cat": [
            "SQ-AFO"
        ],
        "failingTests": 3
    },
    {
        "changedFiles": {
            "index.js": {
                "changes": [
                    159
                ],
                "deletes": [
                    159
                ]
            }
        },
        "project": "Node_redis",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 2,
            "linesAdd": 3,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/index.js b/index.js\nindex 1b094f90..f587bea5 100644\n--- a/index.js\n+++ b/index.js\n@@ -156,8 +156,6 @@ function RedisClient (options, stream) {\n     this.buffers = options.return_buffers || options.detect_buffers;\n     this.options = options;\n     this.reply = 'ON'; // Returning replies is the default\n-    // Init parser\n-    this.reply_parser = create_parser(this);\n     this.create_stream();\n     // The listeners will not be attached right away, so let's print the deprecation message while the listener is attached\n     this.on('newListener', function (event) {\n@@ -230,6 +228,9 @@ function create_parser (self) {\n RedisClient.prototype.create_stream = function () {\n     var self = this;\n \n+    // Init parser\n+    this.reply_parser = create_parser(this);\n+\n     if (this.options.stream) {\n         // Only add the listeners once in case of a reconnect try (that won't work)\n         if (this.stream) {\n",
        "bugId": 5,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [
            "SQ-RMO",
            "SQ-AFO"
        ],
        "failingTests": 3
    },
    {
        "changedFiles": {
            "index.js": {
                "changes": [
                    311
                ]
            }
        },
        "project": "Node_redis",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/index.js b/index.js\nindex 2661c192..45b20823 100644\n--- a/index.js\n+++ b/index.js\n@@ -308,7 +308,8 @@ RedisClient.prototype.on_ready = function () {\n             }\n         };\n         Object.keys(this.subscription_set).forEach(function (key) {\n-            var parts = key.split(\" \");\n+            var space_index = key.indexOf(\" \");\n+            var parts = [key.slice(0, space_index), key.slice(space_index + 1)];\n             debug(\"Sending pub/sub on_ready \" + parts[0] + \", \" + parts[1]);\n             callback_count++;\n             self.send_command(parts[0] + \"scribe\", [parts[1]], callback);\n",
        "bugId": 4,
        "tax": "IncompFI-MIV-MHS",
        "pan_cat": [
            "AS-CE",
            "Declare",
            "MC-DNP"
        ],
        "failingTests": 146
    },
    {
        "changedFiles": {
            "index.js": {
                "changes": [
                    39
                ]
            }
        },
        "project": "Node_redis",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/index.js b/index.js\nindex f70e85b6..ebe44d96 100644\n--- a/index.js\n+++ b/index.js\n@@ -36,7 +36,7 @@ parsers.push(require('./lib/parsers/javascript'));\n \n function RedisClient(stream, options) {\n     // Copy the options so they are not mutated\n-    options = JSON.parse(JSON.stringify(options));\n+    options = JSON.parse(JSON.stringify(options || {}));\n     var self = this;\n \n     if (!stream.cork) {\n",
        "bugId": 3,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "index.js": {
                "insert": [
                    734,
                    744
                ],
                "changes": [
                    767,
                    800,
                    821,
                    1124,
                    1234
                ]
            }
        },
        "project": "Node_redis",
        "metrics": {
            "files": 1,
            "sizeInLines": 37,
            "linesRem": 0,
            "linesAdd": 27,
            "chunks": 9,
            "linesMod": 10
        },
        "diff": "diff --git a/index.js b/index.js\nindex f408e446..d89ea4f6 100644\n--- a/index.js\n+++ b/index.js\n@@ -731,12 +731,20 @@ RedisClient.prototype.send_command = function (command, args, callback) {\n     for (i = 0; i < args.length; i += 1) {\n         if (Buffer.isBuffer(args[i])) {\n             buffer_args = true;\n+            if (this.pipeline !== 0) {\n+                this.pipeline += 2;\n+                this.writeDefault = this.writeBuffers;\n+            }\n         } else if (typeof args[i] !== 'string') {\n             args[i] = String(args[i]);\n         // 30000 seemed to be a good value to switch to buffers after testing and checking the pros and cons\n         } else if (args[i].length > 30000) {\n             big_data = true;\n             args[i] = new Buffer(args[i]);\n+            if (this.pipeline !== 0) {\n+                this.pipeline += 2;\n+                this.writeDefault = this.writeBuffers;\n+            }\n         }\n     }\n     if (this.options.detect_buffers) {\n@@ -764,7 +772,7 @@ RedisClient.prototype.send_command = function (command, args, callback) {\n             this.should_buffer = true;\n         }\n         // Return false to signal buffering\n-        return false;\n+        return !this.should_buffer;\n     }\n \n     if (command === 'subscribe' || command === 'psubscribe' || command === 'unsubscribe' || command === 'punsubscribe') {\n@@ -797,7 +805,7 @@ RedisClient.prototype.send_command = function (command, args, callback) {\n \n         for (i = 0; i < args.length; i += 1) {\n             arg = args[i];\n-            if (!Buffer.isBuffer(arg)) {\n+            if (typeof arg === 'string') {\n                 this.write('$' + Buffer.byteLength(arg) + '\\r\\n' + arg + '\\r\\n');\n             } else {\n                 this.write('$' + arg.length + '\\r\\n');\n@@ -810,6 +818,22 @@ RedisClient.prototype.send_command = function (command, args, callback) {\n     return !this.should_buffer;\n };\n \n+RedisClient.prototype.writeDefault = RedisClient.prototype.writeStrings = function (data) {\n+    var command, str = '';\n+    while (command = this.pipeline_queue.shift()) {\n+        str += command;\n+    }\n+    this.should_buffer = !this.stream.write(str + data);\n+};\n+\n+RedisClient.prototype.writeBuffers = function (data) {\n+    var command;\n+    while (command = this.pipeline_queue.shift()) {\n+        this.stream.write(command);\n+    }\n+    this.should_buffer = !this.stream.write(data);\n+};\n+\n RedisClient.prototype.write = function (data) {\n     if (this.pipeline === 0) {\n         this.should_buffer = !this.stream.write(data);\n@@ -818,11 +842,7 @@ RedisClient.prototype.write = function (data) {\n \n     this.pipeline--;\n     if (this.pipeline === 0) {\n-        var command, str = '';\n-        while (command = this.pipeline_queue.shift()) {\n-            str += command;\n-        }\n-        this.should_buffer = !this.stream.write(str + data);\n+        this.writeDefault(data);\n         return;\n     }\n \n@@ -1121,10 +1141,12 @@ Multi.prototype.exec_transaction = function (callback) {\n         this.send_command(command, args, index, cb);\n     }\n \n-    this._client.uncork();\n-    return this._client.send_command('exec', [], function(err, replies) {\n+    this._client.send_command('exec', [], function(err, replies) {\n         self.execute_callback(err, replies);\n     });\n+    this._client.uncork();\n+    this._client.writeDefault = this._client.writeStrings;\n+    return !this._client.should_buffer;\n };\n \n Multi.prototype.execute_callback = function (err, replies) {\n@@ -1231,7 +1253,8 @@ Multi.prototype.exec = Multi.prototype.EXEC = Multi.prototype.exec_batch = funct\n         index++;\n     }\n     this._client.uncork();\n-    return this._client.should_buffer;\n+    this._client.writeDefault = this._client.writeStrings;\n+    return !this._client.should_buffer;\n };\n \n var createClient = function (port_arg, host_arg, options) {\n",
        "bugId": 2,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "SQ-AFO",
            "SQ-AFO",
            "IF-APC",
            "IF-CC",
            "MD-ADD",
            "MD-ADD",
            "SQ-AROB",
            "SQ-AROB",
            "Return"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/parsers/javascript.js": {
                "insert": [
                    9
                ],
                "changes": [
                    40,
                    99
                ],
                "deletes": [
                    40,
                    97,
                    172
                ]
            }
        },
        "project": "Node_redis",
        "metrics": {
            "files": 1,
            "sizeInLines": 21,
            "linesRem": 6,
            "linesAdd": 9,
            "chunks": 9,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/parsers/javascript.js b/lib/parsers/javascript.js\nindex e6f6ec07..7decd044 100644\n--- a/lib/parsers/javascript.js\n+++ b/lib/parsers/javascript.js\n@@ -6,6 +6,8 @@ function JavascriptReplyParser() {\n     this.name = exports.name;\n     this._buffer = new Buffer(0);\n     this._offset = 0;\n+    this._big_offset = 0;\n+    this._chunks_size = 0;\n     this._buffers = [];\n }\n \n@@ -37,10 +39,6 @@ JavascriptReplyParser.prototype._parseResult = function (type) {\n         }\n         return new Error(this._buffer.toString('utf-8', start, end));\n     } else if (type === 36) { // $\n-        // set a rewind point, as the packet could be larger than the\n-        // buffer in memory\n-        offset = this._offset - 1;\n-\n         packetHeader = this.parseHeader();\n \n         // packets with a size of -1 are considered null\n@@ -52,6 +50,8 @@ JavascriptReplyParser.prototype._parseResult = function (type) {\n         start = this._offset;\n \n         if (end > this._buffer.length) {\n+            this._chunks_size = this._buffer.length - this._offset - 2;\n+            this._big_offset = packetHeader;\n             throw new IncompleteReadBuffer('Wait for more data.');\n         }\n \n@@ -60,6 +60,7 @@ JavascriptReplyParser.prototype._parseResult = function (type) {\n \n         return this._buffer.slice(start, end);\n     } else if (type === 42) { // *\n+        // set a rewind point, as the packet is larger than the buffer in memory\n         offset = this._offset;\n         packetHeader = this.parseHeader();\n \n@@ -94,14 +95,11 @@ JavascriptReplyParser.prototype._parseResult = function (type) {\n };\n \n JavascriptReplyParser.prototype.execute = function (buffer) {\n-    var i = buffer.length - 1;\n \n-    while (buffer[i] !== 0x0a) {\n-        i--;\n-        if (i < 1) {\n-            this._buffers.push(buffer);\n-            return;\n-        }\n+    if (this._chunks_size !== 0 && this._big_offset > this._chunks_size + buffer.length) {\n+        this._buffers.push(buffer);\n+        this._chunks_size += buffer.length;\n+        return;\n     }\n \n     if (this._buffers.length !== 0) {\n@@ -109,6 +107,8 @@ JavascriptReplyParser.prototype.execute = function (buffer) {\n         this._buffers.push(buffer);\n         this._buffer = Buffer.concat(this._buffers);\n         this._buffers = [];\n+        this._big_offset = 0;\n+        this._chunks_size = 0;\n     } else if (this._offset >= this._buffer.length) {\n         this._buffer = buffer;\n     } else {\n@@ -142,6 +142,8 @@ JavascriptReplyParser.prototype.run = function (buffer) {\n \n                 this.send_reply(this._parseResult(type));\n             } else if (type !== 10 && type !== 13) {\n+                // Reset the buffer so the parser can handle following commands properly\n+                this._buffer = new Buffer(0);\n                 var err = new Error('Protocol error, got \"' + String.fromCharCode(type) + '\" as reply type byte');\n                 this.send_error(err);\n             }\n@@ -169,7 +171,6 @@ JavascriptReplyParser.prototype._packetEndOffset = function () {\n     while (this._buffer[offset] !== 0x0d && this._buffer[offset + 1] !== 0x0a) {\n         offset++;\n \n-        /* istanbul ignore if: activate the js parser out of memory test to test this */\n         if (offset >= this._buffer.length) {\n             throw new IncompleteReadBuffer('Did not see LF after NL reading multi bulk count (' + offset + ' => ' + this._buffer.length + ', ' + this._offset + ')');\n         }\n",
        "bugId": 1,
        "tax": "IncorFI-P",
        "pan_cat": [
            "SQ-AFO",
            "SQ-AFO",
            "SQ-AFO",
            "SQ-AFO",
            "IF-APCJ",
            "SQ-AFO",
            "SQ-AFO",
            "SQ-AFO"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/schema/documentarray.js": {
                "changes": [
                    82,
                    95,
                    101,
                    104
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/schema/documentarray.js b/lib/schema/documentarray.js\nindex 7ed917cafb..0e29ac32f8 100644\n--- a/lib/schema/documentarray.js\n+++ b/lib/schema/documentarray.js\n@@ -79,8 +79,8 @@ DocumentArray.prototype.doValidate = function (array, fn, scope) {\n   SchemaType.prototype.doValidate.call(this, array, function (err) {\n     if (err) return fn(err);\n \n-    var count = array && array.length\n-      , error;\n+    var count = array && array.length;\n+    var error;\n \n     if (!count) return fn();\n \n@@ -92,16 +92,16 @@ DocumentArray.prototype.doValidate = function (array, fn, scope) {\n       // sidestep sparse entries\n       var doc = array[i];\n       if (!doc) {\n-        --count || fn();\n+        --count || fn(errors);\n         continue;\n       }\n \n       ;(function (i) {\n         doc.validate(function (err) {\n-          if (err && !error) {\n-            return fn(error = err);\n+          if (err) {\n+            error = err;\n           }\n-          --count || fn();\n+          --count || fn(error);\n         });\n       })(i);\n     }\n",
        "bugId": 29,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "MC-DNP",
            "MC-DNP",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/types/documentarray.js": {
                "insert": [
                    189
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/types/documentarray.js b/lib/types/documentarray.js\nindex e6c5fd1719..a6120d3c9a 100644\n--- a/lib/types/documentarray.js\n+++ b/lib/types/documentarray.js\n@@ -186,6 +186,15 @@ MongooseDocumentArray.prototype.notify = function notify (event) {\n     var i = self.length;\n     while (i--) {\n       if (!self[i]) continue;\n+      switch(event) {\n+        // only swap for save event for now, we may change this to all event types later\n+        case 'save':\n+          val = self[i];\n+          break;\n+        default:\n+          // NO-OP\n+          break;\n+      }\n       self[i].emit(event, val);\n     }\n   }\n",
        "bugId": 28,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "SW-ARSB"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/types/embedded.js": {
                "insert": [
                    105,
                    114
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 23,
            "linesRem": 0,
            "linesAdd": 23,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/types/embedded.js b/lib/types/embedded.js\nindex 6de36e6276..a1eca2f539 100644\n--- a/lib/types/embedded.js\n+++ b/lib/types/embedded.js\n@@ -102,6 +102,7 @@ EmbeddedDocument.prototype.remove = function (fn) {\n     }\n     this.__parentArray.pull({ _id: _id });\n     this.willRemove = true;\n+    registerRemoveListener(this);\n   }\n \n   if (fn)\n@@ -110,6 +111,28 @@ EmbeddedDocument.prototype.remove = function (fn) {\n   return this;\n };\n \n+/*!\n+ * Registers remove event listeners for triggering\n+ * on subdocuments.\n+ *\n+ * @param {EmbeddedDocument} sub\n+ * @api private\n+ */\n+\n+function registerRemoveListener (sub) {\n+  var owner = sub.ownerDocument();\n+\n+  owner.on('save', emitRemove);\n+  owner.on('remove', emitRemove);\n+\n+  function emitRemove () {\n+    owner.removeListener('save', emitRemove);\n+    owner.removeListener('remove', emitRemove);\n+    sub.emit('remove', sub);\n+    owner = sub = emitRemove = null;\n+  };\n+};\n+\n /**\n  * Override #update method of parent documents.\n  * @api private\n",
        "bugId": 27,
        "tax": "IncompFI-MDP",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/schema/string.js": {
                "changes": [
                    82
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/schema/string.js b/lib/schema/string.js\nindex e4b9d37a20..f41427f283 100644\n--- a/lib/schema/string.js\n+++ b/lib/schema/string.js\n@@ -79,7 +79,7 @@ SchemaString.prototype.enum = function () {\n     return this;\n   }\n \n-  var values;\n+  var values, errorMessage;\n   if (utils.isObject(arguments[0])) {\n     values = arguments[0].values;\n     errorMessage = arguments[0].message;\n",
        "bugId": 26,
        "tax": "G-VI-MI",
        "pan_cat": [
            "Declare"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "changes": [
                    1529
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex 6aade29768..d178b70705 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -1526,7 +1526,7 @@ function minimize (obj) {\n     , i = keys.length\n   \n   while (i--) {\n-    if (!Array.isArray(obj[keys[i]]) && obj[keys[i]] === Object(obj[keys[i]])) {\n+    if (utils.isObject(obj[keys[i]])) {\n       obj[keys[i]] = minimize(obj[keys[i]]);\n     }\n     if (obj[keys[i]] === undefined) {\n",
        "bugId": 25,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "insert": [
                    2106,
                    2202
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 24,
            "linesRem": 0,
            "linesAdd": 24,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex 81cb6165e3..45ef5f71f9 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -2103,6 +2103,8 @@ function populate (model, docs, options, cb) {\n     }\n \n     if (ret) {\n+      ret = convertTo_id(ret);\n+\n       // previously we always assigned this even if the document had no _id\n       options._docs[id] = Array.isArray(ret)\n         ? ret.slice()\n@@ -2197,6 +2199,28 @@ function populate (model, docs, options, cb) {\n   });\n }\n \n+/*!\n+ * Retrieve the _id of `val` if a Document or Array of Documents.\n+ *\n+ * @param {Array|Document|Any} val\n+ * @return {Array|Document|Any}\n+ */\n+\n+function convertTo_id (val) {\n+  if (val instanceof Model) return val._id;\n+\n+  if (Array.isArray(val)) {\n+    for (var i = 0; i < val.length; ++i) {\n+      if (val[i] instanceof Model) {\n+        val[i] = val[i]._id;\n+      }\n+    }\n+    return val;\n+  }\n+\n+  return val;\n+}\n+\n /*!\n  * Assigns documents returned from a population query back\n  * to the original document path.\n",
        "bugId": 24,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "changes": [
                    2044
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex aae102bc97..c3c6dbfb52 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -2041,7 +2041,7 @@ function populate (model, docs, options, cb) {\n     // for document matching during assignment. we'll delete the\n     // _id back off before returning the result.\n     if ('string' == typeof select) {\n-      select = null;\n+      select = select.replace(/\\s?-_id\\s?/g, ' ');\n     } else {\n       // preserve original select conditions by copying\n       select = utils.object.shallowCopy(select);\n",
        "bugId": 23,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "changes": [
                    767
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex a0e1cd4f62..6922b44d8e 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -764,7 +764,7 @@ Model.remove = function remove (conditions, callback) {\n   }\n \n   // get the mongodb collection object\n-  var mq = new Query({}, {}, this, this.collection);\n+  var mq = new Query(conditions, {}, this, this.collection);\n \n   return mq.remove(callback);\n };\n",
        "bugId": 22,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "changes": [
                    168,
                    172
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex 829dac821d..e427e1d226 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -165,11 +165,16 @@ Document.prototype.$__buildDoc = function (obj, fields, skipId) {\n       , last = len-1\n       , doc_ = doc\n       , i = 0\n-\n+    var curPath = \"\";\n     for (; i < len; ++i) {\n       var piece = path[i]\n         , def\n-\n+      // we want to be able to exclude stuff at intermediary levels of documents\n+      if (exclude) {\n+        curPath += piece;\n+        if (curPath in fields) break;\n+        curPath += \".\";\n+      }\n       if (i === last) {\n         if (fields) {\n           if (exclude) {\n",
        "bugId": 21,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "changes": [
                    1546
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex b28dd246f1..24089700b3 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -1543,7 +1543,12 @@ Document.prototype.toJSON = function (options) {\n   // check for object type since an array of documents\n   // being stringified passes array indexes instead\n   // of options objects. JSON.stringify([doc, doc])\n-  if (!(options && 'Object' == options.constructor.name)) {\n+  // 8/5/2013-(3.7)\n+  // The second check here is to make sure that populated documents (or\n+  // subdocuments) use their own options for `.toJSON()` instead of their\n+  // parent's\n+  if (!(options && 'Object' == options.constructor.name)\n+      || ((!options || options.json) && this.schema.options.toJSON)) {\n     options = this.schema.options.toJSON\n       ? clone(this.schema.options.toJSON)\n       : {};\n",
        "bugId": 20,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "changes": [
                    2292
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex 9f8c31560a..4ad14db9e9 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -2289,7 +2289,9 @@ Model._getSchema = function _getSchema (path) {\n           // are remaining document paths to look up for casting.\n           // Also we need to handle array.$.path since schema.path\n           // doesn't work for that.\n-          if (p !== parts.length) {\n+          // Note: gh-1572, need to make sure the foundschema has a schema\n+          // attr, else we'll get bad errors here\n+          if (p !== parts.length && foundschema.schema) {\n             if ('$' === parts[p]) {\n               // comments.$.comments.$.title\n               return search(parts.slice(p+1), foundschema.schema);\n",
        "bugId": 19,
        "tax": "IncompFI-MIV-MNC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "insert": [
                    2030
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex 1e16c9fc7e..156f3a03c3 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -2027,6 +2027,12 @@ function populate (model, docs, options, cb) {\n     }\n   }\n \n+  // if a limit option is passed, we should have the limit apply to *each*\n+  // document, not apply in the aggregate\n+  if (options.options && options.options.limit) {\n+    options.options.limit = options.options.limit * len;\n+  }\n+\n   Model.find(match, select, options.options, function (err, vals) {\n     if (err) return cb(err);\n \n",
        "bugId": 18,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE",
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/query.js": {
                "changes": [
                    2471
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/query.js b/lib/query.js\nindex 790bae2080..011977b348 100644\n--- a/lib/query.js\n+++ b/lib/query.js\n@@ -2468,7 +2468,9 @@ Query.prototype._findAndModify = function (type, callback) {\n   .collection\n   .findAndModify(castedQuery, sort, castedDoc, opts, tick(function (err, doc) {\n     if (err) return promise.error(err);\n-    if (!doc) return promise.complete(null);\n+    if (!doc || (utils.isObject(doc) && Object.keys(doc).length === 0)) {\n+      return promise.complete(null);\n+    }\n \n     if (!self.options.populate) {\n       return true === opts.lean\n",
        "bugId": 17,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "changes": [
                    342
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex 7d85047507..a72206843f 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -339,7 +339,7 @@ function handleAtomics (self, where, delta, data, value) {\n \n Model.prototype.$__delta = function () {\n   var dirty = this.$__dirty();\n-  if (!dirty.length) return;\n+  if (!dirty.length && VERSION_ALL != this.$__.version) return;\n \n   var where = {}\n     , delta = {}\n",
        "bugId": 16,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/schema/array.js": {
                "insert": [
                    240
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/schema/array.js b/lib/schema/array.js\nindex 749a906f1c..81f3dd598b 100644\n--- a/lib/schema/array.js\n+++ b/lib/schema/array.js\n@@ -237,6 +237,7 @@ SchemaArray.prototype.$conditionalHandlers = {\n   , '$in': SchemaArray.prototype.castForQuery\n   , '$nin': SchemaArray.prototype.castForQuery\n   , '$regex': SchemaArray.prototype.castForQuery\n+  , '$options': String\n   , '$near': SchemaArray.prototype.castForQuery\n   , '$nearSphere': SchemaArray.prototype.castForQuery\n   , '$gt': SchemaArray.prototype.castForQuery\n",
        "bugId": 15,
        "tax": "G-VI-MI",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "changes": [
                    1800
                ],
                "deletes": [
                    1800
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 1,
            "linesAdd": 4,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex 3a68c7a62f..ad16a81a3b 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -1797,9 +1797,12 @@ function populate (model, docs, options, cb) {\n         ? ret.slice()\n         : ret;\n \n-      rawIds.push(ret);\n     }\n \n+    // always retain original values, even empty values. these are\n+    // used to map the query results back to the correct position.\n+    rawIds.push(ret);\n+\n     if (isDocument) {\n       // cache original populated _ids and model used\n       doc.populated(path, options._docs[id], options);\n",
        "bugId": 14,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "SQ-RMO",
            "SQ-AMO"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "changes": [
                    1430
                ]
            },
            "lib/model.js": {
                "changes": [
                    173,
                    381
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 2,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 4,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex 9ef9fec6d9..1b4dc2bddf 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -1427,7 +1427,7 @@ Document.prototype.$__doQueue = function () {\n  */\n \n Document.prototype.toObject = function (options) {\n-  if (options && options.convertToId) {\n+  if (options && options.depopulate && !options.isParent) {\n     // populated paths that we set to a document?\n     Embedded || (Embedded = require('./types/embedded'));\n     if (!(this instanceof Embedded))  {\n@@ -1444,6 +1444,7 @@ Document.prototype.toObject = function (options) {\n   }\n \n   ;('minimize' in options) || (options.minimize = this.schema.options.minimize);\n+  options.isParent = false;\n \n   var ret = clone(this._doc, options);\n \ndiff --git a/lib/model.js b/lib/model.js\nindex 632811613d..3a68c7a62f 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -170,7 +170,7 @@ Model.prototype.save = function save (fn) {\n \n   if (this.isNew) {\n     // send entire doc\n-    var obj = this.toObject({ depopulate: 1 });\n+    var obj = this.toObject({ depopulate: 1, isParent: 1 });\n     this.$__version(true, obj);\n     this.collection.insert(obj, options, complete);\n     this.$__reset();\n@@ -378,7 +378,7 @@ Model.prototype.$__delta = function () {\n       operand(this, where, delta, data, value);\n \n     } else {\n-      value = utils.clone(value, { convertToId: 1 });\n+      value = utils.clone(value, { depopulate: 1 });\n       operand(this, where, delta, data, value);\n     }\n   }\n",
        "bugId": 13,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "IF-CC",
            "AS-CE",
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "insert": [
                    498
                ],
                "changes": [
                    499,
                    661
                ],
                "deletes": [
                    504,
                    1629
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 8,
            "linesAdd": 5,
            "chunks": 5,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex df88fc0c6c..355918e68e 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -495,19 +495,17 @@ Document.prototype.set = function (path, val, type, options) {\n     if (!pathToMark) pathToMark = path;\n   }\n \n+  // if this doc is being constructed we should not trigger getters\n+  var priorVal = constructing\n+    ? undefined\n+    : this.get(path);\n+\n   if (!schema || null === val || undefined === val) {\n-    this.$__set(pathToMark, path, constructing, parts, schema, val);\n+    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n     return this;\n   }\n \n   var self = this;\n-\n-  // if this doc is being constructed we should not\n-  // trigger getters.\n-  var priorVal = constructing\n-    ? undefined\n-    : this.get(path);\n-\n   var shouldSet = this.$__try(function(){\n     val = schema.applySetters(val, self, false, priorVal);\n   });\n@@ -658,7 +656,9 @@ Document.prototype.get = function (path, type) {\n     , obj = this._doc;\n \n   for (var i = 0, l = pieces.length; i < l; i++) {\n-    obj = null == obj ? null : obj[pieces[i]];\n+    obj = undefined === obj || null === obj\n+      ? undefined\n+      : obj[pieces[i]];\n   }\n \n   if (schema) {\n@@ -1626,7 +1626,6 @@ Document.prototype.populate = function populate () {\n   return this;\n }\n \n-\n /**\n  * Gets _id(s) used during population of the given `path`.\n  *\n",
        "bugId": 12,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [
            "VAL-CHK",
            "AS-CE",
            "MC-DNP",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/query.js": {
                "changes": [
                    517
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/query.js b/lib/query.js\nindex 4932adc20c..84b98e37d7 100644\n--- a/lib/query.js\n+++ b/lib/query.js\n@@ -514,7 +514,7 @@ Query.prototype._applyPaths = function applyPaths () {\n \n       // if there are other fields being included, add this one\n       // if no other included fields, leave this out (implied inclusion)\n-      if (false === exclude && keys.length > 1) {\n+      if (false === exclude && keys.length > 1 && !~keys.indexOf(path)) {\n         fields[path] = 1;\n       }\n \n",
        "bugId": 11,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/types/documentarray.js": {
                "insert": [
                    123
                ],
                "changes": [
                    127,
                    129
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/types/documentarray.js b/lib/types/documentarray.js\nindex a4c2f94b83..1820a6e397 100644\n--- a/lib/types/documentarray.js\n+++ b/lib/types/documentarray.js\n@@ -120,13 +120,14 @@ MongooseDocumentArray.prototype.id = function (id) {\n  *\n  * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n  *\n+ * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n  * @return {Array}\n  * @api public\n  */\n \n-MongooseDocumentArray.prototype.toObject = function () {\n+MongooseDocumentArray.prototype.toObject = function (options) {\n   return this.map(function (doc) {\n-    return doc && doc.toObject() || null;\n+    return doc && doc.toObject(options) || null;\n   });\n };\n \n",
        "bugId": 10,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MC-DNP",
            "MC-DNP"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "changes": [
                    1142
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex 3a99224d79..df88fc0c6c 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -1139,7 +1139,7 @@ function define (prop, subprops, prototype, prefix, keys) {\n         }\n       , set: function (v) {\n           if (v instanceof Document) v = v.toObject();\n-          return this.set(path, v);\n+          return (this.$__.scope || this).set(path, v);\n         }\n     });\n \n",
        "bugId": 9,
        "tax": "G-VI-MVI",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "changes": [
                    355
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex 14259ee06d..366c499610 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -352,7 +352,7 @@ for (var k in hooks) {\n Document.prototype.update = function update () {\n   var args = utils.args(arguments);\n   args.unshift({_id: this._id});\n-  this.constructor.update.apply(this.constructor, args);\n+  return this.constructor.update.apply(this.constructor, args);\n }\n \n /**\n",
        "bugId": 8,
        "tax": "G-RS-MRS",
        "pan_cat": [],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/query.js": {
                "changes": [
                    2423,
                    2427,
                    2430
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/query.js b/lib/query.js\nindex 98609086f8..0447832976 100644\n--- a/lib/query.js\n+++ b/lib/query.js\n@@ -2420,15 +2420,19 @@ Query.prototype._findAndModify = function (type, callback) {\n     if (err) return promise.error(err);\n     if (!doc) return promise.complete(null);\n \n-    if (true === opts.lean) {\n-      return promise.complete(doc);\n+    if (!self.options.populate) {\n+      return true === opts.lean\n+        ? promise.complete(doc)\n+        : completeOne(model, doc, fields, self, null, promise);\n     }\n \n-    var casted = new model(undefined, fields, true);\n-    casted.init(doc, function (err) {\n+    var pop = preparePopulationOptions(self, opts);\n+    model.populate(doc, pop, function (err, doc) {\n       if (err) return promise.error(err);\n-      promise.complete(casted);\n-    });\n+      return true === opts.lean\n+        ? promise.complete(doc)\n+        : completeOne(model, doc, fields, self, pop, promise);\n+    })\n   }));\n \n   return promise;\n",
        "bugId": 7,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "IF-CHG",
            "MC-DNP",
            "MD-CHG",
            "AS-CE",
            "IF-APC"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "lib/schema/array.js": {
                "changes": [
                    20,
                    39
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/schema/array.js b/lib/schema/array.js\nindex ec24fe9ea1..749a906f1c 100644\n--- a/lib/schema/array.js\n+++ b/lib/schema/array.js\n@@ -17,7 +17,8 @@ var SchemaType = require('../schematype')\n   , EmbeddedDoc = require('../types').Embedded\n   , Mixed = require('./mixed')\n   , Query = require('../query')\n-  , isMongooseObject = require('../utils').isMongooseObject\n+  , utils = require('../utils')\n+  , isMongooseObject = utils.isMongooseObject\n \n /**\n  * Array SchemaType constructor\n@@ -36,9 +37,9 @@ function SchemaArray (key, cast, options) {\n     if ('Object' === cast.constructor.name) {\n       if (cast.type) {\n         // support { type: Woot }\n-        castOptions = cast;\n-        cast = cast.type;\n+        castOptions = utils.clone(cast); // do not alter user arguments\n         delete castOptions.type;\n+        cast = cast.type;\n       } else {\n         cast = Mixed;\n       }\n",
        "bugId": 6,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "lib/types/documentarray.js": {
                "insert": [
                    61
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/types/documentarray.js b/lib/types/documentarray.js\nindex 94d77e6f4c..a4c2f94b83 100644\n--- a/lib/types/documentarray.js\n+++ b/lib/types/documentarray.js\n@@ -58,6 +58,11 @@ MongooseDocumentArray.prototype.__proto__ = MongooseArray.prototype;\n \n MongooseDocumentArray.prototype._cast = function (value) {\n   if (value instanceof this._schema.casterConstructor) {\n+    if (!(value.__parent && value.__parentArray)) {\n+      // value may have been created using array.create()\n+      value.__parent = this._parent;\n+      value.__parentArray = this;\n+    }\n     return value;\n   }\n \n",
        "bugId": 5,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "lib/query.js": {
                "changes": [
                    1633,
                    1732
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 30,
            "linesRem": 0,
            "linesAdd": 28,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/query.js b/lib/query.js\nindex 08021468a1..c7c43dd816 100644\n--- a/lib/query.js\n+++ b/lib/query.js\n@@ -1630,7 +1630,7 @@ Query.prototype.execFind = function (callback) {\n         : completeMany(model, docs, fields, self, null, promise);\n     }\n \n-    var pop = utils.object.vals(self.options.populate);\n+    var pop = preparePopulationOptions(self, options);\n     model.populate(docs, pop, function (err, docs) {\n       if (err) return promise.error(err);\n       return true === options.lean\n@@ -1729,7 +1729,7 @@ Query.prototype.findOne = function (callback) {\n         : completeOne(model, doc, fields, self, null, promise);\n     }\n \n-    var pop = utils.object.vals(self.options.populate);\n+    var pop = preparePopulationOptions(self, options);\n     model.populate(doc, pop, function (err, doc) {\n       if (err) return promise.error(err);\n       return true === options.lean\n@@ -1741,6 +1741,34 @@ Query.prototype.findOne = function (callback) {\n   return this;\n }\n \n+/*!\n+ * Prepare a set of path options for query population.\n+ *\n+ * @param {Query} query\n+ * @param {Object} options\n+ * @return {Array}\n+ */\n+\n+function preparePopulationOptions (query, options) {\n+  var pop = utils.object.vals(query.options.populate);\n+\n+  // lean options should trickle through all queries\n+  if (options.lean) pop.forEach(makeLean);\n+\n+  return pop;\n+}\n+\n+/*!\n+ * Set each path query option to lean\n+ *\n+ * @param {Object} option\n+ */\n+\n+function makeLean (option) {\n+  option.options || (option.options = {});\n+  option.options.lean = true;\n+}\n+\n /*!\n  * hydrates a document\n  *\n",
        "bugId": 4,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MD-ADD",
            "AS-CE",
            "MC-DNP",
            "MC-DNP"
        ],
        "failingTests": 3
    },
    {
        "changedFiles": {
            "lib/document.js": {
                "changes": [
                    1082
                ],
                "deletes": [
                    1079
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 2,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/document.js b/lib/document.js\nindex d46ae71aba..a53477143e 100644\n--- a/lib/document.js\n+++ b/lib/document.js\n@@ -1076,10 +1076,8 @@ Document.prototype._dirty = function _dirty () {\n       minimal.push(item);\n       top = item;\n     } else {\n-      if (!(item.value && top.value)) return;\n-\n       // special case for top level MongooseArrays\n-      if (top.value._atomics && top.value.hasAtomics()) {\n+      if (top.value && top.value._atomics && top.value.hasAtomics()) {\n         // the `top` array itself and a sub path of `top` are being modified.\n         // the only way to honor all of both modifications is through a $set\n         // of entire array.\n",
        "bugId": 3,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-RMV",
            "IF-CC"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "lib/model.js": {
                "changes": [
                    1601
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex 0c52b7b207..6c51f138a6 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -1598,11 +1598,11 @@ function populate (model, docs, options, cb) {\n     schema = schema.caster;\n   }\n \n-  var modelName = options.model || schema && schema.options.ref;\n-  if (!modelName) {\n-    var msg = 'Population: unable to determine model name for `' + path + '`';\n-    return cb(new Error(msg));\n-  }\n+  // model name for the populate query\n+  var modelName = options.model                // overridden in query options\n+               || schema && schema.options.ref // declared in schema\n+               || model.modelName              // an ad-hoc structure\n+\n   var model = model.db.model(modelName);\n \n   // normalize single / multiple docs passed\n",
        "bugId": 2,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "AS-CE",
            "IF-RMV"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "lib/schema.js": {
                "changes": [
                    84
                ]
            },
            "lib/model.js": {
                "insert": [
                    1954
                ]
            }
        },
        "project": "Mongoose",
        "metrics": {
            "files": 2,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 2,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/model.js b/lib/model.js\nindex 367d38d7d5..790357f317 100644\n--- a/lib/model.js\n+++ b/lib/model.js\n@@ -1951,6 +1951,15 @@ Model._getSchema = function _getSchema (path) {\n  */\n \n Model.compile = function compile (name, schema, collectionName, connection, base) {\n+  var versioningEnabled = false !== schema.options.versionKey;\n+\n+  if (versioningEnabled && !schema.paths[schema.options.versionKey]) {\n+    // add versioning to top level documents only\n+    var o = {};\n+    o[schema.options.versionKey] = Number;\n+    schema.add(o);\n+  }\n+\n   // generate new class\n   function model (doc, fields, skipId) {\n     if (!(this instanceof model))\ndiff --git a/lib/schema.js b/lib/schema.js\nindex 62d9d5c9c7..6359b4851e 100644\n--- a/lib/schema.js\n+++ b/lib/schema.js\n@@ -81,10 +81,7 @@ function Schema (obj, options) {\n   if (autoid) {\n     this.virtual('id').get(idGetter);\n   }\n-\n-  // versioning not directly added to schema b/c we only want\n-  // it in the top level document, not embedded ones.\n-};\n+}\n \n /*!\n  * Returns this documents _id cast to a string.\n",
        "bugId": 1,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "lib/reporter.js": {
                "changes": [
                    28
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/reporter.js b/lib/reporter.js\nindex fcde0ad3b..72754c426 100644\n--- a/lib/reporter.js\n+++ b/lib/reporter.js\n@@ -25,7 +25,8 @@ var createErrorFormatter = function (config, emitter, SourceMapConsumer) {\n     return null\n   }\n \n-  var URL_REGEXP = new RegExp('(?:https?:\\\\/\\\\/[^\\\\/\\\\s]*)?\\\\/?' +\n+  var URL_REGEXP = new RegExp('(?:https?:\\\\/\\\\/' +\n+    config.hostname + '(?:\\\\:' + config.port + ')?' + ')?\\\\/?' +\n     '(base/|absolute)' + // prefix, including slash for base/ to create relative paths.\n     '((?:[A-z]\\\\:)?[^\\\\?\\\\s\\\\:]*)' + // path\n     '(\\\\?\\\\w*)?' + // sha\n",
        "bugId": 22,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/file-list.js": {
                "insert": [
                    16
                ],
                "changes": [
                    158
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/file-list.js b/lib/file-list.js\nindex 228e3d1a2..64e25b4c8 100644\n--- a/lib/file-list.js\n+++ b/lib/file-list.js\n@@ -13,6 +13,7 @@ var Promise = require('bluebird')\n var mm = require('minimatch')\n var Glob = require('glob').Glob\n var fs = Promise.promisifyAll(require('fs'))\n+var pathLib = require('path')\n \n var File = require('./file')\n var Url = require('./url')\n@@ -155,7 +156,7 @@ List.prototype._refresh = function () {\n       return Promise.resolve()\n     }\n \n-    var mg = new Glob(pattern, GLOB_OPTS)\n+    var mg = new Glob(pathLib.normalize(pattern), GLOB_OPTS)\n     var files = mg.found\n     buckets.set(pattern, new Set())\n \n",
        "bugId": 21,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "MD-DAP"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/file-list.js": {
                "changes": [
                    76,
                    78
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/file-list.js b/lib/file-list.js\nindex db8316773..55efeb075 100644\n--- a/lib/file-list.js\n+++ b/lib/file-list.js\n@@ -73,13 +73,15 @@ var List = function (patterns, excludes, emitter, preprocess, batchInterval) {\n   // Emit the `file_list_modified` event.\n   // This function is debounced to the value of `batchInterval`\n   // to avoid spamming the listener.\n-  this._emitModified = _.debounce(function () {\n+  this._emitModified = function () {\n     self._emitter.emit('file_list_modified', self.files)\n-  }, this._batchInterval, {\n-    leading: false,\n-    maxWait: 2000,\n-    trailing: true\n-  })\n+\n+    self._emitModified = _.throttle(function () {\n+      self._emitter.emit('file_list_modified', self.files)\n+    }, self._batchInterval, {\n+      leading: false\n+    })\n+  }\n }\n \n // Private Interface\n",
        "bugId": 20,
        "tax": "G-DP",
        "pan_cat": [],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/preprocessor.js": {
                "insert": [
                    1,
                    8,
                    26
                ],
                "deletes": [
                    59
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 5,
            "linesAdd": 4,
            "chunks": 4,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/preprocessor.js b/lib/preprocessor.js\nindex b7b1a41b2..88f3c67cd 100644\n--- a/lib/preprocessor.js\n+++ b/lib/preprocessor.js\n@@ -1,9 +1,12 @@\n+var path = require('path');\n var fs = require('graceful-fs');\n var crypto = require('crypto');\n var mm = require('minimatch');\n \n var log = require('./logger').create('preprocess');\n \n+// TODO(vojta): extract get/create temp dir somewhere else (use the same for launchers etc)\n+var TMP = process.env.TMPDIR || process.env.TMP || process.env.TEMP || '/tmp';\n \n var sha1 = function(data) {\n   var hash = crypto.createHash('sha1');\n@@ -20,6 +23,7 @@ var createPreprocessor = function(config, basePath, injector) {\n     var preprocessors = [];\n     var nextPreprocessor = function(content) {\n       if (!preprocessors.length) {\n+        file.contentPath = path.normalize(TMP + '/'  + sha1(file.path) + path.extname(file.path));\n         return fs.writeFile(file.contentPath, content, function() {\n           done();\n         });\n@@ -56,11 +60,6 @@ var createPreprocessor = function(config, basePath, injector) {\n \n     if (preprocessors.length) {\n       return fs.readFile(file.originalPath, function(err, buffer) {\n-        // TODO(vojta): extract get/create temp dir somewhere else (use the same for launchers etc)\n-        var env = process.env;\n-        var tmp = env.TMPDIR || env.TMP || env.TEMP || '/tmp';\n-        file.contentPath = tmp + '/'  + sha1(file.originalPath) + '.js';\n-\n         nextPreprocessor(buffer.toString());\n       });\n     }\n",
        "bugId": 19,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "SQ-AFO"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/file-list.js": {
                "insert": [
                    153,
                    178
                ],
                "changes": [
                    194
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 7,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/file-list.js b/lib/file-list.js\nindex 5cfc928e4..ca9c9e2e2 100644\n--- a/lib/file-list.js\n+++ b/lib/file-list.js\n@@ -150,6 +150,7 @@ List.prototype._isRefreshing = function () {\n List.prototype._refresh = function () {\n   var self = this\n   var buckets = this.buckets\n+  var matchedFiles = new Set()\n \n   var promise = Promise.map(this._patterns, function (patternObject) {\n     var pattern = patternObject.pattern\n@@ -174,6 +175,12 @@ List.prototype._refresh = function () {\n         return Promise.resolve()\n       }\n \n+      if (matchedFiles.has(path)) {\n+        return Promise.resolve()\n+      }\n+\n+      matchedFiles.add(path)\n+\n       var mtime = mg.statCache[path].mtime\n       var doNotCache = patternObject.nocache\n       var file = new File(path, mtime, doNotCache)\n@@ -191,7 +198,7 @@ List.prototype._refresh = function () {\n       files = _.compact(files)\n \n       if (_.isEmpty(files)) {\n-        log.warn('All files matched by \"%s\" were excluded.', pattern)\n+        log.warn('All files matched by \"%s\" were excluded or matched by prior matchers.', pattern)\n       } else {\n         buckets.set(pattern, new Set(files))\n       }\n",
        "bugId": 18,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 5
    },
    {
        "changedFiles": {
            "lib/web-server.js": {
                "insert": [
                    58
                ]
            },
            "lib/middleware/karma.js": {
                "insert": [
                    18
                ],
                "changes": [
                    62
                ],
                "deletes": [
                    200
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 2,
            "sizeInLines": 19,
            "linesRem": 4,
            "linesAdd": 12,
            "chunks": 9,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/middleware/karma.js b/lib/middleware/karma.js\nindex 2e603b382..0c965a521 100644\n--- a/lib/middleware/karma.js\n+++ b/lib/middleware/karma.js\n@@ -15,6 +15,8 @@ var path = require('path')\n var util = require('util')\n var url = require('url')\n \n+var log = require('../logger').create('middleware:karma')\n+\n var urlparse = function (urlStr) {\n   var urlObj = url.parse(urlStr, true)\n   urlObj.query = urlObj.query || {}\n@@ -59,10 +61,20 @@ var getXUACompatibleUrl = function (url) {\n   return value\n }\n \n-var createKarmaMiddleware = function (filesPromise, serveStaticFile, serveFile,\n-  /* config.basePath */ basePath, /* config.urlRoot */ urlRoot, /* config.client */ client,\n-  /* config.customContextFile */ customContextFile, /* config.customDebugFile */ customDebugFile) {\n+var createKarmaMiddleware = function (\n+  filesPromise,\n+  serveStaticFile,\n+  serveFile,\n+  injector,\n+  /* config.basePath */ basePath,\n+  /* config.urlRoot */ urlRoot\n+) {\n   return function (request, response, next) {\n+    // These config values should be up to date on every request\n+    var client = injector.get('config.client')\n+    var customContextFile = injector.get('config.customContextFile')\n+    var customDebugFile = injector.get('config.customDebugFile')\n+\n     var requestUrl = request.normalizedUrl.replace(/\\?.*/, '')\n \n     // redirect /__karma__ to /__karma__ (trailing slash)\n@@ -110,13 +122,17 @@ var createKarmaMiddleware = function (filesPromise, serveStaticFile, serveFile,\n       return filesPromise.then(function (files) {\n         var fileServer\n         var requestedFileUrl\n+        log.debug('custom files', customContextFile, customDebugFile)\n         if (isRequestingContextFile && customContextFile) {\n+          log.debug('Serving customContextFile %s', customContextFile)\n           fileServer = serveFile\n           requestedFileUrl = customContextFile\n         } else if (isRequestingDebugFile && customDebugFile) {\n+          log.debug('Serving customDebugFile %s', customDebugFile)\n           fileServer = serveFile\n           requestedFileUrl = customDebugFile\n         } else {\n+          log.debug('Serving static request %s', requestUrl)\n           fileServer = serveStaticFile\n           requestedFileUrl = requestUrl\n         }\n@@ -197,9 +213,5 @@ var createKarmaMiddleware = function (filesPromise, serveStaticFile, serveFile,\n   }\n }\n \n-createKarmaMiddleware.$inject = ['filesPromise', 'serveStaticFile', 'serveFile',\n-  'config.basePath', 'config.urlRoot', 'config.client', 'config.customContextFile',\n-  'config.customDebugFile']\n-\n // PUBLIC API\n exports.create = createKarmaMiddleware\ndiff --git a/lib/web-server.js b/lib/web-server.js\nindex dc200fda6..1405032c0 100644\n--- a/lib/web-server.js\n+++ b/lib/web-server.js\n@@ -55,6 +55,7 @@ var createWebServer = function (injector, emitter, fileList) {\n \n   var proxyMiddlewareInstance = injector.invoke(proxyMiddleware.create)\n \n+  log.debug('Instantiating middleware')\n   var handler = connect()\n     .use(injector.invoke(runnerMiddleware.create))\n     .use(injector.invoke(stopperMiddleware.create))\n",
        "bugId": 17,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MD-DNP"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/middleware/common.js": {
                "insert": [
                    7
                ],
                "changes": [
                    36,
                    39,
                    47,
                    65
                ]
            },
            "package.json": {
                "insert": [
                    317
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 2,
            "sizeInLines": 34,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 6,
            "linesMod": 32
        },
        "diff": "diff --git a/lib/middleware/common.js b/lib/middleware/common.js\nindex 4a3dea1fb..3f2c9a9b5 100644\n--- a/lib/middleware/common.js\n+++ b/lib/middleware/common.js\n@@ -4,6 +4,7 @@\n \n var mime = require('mime')\n var _ = require('lodash')\n+var parseRange = require('range-parser')\n \n var log = require('../logger').create('web-server')\n \n@@ -33,41 +34,35 @@ var createServeFile = function (fs, directory, config) {\n     var responseData\n \n     var convertForRangeRequest = function () {\n-      // If the header is invalid, ignore\n-      if (!rangeHeader.startsWith('bytes=')) {\n+      var range = parseRange(responseData.length, rangeHeader)\n+      if (range === -2) {\n+        // malformed header string\n         return 200\n-      }\n-\n-      responseData = new Buffer(responseData)\n-\n-      var ranges = rangeHeader.substr(6)\n-      if (ranges.indexOf(',') >= 0) {\n-        // Multiple ranges are not supported.\n+      } else if (range === -1) {\n+        // unsatisfiable range\n         responseData = new Buffer(0)\n-        return 416  // Requested range not satisfiable\n-      }\n-      var parts = /^([0-9]*)-([0-9]*)$/.exec(ranges)\n-      if (!parts || (!parts[1] && !parts[2])) {\n-        return 200\n-      }\n-      var start, end\n-      if (parts[1]) {\n-        start = Number(parts[1])\n-        end = parts[2] ? Number(parts[2]) : responseData.length\n-      } else {\n-        end = responseData.length\n-        start = responseData.length - Number(parts[2])\n-      }\n-      if (end <= start) {\n-        responseData = new Buffer(0)\n-        return 416  // Requested range not satisfiable\n+        return 416\n+      } else if (range.type === 'bytes') {\n+        responseData = new Buffer(responseData)\n+        if (range.length === 1) {\n+          var start = range[0].start\n+          var end = range[0].end\n+          response.setHeader(\n+            'Content-Range',\n+            'bytes ' + start + '-' + end + '/' + responseData.length\n+          )\n+          response.setHeader('Accept-Ranges', 'bytes')\n+          response.setHeader('Content-Length', end - start + 1)\n+          responseData = responseData.slice(start, end + 1)\n+          return 206\n+        } else {\n+          // Multiple ranges are not supported. Maybe future?\n+          responseData = new Buffer(0)\n+          return 416\n+        }\n       }\n-\n-      response.setHeader(\n-          'Content-Range',\n-          'bytes ' + start + '-' + end + '/' + responseData.length)\n-      responseData = responseData.slice(start, end + 1)\n-      return 206\n+      // All other states, ignore\n+      return 200\n     }\n \n     if (directory) {\ndiff --git a/package.json b/package.json\nindex 8873a1f82..208ce32bc 100644\n--- a/package.json\n+++ b/package.json\n@@ -314,6 +314,7 @@\n     \"minimatch\": \"^3.0.0\",\n     \"optimist\": \"^0.6.1\",\n     \"qjobs\": \"^1.1.4\",\n+    \"range-parser\": \"^1.2.0\",\n     \"rimraf\": \"^2.3.3\",\n     \"socket.io\": \"1.4.7\",\n     \"source-map\": \"^0.5.3\",\n",
        "bugId": 16,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC",
            "IF-ABR"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/web-server.js": {
                "changes": [
                    32
                ]
            },
            "lib/middleware/common.js": {
                "changes": [
                    12
                ]
            },
            "lib/file-list.js": {
                "changes": [
                    224,
                    231
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 3,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 4,
            "chunks": 5,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/file-list.js b/lib/file-list.js\nindex 3878df9eb..db8316773 100644\n--- a/lib/file-list.js\n+++ b/lib/file-list.js\n@@ -221,14 +221,14 @@ Object.defineProperty(List.prototype, 'files', {\n       return pattern.served\n     })\n     .map(function (p) {\n-      return from(self.buckets.get(p.pattern)).sort(byPath)\n+      return from(self.buckets.get(p.pattern) || []).sort(byPath)\n     })\n \n     var included = this._patterns.filter(function (pattern) {\n       return pattern.included\n     })\n     .map(function (p) {\n-      return from(self.buckets.get(p.pattern)).sort(byPath)\n+      return from(self.buckets.get(p.pattern) || []).sort(byPath)\n     })\n \n     var uniqFlat = function (list) {\ndiff --git a/lib/middleware/common.js b/lib/middleware/common.js\nindex 84da281e0..b098790f2 100644\n--- a/lib/middleware/common.js\n+++ b/lib/middleware/common.js\n@@ -9,7 +9,7 @@ var PromiseContainer = function () {\n   var promise\n \n   this.then = function (success, error) {\n-    return promise.then(success, error)\n+    return promise.then(success).catch(error)\n   }\n \n   this.set = function (newPromise) {\ndiff --git a/lib/web-server.js b/lib/web-server.js\nindex f607ba230..139b5e3ea 100644\n--- a/lib/web-server.js\n+++ b/lib/web-server.js\n@@ -29,12 +29,16 @@ var createCustomHandler = function (customFileHandlers, /* config.basePath */ ba\n \n createCustomHandler.$inject = ['customFileHandlers', 'config.basePath']\n \n-var createWebServer = function (injector, emitter) {\n+var createWebServer = function (injector, emitter, fileList) {\n   var config = injector.get('config')\n   var serveStaticFile = common.createServeFile(fs, path.normalize(__dirname + '/../static'))\n   var serveFile = common.createServeFile(fs)\n   var filesPromise = new common.PromiseContainer()\n \n+  // Set an empty list of files to avoid race issues with\n+  // file_list_modified not having been emitted yet\n+  filesPromise.set(Promise.resolve(fileList.files))\n+\n   emitter.on('file_list_modified', function (files) {\n     filesPromise.set(Promise.resolve(files))\n   })\n",
        "bugId": 15,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "MC-DNP",
            "SQ-AROB"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/server.js": {
                "insert": [
                    187
                ],
                "changes": [
                    395
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/server.js b/lib/server.js\nindex a5dbe74e9..0c91bdbf3 100644\n--- a/lib/server.js\n+++ b/lib/server.js\n@@ -184,6 +184,7 @@ Server.prototype._start = function (config, launcher, preprocess, fileList,\n       var noLoadErrors = self.loadErrors.length\n       if (noLoadErrors > 0) {\n         self.log.error('Found %d load error%s', noLoadErrors, noLoadErrors === 1 ? '' : 's')\n+        process.exitCode = 1\n         process.kill(process.pid, 'SIGINT')\n       }\n     })\n@@ -392,7 +393,9 @@ Server.prototype._start = function (config, launcher, preprocess, fileList,\n     })\n   }\n \n-  processWrapper.on('SIGINT', disconnectBrowsers)\n+  processWrapper.on('SIGINT', function () {\n+    disconnectBrowsers(process.exitCode)\n+  })\n   processWrapper.on('SIGTERM', disconnectBrowsers)\n \n   // Handle all unhandled exceptions, so we don't just exit but\n",
        "bugId": 14,
        "tax": "IncompFI-EH",
        "pan_cat": [],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/launchers/Base.js": {
                "insert": [
                    29
                ],
                "changes": [
                    107
                ],
                "deletes": [
                    36,
                    107
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 30,
            "linesRem": 4,
            "linesAdd": 26,
            "chunks": 4,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/launchers/Base.js b/lib/launchers/Base.js\nindex d91fef55d..dad008631 100644\n--- a/lib/launchers/Base.js\n+++ b/lib/launchers/Base.js\n@@ -26,6 +26,7 @@ var BaseBrowser = function(id, emitter, captureTimeout, retryLimit) {\n \n   this.start = function(url) {\n     capturingUrl = url;\n+    self.state = BEING_CAPTURED;\n \n     try {\n       log.debug('Creating temp dir at ' + self._tempDir);\n@@ -33,7 +34,6 @@ var BaseBrowser = function(id, emitter, captureTimeout, retryLimit) {\n     } catch (e) {}\n \n     self._start(capturingUrl + '?id=' + self.id);\n-    self.state = BEING_CAPTURED;\n \n     if (captureTimeout) {\n       setTimeout(self._onTimeout, captureTimeout);\n@@ -104,13 +104,35 @@ var BaseBrowser = function(id, emitter, captureTimeout, retryLimit) {\n     self._process = spawn(cmd, args);\n \n     var errorOutput = '';\n-    self._process.stderr.on('data', function(data) {\n-      errorOutput += data.toString();\n-    });\n \n     self._process.on('close', function(code) {\n       self._onProcessExit(code, errorOutput);\n     });\n+\n+    self._process.on('error', function(err) {\n+      if (err.code === 'ENOENT') {\n+        retryLimit = 0;\n+        errorOutput = 'Can not find the binary ' + cmd + '\\n\\t' +\n+                      'Please set env variable ' + self.ENV_CMD;\n+      } else {\n+        errorOutput += err.toString();\n+      }\n+    });\n+\n+    // Node 0.8 does not emit the error\n+    if (process.versions.node.indexOf('0.8') === 0) {\n+      self._process.stderr.on('data', function(data) {\n+        var msg = data.toString();\n+\n+        if (msg.indexOf('No such file or directory') !== -1) {\n+          retryLimit = 0;\n+          errorOutput = 'Can not find the binary ' + cmd + '\\n\\t' +\n+                        'Please set env variable ' + self.ENV_CMD;\n+        } else {\n+          errorOutput += msg;\n+        }\n+      });\n+    }\n   };\n \n \n",
        "bugId": 13,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "IF-APC",
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/middleware/karma.js": {
                "changes": [
                    86,
                    101
                ]
            },
            "lib/preprocessor.js": {
                "changes": [
                    56,
                    62
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 2,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 8
        },
        "diff": "diff --git a/lib/middleware/karma.js b/lib/middleware/karma.js\nindex c68261e4e..6836af577 100644\n--- a/lib/middleware/karma.js\n+++ b/lib/middleware/karma.js\n@@ -83,7 +83,7 @@ var createKarmaMiddleware = function(filesPromise, serveStaticFile,\n               filePath = filePathToUrlPath(filePath, basePath);\n \n               if (requestUrl === '/context.html') {\n-                filePath += '?' + file.mtime.getTime();\n+                filePath += '?' + file.sha;\n               }\n             }\n \n@@ -98,7 +98,7 @@ var createKarmaMiddleware = function(filesPromise, serveStaticFile,\n           var mappings = files.served.map(function(file) {\n             var filePath = filePathToUrlPath(file.path, basePath);\n \n-            return util.format('  \\'%s\\': \\'%d\\'', filePath, file.mtime.getTime());\n+            return util.format('  \\'%s\\': \\'%s\\'', filePath, file.sha);\n           });\n \n           mappings = 'window.__karma__.files = {\\n' + mappings.join(',\\n') + '\\n};\\n';\ndiff --git a/lib/preprocessor.js b/lib/preprocessor.js\nindex 3743ad170..76caaa02f 100644\n--- a/lib/preprocessor.js\n+++ b/lib/preprocessor.js\n@@ -53,13 +53,15 @@ var createPreprocessor = function(config, basePath, injector) {\n       }\n     }\n \n-    if (preprocessors.length) {\n-      return fs.readFile(file.originalPath, function(err, buffer) {\n-        nextPreprocessor(buffer.toString());\n-      });\n-    }\n+    // compute SHA of the content\n+    preprocessors.push(function(content, file, done) {\n+      file.sha = sha1(content);\n+      done(content);\n+    });\n \n-    return process.nextTick(done);\n+    return fs.readFile(file.originalPath, function(err, buffer) {\n+      nextPreprocessor(buffer.toString());\n+    });\n   };\n };\n createPreprocessor.$inject = ['config.preprocessors', 'config.basePath', 'injector'];\n",
        "bugId": 12,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/preprocessor.js": {
                "insert": [
                    55
                ],
                "deletes": [
                    96
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 1,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/preprocessor.js b/lib/preprocessor.js\nindex 4e147187c..3d7db2a5d 100644\n--- a/lib/preprocessor.js\n+++ b/lib/preprocessor.js\n@@ -52,6 +52,7 @@ var createPreprocessor = function(config, basePath, injector) {\n       if (!preprocessors.length) {\n         file.contentPath = null;\n         file.content = content;\n+        file.sha = sha1(content);\n         return done();\n       }\n \n@@ -93,7 +94,6 @@ var createPreprocessor = function(config, basePath, injector) {\n       if (err) {\n         throw err;\n       }\n-      file.sha = sha1(buffer);\n       nextPreprocessor(null, thisFileIsBinary ? buffer : buffer.toString());\n     });\n   };\n",
        "bugId": 11,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "SQ-AROB"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/watcher.js": {
                "changes": [
                    20,
                    45,
                    61,
                    65
                ]
            },
            "package.json": {
                "changes": [
                    93
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 2,
            "sizeInLines": 31,
            "linesRem": 0,
            "linesAdd": 11,
            "chunks": 7,
            "linesMod": 20
        },
        "diff": "diff --git a/lib/watcher.js b/lib/watcher.js\nindex a6055bb70..232ffa81d 100644\n--- a/lib/watcher.js\n+++ b/lib/watcher.js\n@@ -17,13 +17,7 @@ var watchPatterns = function(patterns, watcher) {\n   var uniqueMap = {};\n   var path;\n \n-  patterns.forEach(function(patternObject) {\n-    var pattern = patternObject.pattern;\n-\n-    if (!patternObject.watched) {\n-      return;\n-    }\n-\n+  patterns.forEach(function(pattern) {\n     path = baseDirFromPattern(pattern);\n     if (!uniqueMap[path]) {\n       uniqueMap[path] = true;\n@@ -42,27 +36,50 @@ var watchPatterns = function(patterns, watcher) {\n   });\n };\n \n-// Function to test if an item is on the exclude list\n-// and therefore should not be watched by chokidar\n-// TODO(vojta): ignore non-matched files as well\n-var createIgnore = function(excludes) {\n-  return function(item) {\n-    var matchExclude = function(pattern) {\n-      log.debug('Excluding %s', pattern);\n-      return mm(item, pattern, {dot: true});\n-    };\n-    return excludes.some(matchExclude);\n+// Function to test if a path should be ignored by chokidar.\n+var createIgnore = function(patterns, excludes) {\n+  return function(path, stat) {\n+    if (!stat || stat.isDirectory()) {\n+      return false;\n+    }\n+\n+    // Check if the path matches any of the watched patterns.\n+    if (!patterns.some(function(pattern) {\n+      return mm(path, pattern, {dot: true});\n+    })) {\n+      return true;\n+    }\n+\n+    // Check if the path matches any of the exclude patterns.\n+    if (excludes.some(function(pattern) {\n+      return mm(path, pattern, {dot: true});\n+    })) {\n+      return true;\n+    }\n+\n+    return false;\n   };\n };\n \n+var onlyWatchedTrue = function(pattern) {\n+  return pattern.watched;\n+};\n+\n+var getWatchedPatterns = function(patternObjects) {\n+  return patternObjects.filter(onlyWatchedTrue).map(function(patternObject) {\n+    return patternObject.pattern;\n+  });\n+};\n+\n exports.watch = function(patterns, excludes, fileList) {\n+  var watchedPatterns = getWatchedPatterns(patterns);\n   var options = {\n     ignorePermissionErrors: true,\n-    ignored: createIgnore(excludes)\n+    ignored: createIgnore(watchedPatterns, excludes)\n   };\n   var chokidarWatcher = new chokidar.FSWatcher(options);\n \n-  watchPatterns(patterns, chokidarWatcher);\n+  watchPatterns(watchedPatterns, chokidarWatcher);\n \n   var bind = function(fn) {\n     return function(path) {\ndiff --git a/package.json b/package.json\nindex 48f127a95..0c2c5a10b 100644\n--- a/package.json\n+++ b/package.json\n@@ -90,7 +90,7 @@\n   \"dependencies\": {\n     \"di\": \"~0.0.1\",\n     \"socket.io\": \"~0.9.13\",\n-    \"chokidar\": \"~0.6\",\n+    \"chokidar\": \"~0.7.0\",\n     \"glob\": \"~3.1.21\",\n     \"minimatch\": \"~0.2\",\n     \"http-proxy\": \"~0.10\",\n",
        "bugId": 10,
        "tax": "IncorFI-P",
        "pan_cat": [
            "MC-DAP",
            "IF-APC",
            "IF-APC",
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/watcher.js": {
                "changes": [
                    11
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/watcher.js b/lib/watcher.js\nindex ce76e3758..78ae30adc 100644\n--- a/lib/watcher.js\n+++ b/lib/watcher.js\n@@ -8,7 +8,9 @@ var DIR_SEP = require('path').sep;\n \n // Get parent folder, that be watched (does not contain any special globbing character)\n var baseDirFromPattern = function(pattern) {\n-  return pattern.replace(/\\/[^\\/]*[\\*\\(].*$/, '') || '/';\n+  return pattern.replace(/\\/[^\\/]*\\*.*$/, '')           // remove parts with *\n+                .replace(/\\/[^\\/]*[\\!\\+]\\(.*$/, '')     // remove parts with !(...) and +(...)\n+                .replace(/\\/[^\\/]*\\)\\?.*$/, '') || '/'; // remove parts with (...)?\n };\n \n var watchPatterns = function(patterns, watcher) {\n",
        "bugId": 9,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/reporter.js": {
                "insert": [
                    12,
                    30
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/reporter.js b/lib/reporter.js\nindex 546571db6..5caedae04 100644\n--- a/lib/reporter.js\n+++ b/lib/reporter.js\n@@ -9,6 +9,7 @@ var baseReporterDecoratorFactory = require('./reporters/base').decoratorFactory\n \n var createErrorFormatter = function (config, emitter, SourceMapConsumer) {\n   var basePath = config.basePath\n+  var urlRoot = config.urlRoot || ''\n   var lastServedFiles = []\n \n   emitter.on('file_list_modified', function (files) {\n@@ -26,6 +27,7 @@ var createErrorFormatter = function (config, emitter, SourceMapConsumer) {\n \n   var URL_REGEXP = new RegExp('(?:https?:\\\\/\\\\/' +\n     config.hostname + '(?:\\\\:' + config.port + ')?' + ')?\\\\/?' +\n+    urlRoot + '\\\\/?' +\n     '(base/|absolute)' + // prefix, including slash for base/ to create relative paths.\n     '((?:[A-z]\\\\:)?[^\\\\?\\\\s\\\\:]*)' + // path\n     '(\\\\?\\\\w*)?' + // sha\n",
        "bugId": 8,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 5
    },
    {
        "changedFiles": {
            "lib/runner.js": {
                "changes": [
                    13,
                    25,
                    27,
                    30,
                    53
                ],
                "deletes": [
                    20
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 6,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/runner.js b/lib/runner.js\nindex 5f3c264e7..d09f537e6 100644\n--- a/lib/runner.js\n+++ b/lib/runner.js\n@@ -10,24 +10,23 @@ var parseExitCode = function (buffer, defaultCode, failOnEmptyTestSuite) {\n   var tailPos = buffer.length - Buffer.byteLength(constant.EXIT_CODE) - 2\n \n   if (tailPos < 0) {\n-    return defaultCode\n+    return {exitCode: defaultCode, buffer: buffer}\n   }\n \n   // tail buffer which might contain the message\n   var tail = buffer.slice(tailPos)\n   var tailStr = tail.toString()\n   if (tailStr.substr(0, tailStr.length - 2) === constant.EXIT_CODE) {\n-    tail.fill('\\x00')\n     var emptyInt = parseInt(tailStr.substr(-2, 1), 10)\n     var exitCode = parseInt(tailStr.substr(-1), 10)\n     if (failOnEmptyTestSuite === false && emptyInt === 0) {\n       log.warn('Test suite was empty.')\n-      return 0\n+      exitCode = 0\n     }\n-    return exitCode\n+    return {exitCode: exitCode, buffer: buffer.slice(0, tailPos)}\n   }\n \n-  return defaultCode\n+  return {exitCode: defaultCode, buffer: buffer}\n }\n \n // TODO(vojta): read config file (port, host, urlRoot)\n@@ -50,8 +49,9 @@ exports.run = function (config, done) {\n \n   var request = http.request(options, function (response) {\n     response.on('data', function (buffer) {\n-      exitCode = parseExitCode(buffer, exitCode, config.failOnEmptyTestSuite)\n-      process.stdout.write(buffer)\n+      var parsedResult = parseExitCode(buffer, exitCode, config.failOnEmptyTestSuite)\n+      exitCode = parsedResult.exitCode\n+      process.stdout.write(parsedResult.buffer)\n     })\n \n     response.on('end', function () {\n",
        "bugId": 7,
        "tax": "IncorFI-IncorO",
        "pan_cat": [
            "Return",
            "Return",
            "Return"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/cli.js": {
                "insert": [
                    21
                ],
                "changes": [
                    22
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/cli.js b/lib/cli.js\nindex 4f3982cd1..a28b55907 100644\n--- a/lib/cli.js\n+++ b/lib/cli.js\n@@ -18,8 +18,13 @@ var processArgs = function(argv, options, fs, path) {\n \n   // TODO(vojta): warn/throw when unknown argument (probably mispelled)\n   Object.getOwnPropertyNames(argv).forEach(function(name) {\n+    var argumentValue = argv[name];\n     if (name !== '_' && name !== '$0') {\n-      options[helper.dashToCamel(name)] = argv[name];\n+      if (Array.isArray(argumentValue)) {\n+        // If the same argument is defined multiple times, override.\n+        argumentValue = argumentValue.pop();\n+      }\n+      options[helper.dashToCamel(name)] = argumentValue;\n     }\n   });\n \n",
        "bugId": 6,
        "tax": "IncompFI-IncompCP",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/reporters/progress.js": {
                "insert": [
                    7
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/reporters/progress.js b/lib/reporters/progress.js\nindex e437250ae..eb2f4f27d 100644\n--- a/lib/reporters/progress.js\n+++ b/lib/reporters/progress.js\n@@ -4,6 +4,7 @@ var ProgressReporter = function (formatError, reportSlow, useColors, browserCons\n   BaseReporter.call(this, formatError, reportSlow, useColors, browserConsoleLogOptions)\n \n   this.EXCLUSIVELY_USE_COLORS = false\n+  this._browsers = []\n \n   this.writeCommonMsg = function (msg) {\n     this.write(this._remove() + msg + this._render())\n",
        "bugId": 5,
        "tax": "G-VI-MVI",
        "pan_cat": [
            "Undefined"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/reporter.js": {
                "changes": [
                    52
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/reporter.js b/lib/reporter.js\nindex fca44ec85..dab5574cb 100644\n--- a/lib/reporter.js\n+++ b/lib/reporter.js\n@@ -49,7 +49,7 @@ var createErrorFormatter = function (basePath, emitter, SourceMapConsumer) {\n \n       var file = findFile(path)\n \n-      if (file && file.sourceMap) {\n+      if (file && file.sourceMap && line) {\n         line = parseInt(line || '0', 10)\n \n         column = parseInt(column, 10)\n",
        "bugId": 4,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/reporter.js": {
                "changes": [
                    99
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/reporter.js b/lib/reporter.js\nindex 72754c426..75d7bb5a6 100644\n--- a/lib/reporter.js\n+++ b/lib/reporter.js\n@@ -96,7 +96,7 @@ var createErrorFormatter = function (config, emitter, SourceMapConsumer) {\n \n     // allow the user to format the error\n     if (config.formatError) {\n-      msg = config.formatError(msg)\n+      return config.formatError(msg)\n     }\n \n     return msg + '\\n'\n",
        "bugId": 3,
        "tax": "G-RS-MRS",
        "pan_cat": [],
        "failingTests": 5
    },
    {
        "changedFiles": {
            "lib/middleware/proxy.js": {
                "changes": [
                    46
                ],
                "deletes": [
                    43
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 2,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/middleware/proxy.js b/lib/middleware/proxy.js\nindex d84c7e4af..1a4f31e93 100644\n--- a/lib/middleware/proxy.js\n+++ b/lib/middleware/proxy.js\n@@ -40,10 +40,15 @@ var parseProxyConfig = function (proxies, config) {\n \n     var hostname = proxyDetails.hostname || config.hostname\n     var protocol = proxyDetails.protocol || config.protocol\n-    var port = proxyDetails.port || config.port ||\n-      (proxyDetails.protocol === 'https:' ? '443' : '80')\n     var https = proxyDetails.protocol === 'https:'\n-\n+    var port\n+    if (proxyDetails.port) {\n+      port = proxyDetails.port\n+    } else if (proxyDetails.protocol) {\n+      port = proxyDetails.protocol === 'https:' ? '443' : '80'\n+    } else {\n+      port = config.port\n+    }\n     var changeOrigin = 'changeOrigin' in proxyConfiguration ? proxyConfiguration.changeOrigin : false\n     var proxy = httpProxy.createProxyServer({\n       target: {\n",
        "bugId": 2,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/reporter.js": {
                "changes": [
                    24
                ]
            }
        },
        "project": "Karma",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/reporter.js b/lib/reporter.js\nindex ebf6dc207..9d350f43f 100644\n--- a/lib/reporter.js\n+++ b/lib/reporter.js\n@@ -21,7 +21,7 @@ var createErrorFormatter = function (basePath, emitter, SourceMapConsumer) {\n     return null\n   }\n \n-  var URL_REGEXP = new RegExp('http:\\\\/\\\\/[^\\\\/]*\\\\/' +\n+  var URL_REGEXP = new RegExp('(?:http:\\\\/\\\\/[^\\\\/]*)?\\\\/?' +\n     '(base|absolute)' + // prefix\n     '((?:[A-z]\\\\:)?[^\\\\?\\\\s\\\\:]*)' + // path\n     '(\\\\?\\\\w*)?' + // sha\n",
        "bugId": 1,
        "tax": "IncorFI-IncorHRE",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/hexo/post.js": {
                "changes": [
                    50,
                    207
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/hexo/post.js b/lib/hexo/post.js\nindex e1f0fffb1..db1ccb549 100644\n--- a/lib/hexo/post.js\n+++ b/lib/hexo/post.js\n@@ -47,7 +47,7 @@ Post.prototype.create = function(data, replace, callback){\n   var ctx = this.context;\n   var config = ctx.config;\n \n-  data.slug = slugize(data.slug || data.title, {transform: config.filename_case});\n+  data.slug = slugize((data.slug || data.title).toString(), {transform: config.filename_case});\n   data.layout = (data.layout || config.default_layout).toLowerCase();\n   data.date = data.date ? moment(data.date) : moment();\n \n@@ -204,7 +204,7 @@ Post.prototype.publish = function(data, replace, callback){\n   var ctx = this.context;\n   var config = ctx.config;\n   var draftDir = pathFn.join(ctx.source_dir, '_drafts');\n-  var slug = data.slug = slugize(data.slug, {transform: config.filename_case});\n+  var slug = data.slug = slugize(data.slug.toString(), {transform: config.filename_case});\n   var regex = new RegExp('^' + escapeRegExp(slug) + '(?:[^\\\\/\\\\\\\\]+)');\n   var self = this;\n   var src = '';\n",
        "bugId": 12,
        "tax": "G-DP",
        "pan_cat": [
            "AS-CE",
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/hexo/index.js": {
                "insert": [
                    26,
                    36
                ],
                "changes": [
                    56
                ],
                "deletes": [
                    56
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 10,
            "linesRem": 4,
            "linesAdd": 6,
            "chunks": 4,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/hexo/index.js b/lib/hexo/index.js\nindex 4d1c2d094..2424307a8 100644\n--- a/lib/hexo/index.js\n+++ b/lib/hexo/index.js\n@@ -23,6 +23,7 @@ var Theme = require('../theme');\n var Locals = require('./locals');\n var defaultConfig = require('./default_config');\n var loadDatabase = require('./load_database');\n+var MultiConfigPath = require('./multi_config_path');\n \n var libDir = pathFn.dirname(__dirname);\n var sep = pathFn.sep;\n@@ -32,6 +33,8 @@ function Hexo(base, args) {\n   base = base || process.cwd();\n   args = args || {};\n \n+  var mcp = new MultiConfigPath(this);\n+\n   EventEmitter.call(this);\n \n   this.base_dir = base + sep;\n@@ -53,10 +56,6 @@ function Hexo(base, args) {\n     init: false\n   };\n \n-  var multiConfigPath = require('./multi_config_path')(this);\n-  this.config_path = args.config ? multiConfigPath(base, args.config)\n-                                 : pathFn.join(base, '_config.yml');\n-\n   this.extend = {\n     console: new extend.Console(),\n     deployer: new extend.Deployer(),\n@@ -90,6 +89,9 @@ function Hexo(base, args) {\n     path: pathFn.join(base, 'db.json')\n   });\n \n+  this.config_path = args.config ? mcp(base, args.config)\n+                                 : pathFn.join(base, '_config.yml');\n+\n   registerModels(this);\n \n   this.source = new Source(this);\n",
        "bugId": 11,
        "tax": "IncorFI-CP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/hexo/index.js": {
                "changes": [
                    307,
                    309,
                    316
                ],
                "deletes": [
                    23,
                    304
                ]
            },
            "lib/plugins/console/generate.js": {
                "changes": [
                    24
                ],
                "deletes": [
                    18
                ]
            },
            "lib/box/index.js": {
                "changes": [
                    320
                ],
                "deletes": [
                    7,
                    294
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 3,
            "sizeInLines": 16,
            "linesRem": 5,
            "linesAdd": 1,
            "chunks": 11,
            "linesMod": 10
        },
        "diff": "diff --git a/lib/box/index.js b/lib/box/index.js\nindex 9517850ec..5abb80855 100644\n--- a/lib/box/index.js\n+++ b/lib/box/index.js\n@@ -4,7 +4,6 @@ var _ = require('lodash');\n var File = require('./file');\n var util = require('hexo-util');\n var fs = require('hexo-fs');\n-var prettyHrtime = require('pretty-hrtime');\n var crypto = require('crypto');\n var chalk = require('chalk');\n \n@@ -291,7 +290,6 @@ Box.prototype._dispatch = function(item){\n   var self = this;\n   var ctx = this.context;\n   var base = this.base;\n-  var start = process.hrtime();\n \n   // Skip processing files\n   if (this.processingFiles[path]) return;\n@@ -317,8 +315,7 @@ Box.prototype._dispatch = function(item){\n     return Promise.method(processor.process).call(ctx, file).thenReturn(count + 1);\n   }, 0).then(function(count){\n     if (count){\n-      var interval = prettyHrtime(process.hrtime(start));\n-      ctx.log.debug('Processed in %s: %s', chalk.cyan(interval), chalk.magenta(path));\n+      ctx.log.debug('Processed: %s', chalk.magenta(path));\n     }\n   }, function(err){\n     ctx.log.error({err: err}, 'Process failed: %s', chalk.magenta(path));\ndiff --git a/lib/hexo/index.js b/lib/hexo/index.js\nindex 4dcfc58e7..079ebff3d 100644\n--- a/lib/hexo/index.js\n+++ b/lib/hexo/index.js\n@@ -20,7 +20,6 @@ var Router = require('./router');\n var Theme = require('../theme');\n var defaultConfig = require('./default_config');\n var loadDatabase = require('./load_database');\n-var prettyHrtime = require('pretty-hrtime');\n \n var libDir = pathFn.dirname(__dirname);\n var sep = pathFn.sep;\n@@ -301,20 +300,17 @@ Hexo.prototype._generate = function(options){\n     // Run generators\n     return Promise.reduce(keys, function(result, key){\n       var generator = generators[key];\n-      var start = process.hrtime();\n \n       return generator.call(self, siteLocals).then(function(data){\n-        var interval = prettyHrtime(process.hrtime(start));\n+        log.debug('Generator: %s', chalk.magenta(key));\n \n-        log.debug('Generator in %s: %s', chalk.cyan(interval), chalk.magenta(key));\n-\n-        return data ? result.concat(data) : data;\n+        return data ? result.concat(data) : result;\n       });\n     }, []);\n   })\n+  // Add routes\n   .each(function(item){\n-    // Add routes\n-    if (item.path == null) return;\n+    if (typeof item !== 'object' || item.path == null) return;\n \n     var path = route.format(item.path);\n     var data = item.data;\ndiff --git a/lib/plugins/console/generate.js b/lib/plugins/console/generate.js\nindex 826ff0750..de27a2b86 100644\n--- a/lib/plugins/console/generate.js\n+++ b/lib/plugins/console/generate.js\n@@ -15,14 +15,12 @@ function generateConsole(args){\n   function generateFile(path){\n     var data = route.get(path);\n     var dest = pathFn.join(publicDir, path);\n-    var start = process.hrtime();\n \n     // TODO: Retry when EMFILE error occurred\n     return fs.ensureWriteStream(dest).then(function(stream){\n       return pipeStream(data, stream);\n     }).then(function(){\n-      var interval = prettyHrtime(process.hrtime(start));\n-      log.info('Generated in %s: %s', chalk.cyan(interval), chalk.magenta(path));\n+      log.info('Generated: %s', chalk.magenta(path));\n     });\n   }\n \n",
        "bugId": 10,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/plugins/helper/paginator.js": {
                "changes": [
                    7
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/plugins/helper/paginator.js b/lib/plugins/helper/paginator.js\nindex 946b6f8dc..b73e475ea 100644\n--- a/lib/plugins/helper/paginator.js\n+++ b/lib/plugins/helper/paginator.js\n@@ -4,8 +4,8 @@ function paginatorHelper(options){\n   /* jshint validthis: true */\n   options = options || {};\n \n-  var current = options.current || this.current || 0;\n-  var total = options.total || this.total || 1;\n+  var current = options.current || this.page.current || 0;\n+  var total = options.total || this.page.total || 1;\n   var endSize = options.hasOwnProperty('end_size') ? +options.end_size : 1;\n   var midSize = options.hasOwnProperty('mid_size') ? +options.mid_size : 2;\n   var space = options.hasOwnProperty('space') ? options.space : '&hellip;';\n@@ -19,6 +19,8 @@ function paginatorHelper(options){\n   var result = '';\n   var i;\n \n+  if (!current) return '';\n+\n   var currentPage = '<span class=\"page-number current\">' +\n     (transform ? transform(current) : current) +\n     '</span>';\n",
        "bugId": 9,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DM",
            "MC-DM",
            "IF-APCJ"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/plugins/helper/open_graph.js": {
                "changes": [
                    88
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/plugins/helper/open_graph.js b/lib/plugins/helper/open_graph.js\nindex 718b31ee1..8180a956d 100644\n--- a/lib/plugins/helper/open_graph.js\n+++ b/lib/plugins/helper/open_graph.js\n@@ -85,8 +85,9 @@ function openGraphHelper(options) {\n \n   images = images.map(function(path) {\n     if (!urlFn.parse(path).host) {\n-      if (path[0] !== '/') path = '/' + path;\n-      return config.url + path;\n+      // resolve `path`'s absolute path relative to current page's url\n+      // `path` can be both absolute (starts with `/`) or relative.\n+      return urlFn.resolve(url || config.url, path);\n     }\n \n     return path;\n",
        "bugId": 8,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "IF-RMV"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/plugins/helper/toc.js": {
                "insert": [
                    4
                ],
                "changes": [
                    28
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/plugins/helper/toc.js b/lib/plugins/helper/toc.js\nindex ef7d058c7..cb45495ae 100644\n--- a/lib/plugins/helper/toc.js\n+++ b/lib/plugins/helper/toc.js\n@@ -1,6 +1,7 @@\n 'use strict';\n \n var cheerio;\n+const _ = require('lodash');\n \n function tocHelper(str, options) {\n   options = options || {};\n@@ -25,7 +26,7 @@ function tocHelper(str, options) {\n   headings.each(function() {\n     var level = +this.name[1];\n     var id = $(this).attr('id');\n-    var text = $(this).html();\n+    var text = _.escape($(this).text());\n \n     lastNumber[level - 1]++;\n \n",
        "bugId": 7,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MC-DM"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/models/post.js": {
                "insert": [
                    14,
                    83,
                    134
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 12,
            "linesRem": 0,
            "linesAdd": 12,
            "chunks": 3,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/models/post.js b/lib/models/post.js\nindex 558faeab1..27b943834 100644\n--- a/lib/models/post.js\n+++ b/lib/models/post.js\n@@ -11,6 +11,14 @@ function pickID(data) {\n   return data._id;\n }\n \n+function removeEmptyTag(tags) {\n+  return tags.filter(function(tag) {\n+    return tag != null && tag !== '';\n+  }).map(function(tag) {\n+    return tag + '';\n+  });\n+}\n+\n module.exports = function(ctx) {\n   var Post = new Schema({\n     id: String,\n@@ -72,6 +80,8 @@ module.exports = function(ctx) {\n   });\n \n   Post.method('setTags', function(tags) {\n+    tags = removeEmptyTag(tags);\n+\n     var PostTag = ctx.model('PostTag');\n     var Tag = ctx.model('Tag');\n     var id = this._id;\n@@ -121,6 +131,8 @@ module.exports = function(ctx) {\n   });\n \n   Post.method('setCategories', function(cats) {\n+    cats = removeEmptyTag(cats);\n+\n     var PostCategory = ctx.model('PostCategory');\n     var Category = ctx.model('Category');\n     var id = this._id;\n",
        "bugId": 6,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MC-ADD"
        ],
        "failingTests": 8
    },
    {
        "changedFiles": {
            "lib/plugins/helper/is.js": {
                "changes": [
                    4,
                    9,
                    14
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 4,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/plugins/helper/is.js b/lib/plugins/helper/is.js\nindex 235904c0b..2124189e1 100644\n--- a/lib/plugins/helper/is.js\n+++ b/lib/plugins/helper/is.js\n@@ -1,17 +1,29 @@\n 'use strict';\n \n function isCurrentHelper(path, strict) {\n-  path = path || '';\n+  path = path || '/';\n+  var currentPath = this.path.replace(/^[^\\/].*/, function(_) {\n+    return '/' + _;\n+  });\n \n   if (strict) {\n     if (path[path.length - 1] === '/') path += 'index.html';\n+    path = path.replace(/^[^\\/].*/, function(_) {\n+      return '/' + _;\n+    });\n \n-    return this.path === path;\n+    return currentPath === path;\n   }\n \n   path = path.replace(/\\/index\\.html$/, '/');\n \n-  return this.path.substring(0, path.length) === path;\n+  if (path === '/') return currentPath === '/index.html';\n+\n+  path = path.replace(/^[^\\/].*/, function(_) {\n+    return '/' + _;\n+  });\n+\n+  return currentPath.substring(0, path.length) === path;\n }\n \n function isHomeHelper() {\n",
        "bugId": 5,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "AS-CE",
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/models/post_asset.js": {
                "changes": [
                    21
                ],
                "deletes": [
                    5
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/models/post_asset.js b/lib/models/post_asset.js\nindex 075ed60ae..dd87dcd46 100644\n--- a/lib/models/post_asset.js\n+++ b/lib/models/post_asset.js\n@@ -2,7 +2,6 @@\n \n var Schema = require('warehouse').Schema;\n var pathFn = require('path');\n-var url = require('url');\n \n module.exports = function(ctx) {\n   var PostAsset = new Schema({\n@@ -18,7 +17,9 @@ module.exports = function(ctx) {\n     var post = Post.findById(this.post);\n     if (!post) return;\n \n-    return url.resolve(post.path, this.slug);\n+    // PostAsset.path is file path relative to `public_dir`\n+    // no need to urlescape, #1562\n+    return pathFn.join(post.path, this.slug);\n   });\n \n   PostAsset.virtual('source').get(function() {\n",
        "bugId": 4,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 5
    },
    {
        "changedFiles": {
            "lib/plugins/helper/is.js": {
                "insert": [
                    25
                ],
                "changes": [
                    26,
                    32,
                    35
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 4,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/plugins/helper/is.js b/lib/plugins/helper/is.js\nindex 1608f850a..c5c735f92 100644\n--- a/lib/plugins/helper/is.js\n+++ b/lib/plugins/helper/is.js\n@@ -22,17 +22,19 @@ function isCurrentHelper(path, strict){\n }\n \n function isHomeHelper(){\n+  var path = this.path;\n+\n   /* jshint validthis: true */\n-  if (this.path === '') return true;\n+  if (!path || path === 'index.html') return true;\n \n   var paginationDir = this.config.pagination_dir;\n   var r = regexCache.home[paginationDir];\n \n   if (!r){\n-    r = regexCache.home[paginationDir] = new RegExp('^' + escapeRegExp(paginationDir) + '\\\\/\\\\d+\\\\/');\n+    r = regexCache.home[paginationDir] = new RegExp('^' + escapeRegExp(paginationDir) + '\\\\/\\\\d+\\\\/(index\\.html)?$');\n   }\n \n-  return r.test(this.path);\n+  return r.test(path);\n }\n \n function isPostHelper(){\n",
        "bugId": 3,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "IF-CC",
            "AS-CE",
            "MC-DAP"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/box/file.js": {
                "insert": [
                    6,
                    23,
                    28,
                    49
                ],
                "changes": [
                    42,
                    61
                ]
            },
            "package.json": {
                "changes": [
                    38
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 2,
            "sizeInLines": 21,
            "linesRem": 0,
            "linesAdd": 10,
            "chunks": 8,
            "linesMod": 11
        },
        "diff": "diff --git a/lib/box/file.js b/lib/box/file.js\nindex d61ef4824..c37d36ca0 100644\n--- a/lib/box/file.js\n+++ b/lib/box/file.js\n@@ -3,6 +3,9 @@\n var fs = require('hexo-fs');\n var Promise = require('bluebird');\n \n+var escapeBOM = fs.escapeBOM;\n+var escapeEOL = fs.escapeEOL;\n+\n function File(data){\n   this.source = data.source;\n   this.path = data.path;\n@@ -17,10 +20,15 @@ function wrapReadOptions(options){\n   if (typeof options === 'string') options = {encoding: options};\n   if (!options.hasOwnProperty('encoding')) options.encoding = 'utf8';\n   if (!options.hasOwnProperty('cache')) options.cache = true;\n+  if (!options.hasOwnProperty('escape')) options.escape = true;\n \n   return options;\n }\n \n+function escapeContent(str){\n+  return escapeBOM(escapeEOL(str));\n+}\n+\n File.prototype.read = function(options, callback){\n   if (!callback && typeof options === 'function'){\n     callback = options;\n@@ -38,12 +46,12 @@ File.prototype.read = function(options, callback){\n     }\n \n     var encoding = options.encoding;\n+    if (!encoding) return resolve(content);\n \n-    if (encoding){\n-      resolve(content.toString(encoding));\n-    } else {\n-      resolve(content);\n-    }\n+    var result = content.toString(encoding);\n+    if (options.escape) return resolve(escapeContent(result));\n+\n+    resolve(result);\n   }).nodeify(callback);\n };\n \n@@ -57,12 +65,12 @@ File.prototype.readSync = function(options){\n   }\n \n   var encoding = options.encoding;\n+  if (!encoding) return content;\n \n-  if (encoding){\n-    return content.toString(encoding);\n-  } else {\n-    return content;\n-  }\n+  var result = content.toString(encoding);\n+  if (options.escape) return escapeContent(result);\n+\n+  return result;\n };\n \n File.prototype.stat = function(options, callback){\ndiff --git a/package.json b/package.json\nindex c6f2df664..09889b9aa 100644\n--- a/package.json\n+++ b/package.json\n@@ -35,7 +35,7 @@\n     \"chalk\": \"^0.5.1\",\n     \"cheerio\": \"^0.18.0\",\n     \"hexo-front-matter\": \"^0.2.1\",\n-    \"hexo-fs\": \"^0.1.1\",\n+    \"hexo-fs\": \"^0.1.2\",\n     \"hexo-i18n\": \"^0.2.0\",\n     \"hexo-util\": \"^0.1.2\",\n     \"js-yaml\": \"^3.2.5\",\n",
        "bugId": 2,
        "tax": "IncompFI-MIV-MHSC",
        "pan_cat": [
            "IF-APTC",
            "IF-APTC",
            "IF-APTC",
            "IF-APTC"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/plugins/console/generate.js": {
                "insert": [
                    16
                ]
            }
        },
        "project": "Hexo",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/plugins/console/generate.js b/lib/plugins/console/generate.js\nindex eeae4cbda..ec2c6f16a 100644\n--- a/lib/plugins/console/generate.js\n+++ b/lib/plugins/console/generate.js\n@@ -13,6 +13,7 @@ var util = require('hexo-util');\n var join = pathFn.join;\n \n function generateConsole(args) {\n+  args = args || {};\n   var force = args.f || args.force;\n   var route = this.route;\n   var publicDir = this.public_dir;\n",
        "bugId": 1,
        "tax": "G-VI-MVI",
        "pan_cat": [
            "Undefined"
        ],
        "failingTests": 7
    },
    {
        "changedFiles": {
            "lib/v1/decoder.js": {
                "changes": [
                    415
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/v1/decoder.js b/lib/v1/decoder.js\nindex 3609d37..3bbbe72 100644\n--- a/lib/v1/decoder.js\n+++ b/lib/v1/decoder.js\n@@ -412,7 +412,7 @@ proto.readObject = function (withType) {\n   while (label !== 'z') {\n     this.byteBuffer.position(this.byteBuffer.position() - 1);\n     key = this.read();\n-    key = key.toString();\n+    // property name will auto transfer to a String type.\n     debug('read object prop: %j with type: %s', key, withType);\n     result.$[key] = this.read(withType);\n     label = this.byteBuffer.getChar();\n",
        "bugId": 9,
        "tax": "G-TC",
        "pan_cat": [
            "SQ-RMO"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/utils.js": {
                "insert": [
                    13
                ],
                "changes": [
                    15,
                    42
                ]
            },
            "package.json": {
                "changes": [
                    39
                ],
                "deletes": [
                    48
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 2,
            "sizeInLines": 16,
            "linesRem": 1,
            "linesAdd": 1,
            "chunks": 5,
            "linesMod": 14
        },
        "diff": "diff --git a/lib/utils.js b/lib/utils.js\nindex 92ff387..85f4d6a 100644\n--- a/lib/utils.js\n+++ b/lib/utils.js\n@@ -10,13 +10,11 @@\n 'use strict';\n \n var debug = require('debug')('hessian.js:utils');\n+var Long = require('long');\n var object = require('./object');\n \n-var MAX_INT_8 = exports.MAX_INT_8 = Math.pow(2, 7);\n-var MAX_INT_16 = exports.MAX_INT_16 = Math.pow(2, 15);\n-var MAX_INT_32 = exports.MAX_INT_32 = Math.pow(2, 31);\n-var MAX_INT = exports.MAX_INT = Math.pow(2, 53);\n-var MAX_INT_HIGH = exports.MAX_INT_HIGH = Math.pow(2, 21);\n+var MAX_SAFE_INT = Long.fromNumber(Math.pow(2, 53) - 1);\n+var MIN_SAFE_INT = Long.fromNumber(1 - Math.pow(2, 53));\n \n var MAX_BYTE_TRUNK_SIZE = exports.MAX_BYTE_TRUNK_SIZE = 0x8000;\n var MAX_CHAR_TRUNK_SIZE = exports.MAX_CHAR_TRUNK_SIZE = 0x8000;\n@@ -39,14 +37,10 @@ exports.isJavaObject = function (type) {\n };\n \n exports.handleLong = function (val) {\n-  var notSafeInt = val.high > MAX_INT_HIGH ||       // bigger than 2^54\n-    (val.high === MAX_INT_HIGH && val.low > 0) ||   // between 2^53 ~ 2^54\n-    val.high < -1 * MAX_INT_HIGH ||                 // smaller than -2^54\n-    (val.high === -1 * MAX_INT_HIGH && val.low < 0);// between -2^54 ~ -2^53\n-\n-  if (notSafeInt) {\n-    debug('[hessian.js Warning] Read a not safe long, translate it to string');\n-    return val.toString();\n+  if (val.greaterThan(MAX_SAFE_INT) || val.lessThan(MIN_SAFE_INT)) {\n+    val = val.toString();\n+    debug('[hessian.js Warning] Read a not safe long(%s), translate it to string', val);\n+    return val;\n   }\n   return val.toNumber();\n };\ndiff --git a/package.json b/package.json\nindex bce8320..cefa1ae 100644\n--- a/package.json\n+++ b/package.json\n@@ -36,7 +36,8 @@\n     \"byte\": \"~1.1.1\",\n     \"debug\": \"~2.2.0\",\n     \"is-type-of\": \"~0.3.1\",\n-    \"utility\": \"~1.4.0\"\n+    \"utility\": \"~1.4.0\",\n+    \"long\": \"~3.0.1\"\n   },\n   \"devDependencies\": {\n     \"autod\": \"*\",\n@@ -45,7 +46,6 @@\n     \"istanbul\": \"*\",\n     \"js-to-java\": \"~2.0.6\",\n     \"jshint\": \"*\",\n-    \"long\": \"~2.2.3\",\n     \"mocha\": \"*\",\n     \"should\": \"~5.2.0\"\n   },\n",
        "bugId": 8,
        "tax": "IncompFI-IncompOM",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "lib/object.js": {
                "insert": [
                    24,
                    26
                ]
            },
            "lib/v1/encoder.js": {
                "changes": [
                    330
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 2,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/object.js b/lib/object.js\nindex ff765a7..4f70ab3 100644\n--- a/lib/object.js\n+++ b/lib/object.js\n@@ -21,7 +21,9 @@ exports.DEFAULT_CLASSNAME = {\n   string: 'java.lang.String',\n   byteArray: '[B',\n   list: 'java.util.ArrayList',\n+  // iList: 'java.util.List',\n   map: 'java.util.HashMap',\n+  iMap: 'java.util.Map',\n   exception: 'java.lang.RuntimeException'\n };\n \ndiff --git a/lib/v1/encoder.js b/lib/v1/encoder.js\nindex daac205..cb7a4b1 100644\n--- a/lib/v1/encoder.js\n+++ b/lib/v1/encoder.js\n@@ -327,8 +327,8 @@ proto.writeObject = function (obj) {\n     // : {a: 1}\n     realObj = obj;\n   } else {\n-    // : {$class: 'java.utils.HashMap', $: {a: 1}}\n-    className = obj.$class === javaObject.DEFAULT_CLASSNAME.map ? '' : obj.$class;\n+    // : {$class: 'java.util.HashMap', $: {a: 1}}\n+    className = obj.$class === javaObject.DEFAULT_CLASSNAME.map || obj.$class === javaObject.DEFAULT_CLASSNAME.iMap ? '' : obj.$class;\n     realObj = obj.$;\n   }\n \n",
        "bugId": 7,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "lib/v1/decoder.js": {
                "insert": [
                    415
                ],
                "changes": [
                    417
                ]
            },
            "lib/v2/decoder.js": {
                "changes": [
                    588
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 2,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/v1/decoder.js b/lib/v1/decoder.js\nindex 3bbbe72..bc04fc6 100644\n--- a/lib/v1/decoder.js\n+++ b/lib/v1/decoder.js\n@@ -412,10 +412,13 @@ proto.readObject = function (withType) {\n   while (label !== 'z') {\n     this.byteBuffer.position(this.byteBuffer.position() - 1);\n     key = this.read();\n+    var value = this.read(withType);\n+    label = this.byteBuffer.getChar();\n     // property name will auto transfer to a String type.\n     debug('read object prop: %j with type: %s', key, withType);\n-    result.$[key] = this.read(withType);\n-    label = this.byteBuffer.getChar();\n+    if (!/^this\\$\\d+$/.test(key)) {\n+      result.$[key] = value;\n+    }\n   }\n   debug('read object finish');\n \ndiff --git a/lib/v2/decoder.js b/lib/v2/decoder.js\nindex da12389..6943176 100644\n--- a/lib/v2/decoder.js\n+++ b/lib/v2/decoder.js\n@@ -585,7 +585,10 @@ proto.readObject = function (withType) {\n   var fields = cls.fields;\n   for (var i = 0; i < fields.length; i++) {\n     var name = fields[i];\n-    result.$[name] = this.read(withType);\n+    var value = this.read(withType);\n+    if (!/^this\\$\\d+$/.test(name)) {\n+      result.$[name] = value;\n+    }\n   }\n \n   if (/Exception$/.test(cls.name)) {\n",
        "bugId": 6,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APC",
            "CF-CHG"
        ],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "package.json": {
                "changes": [
                    34
                ]
            },
            "lib/v2/encoder.js": {
                "insert": [
                    22,
                    78,
                    145
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 2,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 4,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/v2/encoder.js b/lib/v2/encoder.js\nindex 9c9238e..649608c 100644\n--- a/lib/v2/encoder.js\n+++ b/lib/v2/encoder.js\n@@ -19,6 +19,7 @@ var is = require('is-type-of');\n var util = require('util');\n var EncoderV1 = require('../v1/encoder');\n var javaObject = require('../object');\n+var utility = require('utility');\n \n var SUPPORT_ES6_MAP = typeof Map === 'function' && typeof Map.prototype.forEach === 'function';\n \n@@ -74,6 +75,7 @@ var INT_SHORT_ZERO = 0xd4;    // 212\n  * ```\n  */\n proto.writeInt = function (val) {\n+  this._assertType('writeInt', 'int32', val);\n   if (INT_DIRECT_MIN <= val && val <= INT_DIRECT_MAX) {\n     this.byteBuffer.put(val + INT_ZERO);\n   } else if (INT_BYTE_MIN <= val && val <= INT_BYTE_MAX) {\n@@ -140,6 +142,10 @@ proto.writeInt = function (val) {\n  * ```\n  */\n proto.writeLong = function (val) {\n+  if (typeof val !== 'number' && utility.isSafeNumberString(val)) {\n+    val = Number(val);\n+  }\n+\n   if (val >= -8 && val <= 15) {\n     this.byteBuffer.put(val + 0xe0);\n   } else if (val >= -2048 && val <= 2047) {\ndiff --git a/package.json b/package.json\nindex 3371c4c..7e20fa5 100644\n--- a/package.json\n+++ b/package.json\n@@ -31,7 +31,8 @@\n   \"dependencies\": {\n     \"byte\": \"~1.1.1\",\n     \"debug\": \"~2.1.3\",\n-    \"is-type-of\": \"~0.3.1\"\n+    \"is-type-of\": \"~0.3.1\",\n+    \"utility\": \"~1.4.0\"\n   },\n   \"devDependencies\": {\n     \"autod\": \"*\",\n",
        "bugId": 5,
        "tax": "G-TC",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "lib/v1/encoder.js": {
                "changes": [
                    302
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/v1/encoder.js b/lib/v1/encoder.js\nindex 9141c86..007bd3c 100644\n--- a/lib/v1/encoder.js\n+++ b/lib/v1/encoder.js\n@@ -299,7 +299,9 @@ proto._writeObject = function (obj) {\n  * : {$class: 'java.lang.Map', $: {a: 1}}\n  */\n proto.writeObject = function (obj) {\n-  if (is.nullOrUndefined(obj)) {\n+  if (is.nullOrUndefined(obj) || \n+    // : { a: { '$class': 'xxx', '$': null } }\n+    (is.string(obj.$class) && is.nullOrUndefined(obj.$))) {\n     debug('writeObject with a null');\n     return this.writeNull();\n   }\n",
        "bugId": 4,
        "tax": "IncompFI-MIV-MNC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "package.json": {
                "changes": [
                    11,
                    33
                ]
            },
            "index.js": {
                "changes": [
                    2,
                    9
                ]
            },
            "Makefile": {},
            "lib/v1/encoder.js": {
                "insert": [
                    397
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 4,
            "sizeInLines": 62,
            "linesRem": 50,
            "linesAdd": 6,
            "chunks": 6,
            "linesMod": 6
        },
        "diff": "diff --git a/Makefile b/Makefile\ndeleted file mode 100644\nindex 3f14e00..0000000\n--- a/Makefile\n+++ /dev/null\n@@ -1,50 +0,0 @@\n-TESTS = test/*.test.js\n-REPORTER = spec\n-TIMEOUT = 5000\n-MOCHA_OPTS =\n-\n-install:\n-\t@npm install\n-\n-jshint: install\n-\t@./node_modules/.bin/jshint .\n-\n-test: install\n-\t@NODE_ENV=test ./node_modules/.bin/mocha \\\n-\t\t--reporter $(REPORTER) \\\n-\t\t--timeout $(TIMEOUT) \\\n-\t\t$(MOCHA_OPTS) \\\n-\t\t$(TESTS)\n-\n-test-cov cov: install\n-\t@NODE_ENV=test node \\\n-\t\tnode_modules/.bin/istanbul cover --preserve-comments \\\n-\t\t./node_modules/.bin/_mocha \\\n-\t\t-- \\\n-\t\t--reporter $(REPORTER) \\\n-\t\t--timeout $(TIMEOUT) \\\n-\t\t$(MOCHA_OPTS) \\\n-\t\t$(TESTS)\n-\n-test-travis: install\n-\t@NODE_ENV=test node \\\n-\t\tnode_modules/.bin/istanbul cover --preserve-comments \\\n-\t\t./node_modules/.bin/_mocha \\\n-\t\t--report lcovonly \\\n-\t\t-- \\\n-\t\t--reporter dot \\\n-\t\t--timeout $(TIMEOUT) \\\n-\t\t$(MOCHA_OPTS) \\\n-\t\t$(TESTS)\n-\n-test-all: test test-cov jshint\n-\n-benchmark:\n-\t@node benchmark/encode.js\n-\t@node benchmark/decode.js\n-\n-autod: install\n-\t@./node_modules/.bin/autod -w -e benchmark --prefix \"~\"\n-\t@$(MAKE) install\n-\n-.PHONY: test benchmark\ndiff --git a/index.js b/index.js\nindex f94bf27..f5de04e 100644\n--- a/index.js\n+++ b/index.js\n@@ -1,12 +1,10 @@\n /**!\n- * hessian.js - index.js\n- *\n- * Copyright(c) 2014\n+ * Copyright(c) node-modules and other contributors.\n  * MIT Licensed\n  *\n  * Authors:\n  *   dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n- *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n+ *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n  */\n \n 'use strict';\ndiff --git a/lib/v1/encoder.js b/lib/v1/encoder.js\nindex bdd4786..daac205 100644\n--- a/lib/v1/encoder.js\n+++ b/lib/v1/encoder.js\n@@ -394,6 +394,9 @@ proto.writeArray = function (arr) {\n   var className = ''; // empty string meaning: `javaObject.DEFAULT_CLASSNAME.list`\n   var realArray = arr;\n   if (!isSimpleArray) {\n+    if (is.object(arr) && is.nullOrUndefined(arr.$)) {\n+      return this.writeNull();\n+    }\n     var isComplexArray = is.object(arr) &&\n       is.string(arr.$class) && is.array(arr.$);\n     if (!isComplexArray) {\ndiff --git a/package.json b/package.json\nindex 8e917e0..17b8aca 100644\n--- a/package.json\n+++ b/package.json\n@@ -8,7 +8,11 @@\n     \"lib/\"\n   ],\n   \"scripts\": {\n-    \"test\": \"make test-all\"\n+    \"test\": \"mocha -R spec -t 15000 -r should test/*.test.js\",\n+    \"test-cov\": \"istanbul cover node_modules/.bin/_mocha -- -t 15000 -r should test/*.test.js\",\n+    \"lint\": \"jshint .\",\n+    \"autod\": \"autod -w --prefix '~' -e benchmark\",\n+    \"benchmark\": \"node benchmark/encode.js && node benchmark/decode.js\"\n   },\n   \"repository\": {\n     \"type\": \"git\",\n@@ -30,7 +34,7 @@\n   \"homepage\": \"https://github.com/node-modules/hessian.js\",\n   \"dependencies\": {\n     \"byte\": \"~1.1.1\",\n-    \"debug\": \"~2.1.3\",\n+    \"debug\": \"~2.2.0\",\n     \"is-type-of\": \"~0.3.1\",\n     \"utility\": \"~1.4.0\"\n   },\n@@ -44,5 +48,8 @@\n     \"long\": \"~2.2.3\",\n     \"mocha\": \"*\",\n     \"should\": \"~5.2.0\"\n+  },\n+  \"engines\": {\n+    \"node\": \">= 0.10.0\"\n   }\n }\n",
        "bugId": 3,
        "tax": "IncompFI-MIV-MNC",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "lib/v1/decoder.js": {
                "changes": [
                    430
                ],
                "deletes": [
                    421
                ]
            },
            "lib/v2/decoder.js": {
                "changes": [
                    733
                ],
                "deletes": [
                    728
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 2,
            "sizeInLines": 9,
            "linesRem": 2,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/v1/decoder.js b/lib/v1/decoder.js\nindex 63949a0..54599c6 100644\n--- a/lib/v1/decoder.js\n+++ b/lib/v1/decoder.js\n@@ -418,7 +418,6 @@ proto.readObject = function (withType) {\n   // get\n   var label = this.byteBuffer.getChar();\n   var key;\n-  var t;\n \n   while (label !== 'z') {\n     this.byteBuffer.position(this.byteBuffer.position() - 1);\n@@ -427,8 +426,7 @@ proto.readObject = function (withType) {\n     label = this.byteBuffer.getChar();\n     // property name will auto transfer to a String type.\n     debug('read object prop: %j with type: %s', key, withType);\n-    t = typeof key;\n-    if ((t === 'string' || t === 'number') && !/^this\\$\\d+$/.test(key)) {\n+    if (!/^this\\$\\d+$/.test(key)) {\n       result.$[key] = value;\n     }\n     if (isMap) {\ndiff --git a/lib/v2/decoder.js b/lib/v2/decoder.js\nindex 4e4481f..98e4da7 100644\n--- a/lib/v2/decoder.js\n+++ b/lib/v2/decoder.js\n@@ -725,16 +725,12 @@ proto._readMap = function (map, withType) {\n \n   var k;\n   var v;\n-  var t;\n   // Z(0x5a) list/map terminator\n   while (code !== 0x5a) {\n     k = this.read(withType);\n     v = this.read(withType);\n-    t = typeof k;\n-\n-    if (t === 'string' || t === 'number') {\n-      map[k] = v;\n-    }\n+    \n+    map[k] = v;\n     if (supportES6Map) {\n       map.$map.set(k, v);\n     }\n",
        "bugId": 2,
        "tax": "IncorFI-IncorIV-UTC",
        "pan_cat": [
            "IF-CC",
            "IF-RMV"
        ],
        "failingTests": 2
    },
    {
        "changedFiles": {
            "package.json": {
                "changes": [
                    48
                ]
            },
            "lib/v2/encoder.js": {
                "insert": [
                    31
                ],
                "changes": [
                    500,
                    540,
                    543,
                    558
                ],
                "deletes": [
                    543
                ]
            }
        },
        "project": "Hessian.js",
        "metrics": {
            "files": 2,
            "sizeInLines": 8,
            "linesRem": 1,
            "linesAdd": 3,
            "chunks": 8,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/v2/encoder.js b/lib/v2/encoder.js\nindex 3ab1c3d..ba6bb6a 100644\n--- a/lib/v2/encoder.js\n+++ b/lib/v2/encoder.js\n@@ -28,6 +28,7 @@ function Encoder(options) {\n \n   this._classRefs = [];\n   this._typeRefs = [];\n+  this._classRefFields = {};\n }\n \n util.inherits(Encoder, EncoderV1);\n@@ -497,7 +498,7 @@ var _classcache = {};\n  * @see http://hessian.caucho.com/doc/hessian-serialization.html##object\n  * ```\n  */\n-proto._writeObjectBegin = function (type) {\n+proto._writeObjectBegin = function (type, fields) {\n   debug('_writeObjectBegin() type: %s', type);\n   var ref = this._classRefs.indexOf(type);\n   if (ref >= 0) {\n@@ -513,6 +514,7 @@ proto._writeObjectBegin = function (type) {\n     // class definition\n     this.byteBuffer.putChar('C');\n     this._classRefs.push(type);\n+    this._classRefFields[type] = fields;\n     if (_classcache[type]) {\n       this.byteBuffer.put(_classcache[type]);\n     } else {\n@@ -537,13 +539,13 @@ proto._writeObjectBegin = function (type) {\n // The integer value refers to the object definition.\n //\n // type format: length(writeInt) stringbytes(putRawString)\n-proto._writeObject = function (obj, fields) {\n+proto._writeObject = function (obj) {\n   var className = obj.$class;\n   var realObj = obj.$;\n-  var ref = this._writeObjectBegin(className);\n   // hessian 2.0\n   // field defined sort must same as java Class defined\n   var keys = Object.keys(realObj);\n+  var ref = this._writeObjectBegin(className, keys);\n   if (ref === -1) {\n     // writeDefinition20\n     // out.writeClassFieldLength(_fields.length);\n@@ -555,7 +557,7 @@ proto._writeObject = function (obj, fields) {\n     }\n     this._writeObjectBegin(className);\n   }\n-\n+  keys = this._classRefFields[className];\n   // writeInstance\n   for (var i = 0; i < keys.length; i++) {\n     var key = keys[i];\ndiff --git a/package.json b/package.json\nindex 0ff9ef9..2255b43 100644\n--- a/package.json\n+++ b/package.json\n@@ -45,7 +45,7 @@\n     \"beautify-benchmark\": \"*\",\n     \"benchmark\": \"*\",\n     \"istanbul\": \"*\",\n-    \"js-to-java\": \"~2.0.6\",\n+    \"js-to-java\": \"~2.3.5\",\n     \"jshint\": \"*\",\n     \"mocha\": \"*\",\n     \"should\": \"~5.2.0\"\n",
        "bugId": 1,
        "tax": "G-VI-MVI",
        "pan_cat": [
            "CF-ADD",
            "MC-DNP",
            "MC-DNP",
            "SQ-AMO",
            "SQ-RMO"
        ],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "insert": [
                    293,
                    316
                ],
                "changes": [
                    316,
                    320
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 7,
            "chunks": 5,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex ef98117ea..982e24407 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -290,6 +290,7 @@ proto.process_params = function(layer, called, req, res, done) {\n   var key;\n   var paramVal;\n   var paramCallbacks;\n+  var paramCalled;\n \n   // process params in order\n   // param callbacks can be async\n@@ -312,12 +313,18 @@ proto.process_params = function(layer, called, req, res, done) {\n     name = key.name;\n     paramVal = req.params[name];\n     paramCallbacks = params[name];\n+    paramCalled = called[name];\n \n-    if (paramVal === undefined || !paramCallbacks || called[name] === paramVal) {\n+    if (paramVal === undefined || !paramCallbacks) {\n       return param();\n     }\n \n-    called[name] = paramVal;\n+    // param previously called with same value or error occurred\n+    if (paramCalled && (paramCalled.err || paramCalled.val === paramVal)) {\n+      return param(paramCalled.err);\n+    }\n+\n+    called[name] = paramCalled = { val: paramVal };\n \n     try {\n       return paramCallback();\n@@ -328,6 +335,11 @@ proto.process_params = function(layer, called, req, res, done) {\n \n   // single param callbacks\n   function paramCallback(err) {\n+    if (err && paramCalled) {\n+      // store error\n+      paramCalled.err = err;\n+    }\n+\n     var fn = paramCallbacks[paramIndex++];\n     if (err || !fn) return param(err);\n     fn(req, res, paramCallback, paramVal, key.name);\n",
        "bugId": 27,
        "tax": "IncompFI-EH-C",
        "pan_cat": [
            "IF-CC",
            "IF-APCJ",
            "AS-CE",
            "IF-APC"
        ],
        "failingTests": 12
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "changes": [
                    129
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex 0ca1b6fee..c6e6ba21d 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -126,7 +126,7 @@ proto.handle = function(req, res, done) {\n \n   var search = 1 + req.url.indexOf('?');\n   var pathlength = search ? search - 1 : req.url.length;\n-  var fqdn = 1 + req.url.substr(0, pathlength).indexOf('://');\n+  var fqdn = req.url[0] !== '/' && 1 + req.url.substr(0, pathlength).indexOf('://');\n   var protohost = fqdn ? req.url.substr(0, req.url.indexOf('/', 2 + fqdn)) : '';\n   var idx = 0;\n   var removed = '';\n",
        "bugId": 26,
        "tax": "IncompFI-MIV-MHSC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/response.js": {
                "insert": [
                    240
                ],
                "changes": [
                    241
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/response.js b/lib/response.js\nindex 31c79c0d5..cbfc79f71 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -237,9 +237,13 @@ res.jsonp = function(obj){\n   this.charset = this.charset || 'utf-8';\n   this.set('Content-Type', 'application/json');\n \n+  // fixup callback\n+  if (Array.isArray(callback)) {\n+    callback = callback[0];\n+  }\n+\n   // jsonp\n-  if (callback) {\n-    if (Array.isArray(callback)) callback = callback[0];\n+  if (callback && 'string' === typeof callback) {\n     this.set('Content-Type', 'text/javascript');\n     var cb = callback.replace(/[^\\[\\]\\w$.]/g, '');\n     body = 'typeof ' + cb + ' === \\'function\\' && ' + cb + '(' + body + ');';\n",
        "bugId": 25,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "changes": [
                    155
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 14,
            "linesRem": 0,
            "linesAdd": 11,
            "chunks": 2,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex 488713915..37e3083fb 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -152,9 +152,7 @@ proto.handle = function(req, res, done) {\n   if (req.method === 'OPTIONS') {\n     done = wrap(done, function(old, err) {\n       if (err || options.length === 0) return old(err);\n-\n-      var body = options.join(',');\n-      return res.set('Allow', body).send(body);\n+      sendOptionsResponse(res, options, old);\n     });\n   }\n \n@@ -571,6 +569,17 @@ function restore(fn, obj) {\n   };\n }\n \n+// send an OPTIONS response\n+function sendOptionsResponse(res, options, next) {\n+  try {\n+    var body = options.join(',');\n+    res.set('Allow', body);\n+    res.send(body);\n+  } catch (err) {\n+    next(err);\n+  }\n+}\n+\n // wrap a function\n function wrap(old, fn) {\n   return function proxy() {\n",
        "bugId": 24,
        "tax": "IncompFI-IncompDP-IncompI",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/application.js": {
                "insert": [
                    160
                ],
                "changes": [
                    161
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/application.js b/lib/application.js\nindex 2214bf6c1..b5cb883dc 100644\n--- a/lib/application.js\n+++ b/lib/application.js\n@@ -157,9 +157,18 @@ app.use = function use(fn) {\n   var self = this;\n \n   // default path to '/'\n+  // disambiguate app.use([fn])\n   if (typeof fn !== 'function') {\n-    offset = 1;\n-    path = fn;\n+    var arg = fn;\n+\n+    while (Array.isArray(arg) && arg.length !== 0) {\n+      arg = arg[0];\n+    }\n+\n+    if (typeof arg !== 'function' && (arg == null || arg.length !== 0)) {\n+      offset = 1;\n+      path = fn;\n+    }\n   }\n \n   var fns = flatten(slice.call(arguments, offset));\n",
        "bugId": 23,
        "tax": "IncompFI-MIV",
        "pan_cat": [],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "lib/request.js": {
                "changes": [
                    479
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/request.js b/lib/request.js\nindex 3d41617eb..10c1421ae 100644\n--- a/lib/request.js\n+++ b/lib/request.js\n@@ -476,7 +476,13 @@ req.__defineGetter__('host', function(){\n   var host = trustProxy && this.get('X-Forwarded-Host');\n   host = host || this.get('Host');\n   if (!host) return;\n-  return host.split(':')[0];\n+  var offset = host[0] === '['\n+    ? host.indexOf(']') + 1\n+    : 0;\n+  var index = host.indexOf(':', offset);\n+  return ~index\n+    ? host.substring(0, index)\n+    : host;\n });\n \n /**\n",
        "bugId": 22,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "changes": [
                    137,
                    263
                ],
                "deletes": [
                    135,
                    263
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 41,
            "linesRem": 8,
            "linesAdd": 28,
            "chunks": 3,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex 08462c1b1..189f3cc7f 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -132,13 +132,10 @@ proto.handle = function(req, res, done) {\n   var stack = self.stack;\n \n   // manage inter-router variables\n-  var parent = req.next;\n   var parentUrl = req.baseUrl || '';\n-  done = wrap(done, function(old, err) {\n-    req.baseUrl = parentUrl;\n-    req.next = parent;\n-    old(err);\n-  });\n+  done = restore(done, req, 'baseUrl', 'next', 'params');\n+\n+  // setup next layer\n   req.next = next;\n \n   // for options requests, respond with a default if nothing else responds\n@@ -260,13 +257,6 @@ proto.handle = function(req, res, done) {\n       }\n     }\n   }\n-\n-  function wrap(old, fn) {\n-    return function () {\n-      var args = [old].concat(slice.call(arguments));\n-      fn.apply(this, args);\n-    };\n-  }\n };\n \n /**\n@@ -450,3 +440,31 @@ methods.concat('all').forEach(function(method){\n     return this;\n   };\n });\n+\n+// restore obj props after function\n+function restore(fn, obj) {\n+  var props = new Array(arguments.length - 2);\n+  var vals = new Array(arguments.length - 2);\n+\n+  for (var i = 0; i < props.length; i++) {\n+    props[i] = arguments[i + 2];\n+    vals[i] = obj[props[i]];\n+  }\n+\n+  return function(err){\n+    // restore vals\n+    for (var i = 0; i < props.length; i++) {\n+      obj[props[i]] = vals[i];\n+    }\n+\n+    return fn.apply(this, arguments);\n+  };\n+}\n+\n+// wrap a function\n+function wrap(old, fn) {\n+  return function () {\n+    var args = [old].concat(slice.call(arguments));\n+    fn.apply(this, args);\n+  };\n+}\n",
        "bugId": 21,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 12
    },
    {
        "changedFiles": {
            "lib/response.js": {
                "changes": [
                    720
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/response.js b/lib/response.js\nindex f3f043f5c..b852a60e2 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -717,9 +717,14 @@ res.header = function header(field, val) {\n       : String(val);\n \n     // add charset to content-type\n-    if (field.toLowerCase() === 'content-type' && !charsetRegExp.test(value)) {\n-      var charset = mime.charsets.lookup(value.split(';')[0]);\n-      if (charset) value += '; charset=' + charset.toLowerCase();\n+    if (field.toLowerCase() === 'content-type') {\n+      if (Array.isArray(value)) {\n+        throw new TypeError('Content-Type cannot be set to an Array');\n+      }\n+      if (!charsetRegExp.test(value)) {\n+        var charset = mime.charsets.lookup(value.split(';')[0]);\n+        if (charset) value += '; charset=' + charset.toLowerCase();\n+      }\n     }\n \n     this.setHeader(field, value);\n",
        "bugId": 20,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "IF-CC",
            "IF-APCJ",
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/router/layer.js": {
                "insert": [
                    8,
                    119,
                    126
                ],
                "changes": [
                    121
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 14,
            "linesRem": 0,
            "linesAdd": 10,
            "chunks": 4,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/router/layer.js b/lib/router/layer.js\nindex e292a13a8..3f1500238 100644\n--- a/lib/router/layer.js\n+++ b/lib/router/layer.js\n@@ -5,6 +5,12 @@\n var pathRegexp = require('path-to-regexp');\n var debug = require('debug')('express:router:layer');\n \n+/**\n+ * Module variables.\n+ */\n+\n+var hasOwnProperty = Object.prototype.hasOwnProperty;\n+\n /**\n  * Expose `Layer`.\n  */\n@@ -110,18 +116,20 @@ Layer.prototype.match = function match(path) {\n \n   var keys = this.keys;\n   var params = this.params;\n+  var prop;\n   var n = 0;\n   var key;\n   var val;\n \n   for (var i = 1, len = m.length; i < len; ++i) {\n     key = keys[i - 1];\n+    prop = key\n+      ? key.name\n+      : n++;\n     val = decode_param(m[i]);\n \n-    if (key) {\n-      params[key.name] = val;\n-    } else {\n-      params[n++] = val;\n+    if (val !== undefined || !(hasOwnProperty.call(params, prop))) {\n+      params[prop] = val;\n     }\n   }\n \n",
        "bugId": 19,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "changes": [
                    360
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex 209f881b1..a20c592f0 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -357,7 +357,8 @@ proto.process_params = function(layer, called, req, res, done) {\n     }\n \n     // param previously called with same value or error occurred\n-    if (paramCalled && (paramCalled.error || paramCalled.match === paramVal)) {\n+    if (paramCalled && (paramCalled.match === paramVal\n+      || (paramCalled.error && paramCalled.error !== 'route'))) {\n       // restore value\n       req.params[name] = paramCalled.value;\n \n",
        "bugId": 18,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 7
    },
    {
        "changedFiles": {
            "lib/view.js": {
                "changes": [
                    79
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/view.js b/lib/view.js\nindex 99d5aed7a..cf101caea 100644\n--- a/lib/view.js\n+++ b/lib/view.js\n@@ -76,7 +76,15 @@ function View(name, options) {\n     // load engine\n     var mod = this.ext.substr(1)\n     debug('require \"%s\"', mod)\n-    opts.engines[this.ext] = require(mod).__express\n+\n+    // default engine export\n+    var fn = require(mod).__express\n+\n+    if (typeof fn !== 'function') {\n+      throw new Error('Module \"' + mod + '\" does not provide a view engine.')\n+    }\n+\n+    opts.engines[this.ext] = fn\n   }\n \n   // store loaded engine\n",
        "bugId": 17,
        "tax": "IncompFI-EH",
        "pan_cat": [],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/response.js": {
                "changes": [
                    821,
                    825
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/response.js b/lib/response.js\nindex 32c098af2..c26f68ac8 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -818,11 +818,11 @@ res.redirect = function redirect(url) {\n   // Support text/{plain,html} by default\n   this.format({\n     text: function(){\n-      body = statusCodes[status] + '. Redirecting to ' + encodeURI(url);\n+      body = statusCodes[status] + '. Redirecting to ' + encodeURI(address);\n     },\n \n     html: function(){\n-      var u = escapeHtml(url);\n+      var u = escapeHtml(address);\n       body = '<p>' + statusCodes[status] + '. Redirecting to <a href=\"' + u + '\">' + u + '</a></p>';\n     },\n \n",
        "bugId": 16,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/response.js": {
                "changes": [
                    471
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/response.js b/lib/response.js\nindex 67e1006c7..2402aac2e 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -468,7 +468,12 @@ res.format = function(obj){\n   this.vary(\"Accept\");\n \n   if (key) {\n-    this.set('Content-Type', normalizeType(key).value);\n+    var type = normalizeType(key).value;\n+    var charset;\n+    if (charset = mime.charsets.lookup(type)) {\n+      type += '; charset=' + charset;\n+    }\n+    this.set('Content-Type', type);\n     obj[key](req, this, next);\n   } else if (fn) {\n     fn();\n",
        "bugId": 15,
        "tax": "IncompFI-MDP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/router/layer.js": {
                "insert": [
                    98
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 7,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/router/layer.js b/lib/router/layer.js\nindex 3f1500238..88ebd3964 100644\n--- a/lib/router/layer.js\n+++ b/lib/router/layer.js\n@@ -95,6 +95,13 @@ Layer.prototype.handle_request = function handle(req, res, next) {\n  */\n \n Layer.prototype.match = function match(path) {\n+  if (path == null) {\n+    // no path, nothing matches\n+    this.params = undefined;\n+    this.path = undefined;\n+    return false;\n+  }\n+\n   if (this.regexp.fast_slash) {\n     // fast path non-ending match for / (everything matches)\n     this.params = {};\n",
        "bugId": 14,
        "tax": "IncorFI-IncorIV-EIP",
        "pan_cat": [],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "changes": [
                    323,
                    327,
                    338,
                    340,
                    343
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 5,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex 6b8266024..a3a4c1bf0 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -320,11 +320,19 @@ proto.process_params = function(layer, called, req, res, done) {\n     }\n \n     // param previously called with same value or error occurred\n-    if (paramCalled && (paramCalled.err || paramCalled.val === paramVal)) {\n-      return param(paramCalled.err);\n+    if (paramCalled && (paramCalled.error || paramCalled.match === paramVal)) {\n+      // restore value\n+      req.params[name] = paramCalled.value;\n+\n+      // next param\n+      return param(paramCalled.error);\n     }\n \n-    called[name] = paramCalled = { val: paramVal };\n+    called[name] = paramCalled = {\n+      error: null,\n+      match: paramVal,\n+      value: paramVal\n+    };\n \n     try {\n       return paramCallback();\n@@ -335,13 +343,20 @@ proto.process_params = function(layer, called, req, res, done) {\n \n   // single param callbacks\n   function paramCallback(err) {\n-    if (err && paramCalled) {\n+    var fn = paramCallbacks[paramIndex++];\n+\n+    // store updated value\n+    paramCalled.value = req.params[key.name];\n+\n+    if (err) {\n       // store error\n-      paramCalled.err = err;\n+      paramCalled.error = err;\n+      param(err);\n+      return;\n     }\n \n-    var fn = paramCallbacks[paramIndex++];\n-    if (err || !fn) return param(err);\n+    if (!fn) return param();\n+\n     fn(req, res, paramCallback, paramVal, key.name);\n   }\n \n",
        "bugId": 13,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "SQ-AROB",
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 12
    },
    {
        "changedFiles": {
            "lib/router/layer.js": {
                "changes": [
                    136
                ]
            },
            "package.json": {
                "changes": [
                    46
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 2,
            "sizeInLines": 12,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 12
        },
        "diff": "diff --git a/lib/router/layer.js b/lib/router/layer.js\nindex 4747f70be..b5c1f5895 100644\n--- a/lib/router/layer.js\n+++ b/lib/router/layer.js\n@@ -133,17 +133,11 @@ Layer.prototype.match = function match(path) {\n \n   var keys = this.keys;\n   var params = this.params;\n-  var prop;\n-  var n = 0;\n-  var key;\n-  var val;\n-\n-  for (var i = 1, len = m.length; i < len; ++i) {\n-    key = keys[i - 1];\n-    prop = key\n-      ? key.name\n-      : n++;\n-    val = decode_param(m[i]);\n+\n+  for (var i = 1; i < m.length; i++) {\n+    var key = keys[i - 1];\n+    var prop = key.name;\n+    var val = decode_param(m[i]);\n \n     if (val !== undefined || !(hasOwnProperty.call(params, prop))) {\n       params[prop] = val;\ndiff --git a/package.json b/package.json\nindex ba69a0205..95a4a472f 100644\n--- a/package.json\n+++ b/package.json\n@@ -43,7 +43,7 @@\n     \"methods\": \"~1.1.1\",\n     \"on-finished\": \"~2.3.0\",\n     \"parseurl\": \"~1.3.0\",\n-    \"path-to-regexp\": \"0.1.4\",\n+    \"path-to-regexp\": \"0.1.6\",\n     \"proxy-addr\": \"~1.0.8\",\n     \"qs\": \"2.4.2\",\n     \"range-parser\": \"~1.0.2\",\n",
        "bugId": 12,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 7
    },
    {
        "changedFiles": {
            "lib/response.js": {
                "insert": [
                    106
                ],
                "changes": [
                    107
                ],
                "deletes": [
                    107
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 6,
            "linesAdd": 9,
            "chunks": 3,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/response.js b/lib/response.js\nindex 339bf0c48..ebdb1a8f9 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -103,13 +103,15 @@ res.send = function(body){\n     }\n   }\n \n+  // disambiguate res.send(status) and res.send(status, num)\n+  if (typeof body === 'number' && arguments.length === 1) {\n+    // res.send(status) will set status message as text string\n+    this.get('Content-Type') || this.type('txt');\n+    this.statusCode = body;\n+    body = http.STATUS_CODES[body];\n+  }\n+\n   switch (typeof body) {\n-    // response status\n-    case 'number':\n-      this.get('Content-Type') || this.type('txt');\n-      this.statusCode = body;\n-      body = http.STATUS_CODES[body];\n-      break;\n     // string defaulting to html\n     case 'string':\n       if (!this.get('Content-Type')) {\n@@ -118,6 +120,7 @@ res.send = function(body){\n       }\n       break;\n     case 'boolean':\n+    case 'number':\n     case 'object':\n       if (null == body) {\n         body = '';\n",
        "bugId": 11,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "VAL-CHK",
            "IF-APC",
            "SW-ARSB"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "changes": [
                    283
                ],
                "deletes": [
                    283
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 11,
            "linesRem": 5,
            "linesAdd": 6,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex d2ed86e0b..917c6002c 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -280,12 +280,13 @@ proto.handle = function handle(req, res, out) {\n   }\n \n   function trim_prefix(layer, layerError, layerPath, path) {\n-    var c = path[layerPath.length];\n-    if (c && '/' !== c && '.' !== c) return next(layerError);\n-\n-     // Trim off the part of the url that matches the route\n-     // middleware (.use stuff) needs to have the path stripped\n     if (layerPath.length !== 0) {\n+      // Validate path breaks on a path separator\n+      var c = path[layerPath.length]\n+      if (c && c !== '/' && c !== '.') return next(layerError)\n+\n+      // Trim off the part of the url that matches the route\n+      // middleware (.use stuff) needs to have the path stripped\n       debug('trim prefix (%s) from url %s', layerPath, req.url);\n       removed = layerPath;\n       req.url = protohost + req.url.substr(protohost.length + removed.length);\n",
        "bugId": 10,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/application.js": {
                "changes": [
                    171
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/application.js b/lib/application.js\nindex 352d57e30..2ab00b096 100644\n--- a/lib/application.js\n+++ b/lib/application.js\n@@ -168,7 +168,7 @@ app.use = function use(path, fn) {\n   // express app\n   if (mount_app && mount_app.handle && mount_app.set) {\n     debug('.use app under %s', mount_path);\n-    mount_app.mountpath = path;\n+    mount_app.mountpath = mount_path;\n     mount_app.parent = this;\n \n     // restore .app property on req and res\n",
        "bugId": 9,
        "tax": "G-VI-IncorVI",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 13
    },
    {
        "changedFiles": {
            "lib/application.js": {
                "changes": [
                    168
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/application.js b/lib/application.js\nindex b5cb883dc..2c7cc2de2 100644\n--- a/lib/application.js\n+++ b/lib/application.js\n@@ -165,7 +165,8 @@ app.use = function use(fn) {\n       arg = arg[0];\n     }\n \n-    if (typeof arg !== 'function' && (arg == null || arg.length !== 0)) {\n+    // first arg is the path\n+    if (typeof arg !== 'function') {\n       offset = 1;\n       path = fn;\n     }\n",
        "bugId": 8,
        "tax": "IncorFI-IncorIV-EIP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/response.js": {
                "insert": [
                    910,
                    924,
                    937,
                    951,
                    963
                ],
                "changes": [
                    953
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 20,
            "linesRem": 0,
            "linesAdd": 18,
            "chunks": 6,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/response.js b/lib/response.js\nindex f21cbe27d..87d1dc5d0 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -907,6 +907,7 @@ res.render = function(view, options, fn){\n // pipe the send file stream\n function sendfile(res, file, options, callback) {\n   var done = false;\n+  var streaming = false;\n \n   // directory\n   function ondirectory() {\n@@ -920,6 +921,7 @@ function sendfile(res, file, options, callback) {\n \n   // errors\n   function onerror(err) {\n+    if (!err) return;\n     if (done) return;\n     done = true;\n     callback(err);\n@@ -932,6 +934,11 @@ function sendfile(res, file, options, callback) {\n     callback();\n   }\n \n+  // file\n+  function onfile() {\n+    onFinished(res, onfinish);\n+  }\n+\n   // finished\n   function onfinish(err) {\n     if (err) return onerror(err);\n@@ -941,6 +948,11 @@ function sendfile(res, file, options, callback) {\n       if (done) return;\n       done = true;\n \n+      if (!streaming) {\n+        callback();\n+        return;\n+      }\n+\n       // response finished before end of file\n       var err = new Error('Request aborted');\n       err.code = 'ECONNABORT';\n@@ -948,10 +960,17 @@ function sendfile(res, file, options, callback) {\n     });\n   }\n \n+  // streaming\n+  function onstream() {\n+    streaming = true;\n+  }\n+\n+  file.on('directory', ondirectory);\n   file.on('end', onend);\n   file.on('error', onerror);\n-  file.on('directory', ondirectory);\n-  onFinished(res, onfinish);\n+  file.on('file', onfile);\n+  file.on('stream', onstream);\n+  onFinished(res, onerror);\n \n   if (options.headers) {\n     // set headers on successful transfer\n",
        "bugId": 7,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-APCJ",
            "MD-ADD",
            "MD-ADD",
            "MD-ADD"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/application.js": {
                "insert": [
                    33
                ],
                "changes": [
                    402,
                    406,
                    423
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 37,
            "linesRem": 0,
            "linesAdd": 30,
            "chunks": 4,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/application.js b/lib/application.js\nindex 000eeaf01..40a28b18d 100644\n--- a/lib/application.js\n+++ b/lib/application.js\n@@ -30,6 +30,7 @@ var app = exports = module.exports = {};\n  */\n \n app.init = function(){\n+  this._baseRoutes = {};\n   this.cache = {};\n   this.settings = {};\n   this.engines = {};\n@@ -399,11 +400,11 @@ app.disable = function(setting){\n \n methods.forEach(function(method){\n   app[method] = function(path){\n-    if ('get' == method && 1 == arguments.length) return this.set(path);\n-\n-    this.lazyrouter();\n+    if (method === 'get' && arguments.length === 1) {\n+      return this.set(path);\n+    }\n \n-    var route = this._router.route(path);\n+    var route = this._baseRoute(path);\n     route[method].apply(route, [].slice.call(arguments, 1));\n     return this;\n   };\n@@ -420,9 +421,7 @@ methods.forEach(function(method){\n  */\n \n app.all = function(path){\n-  this.lazyrouter();\n-\n-  var route = this._router.route(path);\n+  var route = this._baseRoute(path);\n   var args = [].slice.call(arguments, 1);\n   methods.forEach(function(method){\n     route[method].apply(route, args);\n@@ -531,3 +530,32 @@ app.listen = function(){\n   var server = http.createServer(this);\n   return server.listen.apply(server, arguments);\n };\n+\n+/**\n+ * Get or create a new base route for path.\n+ *\n+ * @param {String} path\n+ * @return {Route}\n+ * @api private\n+ */\n+\n+app._baseRoute = function(path){\n+  this.lazyrouter();\n+\n+  var key = typeof path !== 'string'\n+    ? 'o:' + String(path)\n+    : 's:' + path;\n+\n+  if (path.ignoreCase || !this._router.caseSensitive) {\n+    key = 'i' + key.toLowerCase();\n+  }\n+\n+  var route = this._baseRoutes[key];\n+\n+  if (!route) {\n+    route = this._router.route(path);\n+    this._baseRoutes[key] = route;\n+  }\n+\n+  return route;\n+};\n",
        "bugId": 6,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "SQ-AFO",
            "IF-CC",
            "MD-ADD",
            "AS-CE",
            "MC-DM",
            "MC-DM"
        ],
        "failingTests": 9
    },
    {
        "changedFiles": {
            "lib/utils.js": {
                "changes": [
                    70
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/utils.js b/lib/utils.js\nindex c2d3af1d6..f418c5807 100644\n--- a/lib/utils.js\n+++ b/lib/utils.js\n@@ -67,7 +67,7 @@ exports.wetag = function wetag(body, encoding){\n \n exports.isAbsolute = function(path){\n   if ('/' === path[0]) return true;\n-  if (':' === path[1] && '\\\\' === path[2]) return true;\n+  if (':' === path[1] && ('\\\\' === path[2] || '/' === path[2])) return true; // Windows device path\n   if ('\\\\\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path\n };\n \n",
        "bugId": 5,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 4
    },
    {
        "changedFiles": {
            "lib/request.js": {
                "insert": [
                    16
                ],
                "changes": [
                    457
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/request.js b/lib/request.js\nindex 485c2962e..24e8748d2 100644\n--- a/lib/request.js\n+++ b/lib/request.js\n@@ -13,6 +13,7 @@ var http = require('http')\n   , parse = require('parseurl')\n   , proxyaddr = require('proxy-addr')\n   , mime = connect.mime;\n+var isIP = require('net').isIP;\n \n /**\n  * Request prototype.\n@@ -454,7 +455,9 @@ req.__defineGetter__('auth', function(){\n req.__defineGetter__('subdomains', function(){\n   var host = this.host;\n   var offset = this.app.get('subdomain offset');\n-  var subdomains = host.split('.').reverse();\n+  var subdomains = !isIP(host)\n+    ? host.split('.').reverse()\n+    : [host];\n \n   return subdomains.slice(offset);\n });\n",
        "bugId": 4,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/response.js": {
                "changes": [
                    609
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/response.js b/lib/response.js\nindex 50b0579b5..5334515ee 100644\n--- a/lib/response.js\n+++ b/lib/response.js\n@@ -606,7 +606,9 @@ res.format = function(obj){\n   if (fn) delete obj.default;\n   var keys = Object.keys(obj);\n \n-  var key = req.accepts(keys);\n+  var key = keys.length > 0\n+    ? req.accepts(keys)\n+    : false;\n \n   this.vary(\"Accept\");\n \n",
        "bugId": 3,
        "tax": "IncompFI-IncompDP-IncompI",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 7
    },
    {
        "changedFiles": {
            "lib/request.js": {
                "changes": [
                    361
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/request.js b/lib/request.js\nindex c1392396c..3bae7ad9b 100644\n--- a/lib/request.js\n+++ b/lib/request.js\n@@ -358,7 +358,7 @@ req.__defineGetter__('protocol', function(){\n     : 'http';\n   var trust = this.app.get('trust proxy fn');\n \n-  if (!trust(this.connection.remoteAddress)) {\n+  if (!trust(this.connection.remoteAddress, 0)) {\n     return proto;\n   }\n \n",
        "bugId": 2,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MC-DNP"
        ],
        "failingTests": 8
    },
    {
        "changedFiles": {
            "lib/router/index.js": {
                "changes": [
                    210
                ]
            }
        },
        "project": "Express",
        "metrics": {
            "files": 1,
            "sizeInLines": 11,
            "linesRem": 0,
            "linesAdd": 10,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/router/index.js b/lib/router/index.js\nindex b3a42e290..488713915 100644\n--- a/lib/router/index.js\n+++ b/lib/router/index.js\n@@ -207,7 +207,7 @@ proto.handle = function(req, res, done) {\n \n         // build up automatic options response\n         if (!has_method && method === 'OPTIONS') {\n-          options.push.apply(options, route._options());\n+          appendMethods(options, route._options());\n         }\n \n         // don't even bother\n@@ -492,6 +492,16 @@ methods.concat('all').forEach(function(method){\n   };\n });\n \n+// append methods to a list of methods\n+function appendMethods(list, addition) {\n+  for (var i = 0; i < addition.length; i++) {\n+    var method = addition[i];\n+    if (list.indexOf(method) === -1) {\n+      list.push(method);\n+    }\n+  }\n+}\n+\n // get type for error message\n function gettype(obj) {\n   var type = typeof obj;\n",
        "bugId": 1,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 11
    },
    {
        "changedFiles": {
            "lib/core/scripts.js": {
                "changes": [
                    86
                ]
            }
        },
        "project": "Bower",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/core/scripts.js b/lib/core/scripts.js\nindex 94be8ff6a..23499d21c 100644\n--- a/lib/core/scripts.js\n+++ b/lib/core/scripts.js\n@@ -83,7 +83,8 @@ var hook = function (action, ordered, config, logger, packages, installed, json)\n     }\n \n     var orderedPackages = ordered ? orderByDependencies(packages, installed, json) : mout.object.keys(packages);\n-    var cmdString = mout.string.replace(config.scripts[action], '%', orderedPackages.join(' '));\n+    var placeholder = new RegExp('%', 'g');\n+    var cmdString = mout.string.replace(config.scripts[action], placeholder, orderedPackages.join(' '));\n     return run(cmdString, action, logger, config);\n };\n \n",
        "bugId": 3,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 41
    },
    {
        "changedFiles": {
            "lib/core/Project.js": {
                "changes": [
                    89,
                    97
                ]
            }
        },
        "project": "Bower",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 3,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/core/Project.js b/lib/core/Project.js\nindex 3779819a1..895d9a452 100644\n--- a/lib/core/Project.js\n+++ b/lib/core/Project.js\n@@ -86,7 +86,7 @@ Project.prototype.install = function (decEndpoints, options, config) {\n     })\n     .then(function (installed) {\n         // Handle save and saveDev options\n-        if (that._options.save || that._options.saveDev) {\n+        if (that._options.save || that._options.saveDev || that._options.saveExact) {\n             // Cycle through the specified endpoints\n             decEndpoints.forEach(function (decEndpoint) {\n                 var jsonEndpoint;\n@@ -94,15 +94,17 @@ Project.prototype.install = function (decEndpoints, options, config) {\n                 jsonEndpoint = endpointParser.decomposed2json(decEndpoint);\n \n                 if (that._options.saveExact) {\n-                    jsonEndpoint[decEndpoint.name] = decEndpoint.pkgMeta.version;\n-                }\n-\n-                if (that._options.save) {\n-                    that._json.dependencies = mout.object.mixIn(that._json.dependencies || {}, jsonEndpoint);\n+                    if (decEndpoint.name !== decEndpoint.source) {\n+                        jsonEndpoint[decEndpoint.name] = decEndpoint.source + '#' + decEndpoint.pkgMeta.version;\n+                    } else {\n+                        jsonEndpoint[decEndpoint.name] = decEndpoint.pkgMeta.version;\n+                    }\n                 }\n \n                 if (that._options.saveDev) {\n                     that._json.devDependencies = mout.object.mixIn(that._json.devDependencies || {}, jsonEndpoint);\n+                } else {\n+                    that._json.dependencies = mout.object.mixIn(that._json.dependencies || {}, jsonEndpoint);\n                 }\n             });\n         }\n",
        "bugId": 2,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "IF-CC",
            "IF-APC",
            "IF-ABR"
        ],
        "failingTests": 43
    },
    {
        "changedFiles": {
            "lib/core/PackageRepository.js": {
                "changes": [
                    49,
                    174,
                    177
                ],
                "deletes": [
                    177
                ]
            },
            "lib/core/resolvers/Resolver.js": {
                "insert": [
                    117
                ]
            }
        },
        "project": "Bower",
        "metrics": {
            "files": 2,
            "sizeInLines": 27,
            "linesRem": 2,
            "linesAdd": 22,
            "chunks": 5,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/core/PackageRepository.js b/lib/core/PackageRepository.js\nindex 902889d21..39018ee6f 100644\n--- a/lib/core/PackageRepository.js\n+++ b/lib/core/PackageRepository.js\n@@ -46,7 +46,11 @@ PackageRepository.prototype.fetch = function (decEndpoint) {\n         info.resolver = resolver;\n         isTargetable = resolver.constructor.isTargetable;\n \n-        // If force flag is used, bypass cache\n+        if (resolver.isNotCacheable()) {\n+            return that._resolve(resolver, logger);\n+        }\n+\n+        // If force flag is used, bypass cache, but write to cache anyway\n         if (that._config.force) {\n             logger.action('resolve', resolver.getSource() + '#' + resolver.getTarget());\n             return that._resolve(resolver, logger);\n@@ -171,12 +175,11 @@ PackageRepository.prototype._resolve = function (resolver, logger) {\n     return resolver.resolve()\n     // Store in the cache\n     .then(function (canonicalDir) {\n-        // We don't want to cache moving targets like branches\n-        if (resolver._resolution && resolver._resolution.type === 'branch') {\n+        if (resolver.isNotCacheable()) {\n             return canonicalDir;\n-        } else {\n-            return that._resolveCache.store(canonicalDir, resolver.getPkgMeta());\n         }\n+\n+        return that._resolveCache.store(canonicalDir, resolver.getPkgMeta());\n     })\n     // Resolve promise with canonical dir and package meta\n     .then(function (dir) {\ndiff --git a/lib/core/resolvers/Resolver.js b/lib/core/resolvers/Resolver.js\nindex f5dc47632..4fa2072a9 100644\n--- a/lib/core/resolvers/Resolver.js\n+++ b/lib/core/resolvers/Resolver.js\n@@ -114,6 +114,26 @@ Resolver.prototype.resolve = function () {\n     });\n };\n \n+Resolver.prototype.isNotCacheable = function () {\n+    // Bypass cache for local dependencies\n+    if (this._source &&\n+        /^(?:file:[\\/\\\\]{2})?\\.?\\.?[\\/\\\\]/.test(this._source)\n+    ) {\n+        return true;\n+    }\n+\n+    // We don't want to cache moving targets like branches\n+    if (this._pkgMeta &&\n+        this._pkgMeta._resolution &&\n+        this._pkgMeta._resolution.type === 'branch')\n+    {\n+        return true;\n+    }\n+\n+    return false;\n+};\n+\n+\n // -----------------\n \n // Abstract functions that must be implemented by concrete resolvers\n",
        "bugId": 1,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-APCJ",
            "IF-CC",
            "IF-RBR"
        ],
        "failingTests": 50
    },
    {
        "changedFiles": {
            "lib/rules/padded-blocks.js": {
                "insert": [
                    191
                ]
            },
            "lib/util/source-code-fixer.js": {
                "changes": [
                    111
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/padded-blocks.js b/lib/rules/padded-blocks.js\nindex 094ba0a715..27657360e9 100644\n--- a/lib/rules/padded-blocks.js\n+++ b/lib/rules/padded-blocks.js\n@@ -188,6 +188,9 @@ module.exports = {\n                         node,\n                         loc: { line: openBrace.loc.start.line, column: openBrace.loc.start.column },\n                         fix(fixer) {\n+\n+                            // FIXME: The start of this range is sometimes larger than the end.\n+                            // https://github.com/eslint/eslint/issues/8116\n                             return fixer.replaceTextRange([openBrace.end, nextToken.start - nextToken.loc.start.column], \"\\n\");\n                         },\n                         message: NEVER_MESSAGE\ndiff --git a/lib/util/source-code-fixer.js b/lib/util/source-code-fixer.js\nindex 8b8936204c..ab42e95292 100644\n--- a/lib/util/source-code-fixer.js\n+++ b/lib/util/source-code-fixer.js\n@@ -108,7 +108,13 @@ SourceCodeFixer.applyFixes = function(sourceCode, messages) {\n             // Make output to this fix.\n             output += text.slice(Math.max(0, lastPos), Math.max(0, start));\n             output += fix.text;\n-            lastPos = end;\n+\n+            /*\n+             * If the start of the range is larger than the end for some reason, make sure\n+             * the text between the end and the start doesn't get duplicated.\n+             * https://github.com/eslint/eslint/issues/8116\n+             */\n+            lastPos = Math.max(start, end);\n         }\n         output += text.slice(Math.max(0, lastPos));\n \n",
        "bugId": 333,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/operator-assignment.js": {
                "changes": [
                    30
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/operator-assignment.js b/lib/rules/operator-assignment.js\nindex e003478c7b..c5b82f5b0f 100644\n--- a/lib/rules/operator-assignment.js\n+++ b/lib/rules/operator-assignment.js\n@@ -27,7 +27,7 @@ function isCommutativeOperatorWithShorthand(operator) {\n  *     a shorthand form.\n  */\n function isNonCommutativeOperatorWithShorthand(operator) {\n-    return [\"+\", \"-\", \"/\", \"%\", \"<<\", \">>\", \">>>\"].indexOf(operator) >= 0;\n+    return [\"+\", \"-\", \"/\", \"%\", \"<<\", \">>\", \">>>\", \"**\"].indexOf(operator) >= 0;\n }\n \n //------------------------------------------------------------------------------\n",
        "bugId": 332,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/config/config-file.js": {
                "changes": [
                    385
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/config/config-file.js b/lib/config/config-file.js\nindex ff416095fa..e68591874c 100644\n--- a/lib/config/config-file.js\n+++ b/lib/config/config-file.js\n@@ -382,7 +382,7 @@ function applyExtends(config, filePath, relativeTo) {\n              * file as the reference point. Otherwise, use as-is.\n              */\n             parentPath = (!isAbsolutePath(parentPath) ?\n-                path.join(path.dirname(filePath), parentPath) :\n+                path.join(relativeTo || path.dirname(filePath), parentPath) :\n                 parentPath\n             );\n         }\n",
        "bugId": 331,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/semi-spacing.js": {
                "insert": [
                    60
                ],
                "changes": [
                    91
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 0,
            "linesAdd": 14,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/semi-spacing.js b/lib/rules/semi-spacing.js\nindex 3076d1f838..1e313e64aa 100644\n--- a/lib/rules/semi-spacing.js\n+++ b/lib/rules/semi-spacing.js\n@@ -57,6 +57,20 @@ module.exports = function(context) {\n         return !(tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter));\n     }\n \n+    /**\n+     * Checks if the next token of a given token is a closing parenthesis.\n+     * @param {Token} token The token to check.\n+     * @returns {boolean} Whether or not the next token of a given token is a closing parenthesis.\n+     */\n+    function isBeforeClosingParen(token) {\n+        var nextToken = context.getTokenAfter(token);\n+        return (\n+            nextToken &&\n+            nextToken.type === \"Punctuator\" &&\n+            (nextToken.value === \"}\" || nextToken.value === \")\")\n+        );\n+    }\n+\n     /**\n      * Checks if the given token is a semicolon.\n      * @param {Token} token The token to check.\n@@ -88,7 +102,7 @@ module.exports = function(context) {\n                 }\n             }\n \n-            if (!isLastTokenInCurrentLine(token)) {\n+            if (!isLastTokenInCurrentLine(token) && !isBeforeClosingParen(token)) {\n                 if (hasTrailingSpace(token)) {\n                     if (!requireSpaceAfter) {\n                         context.report(node, location, \"Unexpected whitespace after semicolon.\");\n",
        "bugId": 330,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC",
            "MD-ADD"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/quotes.js": {
                "changes": [
                    261
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/quotes.js b/lib/rules/quotes.js\nindex 6dd0ed996c..5c53c76908 100644\n--- a/lib/rules/quotes.js\n+++ b/lib/rules/quotes.js\n@@ -258,7 +258,11 @@ module.exports = {\n                     return;\n                 }\n \n-                const shouldWarn = node.quasis.length === 1 && (node.quasis[0].value.cooked.indexOf(\"\\n\") === -1);\n+                /*\n+                 * A warning should be produced if the template literal only has one TemplateElement, and has no unescaped newlines.\n+                 * An unescaped newline is a newline preceded by an even number of backslashes.\n+                 */\n+                const shouldWarn = node.quasis.length === 1 && !/(^|[^\\\\])(\\\\\\\\)*[\\r\\n\\u2028\\u2029]/.test(node.quasis[0].value.raw);\n \n                 if (shouldWarn) {\n                     context.report({\n",
        "bugId": 329,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/lines-around-comment.js": {
                "changes": [
                    61
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/lines-around-comment.js b/lib/rules/lines-around-comment.js\nindex 912b851d03..3683625710 100644\n--- a/lib/rules/lines-around-comment.js\n+++ b/lib/rules/lines-around-comment.js\n@@ -58,8 +58,8 @@ module.exports = function(context) {\n     var options = context.options[0] || {};\n     options.beforeLineComment = options.beforeLineComment || false;\n     options.afterLineComment = options.afterLineComment || false;\n-    options.beforeBlockComment = options.beforeBlockComment || false;\n-    options.afterBlockComment = typeof options.afterBlockComment !== \"undefined\" ? options.afterBlockComment : true;\n+    options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;\n+    options.afterBlockComment = options.afterBlockComment || false;\n \n     /**\n      * Returns whether or not comments are not on lines starting with or ending with code\n",
        "bugId": 328,
        "tax": "IncorFI-CP",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 3
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "changes": [
                    171
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex 060c97ac93..c2008ed020 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -168,7 +168,7 @@ module.exports = {\n             }\n \n             if (node.type === \"ReturnStatement\") {\n-                return containsAssignment(node.argument);\n+                return node.argument && containsAssignment(node.argument);\n             } else if (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") {\n                 return containsAssignment(node.body);\n             } else {\n",
        "bugId": 327,
        "tax": "IncompFI-MIV-MNC",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-label.js": {
                "changes": [
                    113
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/no-extra-label.js b/lib/rules/no-extra-label.js\nindex 22afbf405b..b89267de93 100644\n--- a/lib/rules/no-extra-label.js\n+++ b/lib/rules/no-extra-label.js\n@@ -110,12 +110,7 @@ module.exports = {\n                             node: labelNode,\n                             message: \"This label '{{name}}' is unnecessary.\",\n                             data: labelNode,\n-                            fix(fixer) {\n-                                return fixer.replaceTextRange(\n-                                    [info.label.range[0], labelNode.range[1]],\n-                                    sourceCode.text.slice(info.label.parent.body.range[0], sourceCode.getFirstToken(node).range[1])\n-                                );\n-                            }\n+                            fix: fixer => fixer.removeRange([sourceCode.getFirstToken(node).range[1], labelNode.range[1]])\n                         });\n                     }\n                     return;\n",
        "bugId": 326,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    1213
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/linter.js b/lib/linter.js\nindex bb17ac2164..a000a69a1a 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -1210,7 +1210,7 @@ class Linter extends EventEmitter {\n             fixed = false,\n             passNumber = 0;\n         const debugTextDescription = options && options.filename || `${text.slice(0, 10)}...`;\n-        const shouldFix = options && options.fix || true;\n+        const shouldFix = options && typeof options.fix !== \"undefined\" ? options.fix : true;\n \n         /**\n          * This loop continues until one of the following is true:\n",
        "bugId": 325,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/no-shadow.js": {
                "deletes": [
                    159,
                    161
                ]
            },
            "lib/rules/no-redeclare.js": {
                "changes": [
                    38,
                    40,
                    73
                ],
                "deletes": [
                    17,
                    34,
                    71
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 28,
            "linesRem": 21,
            "linesAdd": 0,
            "chunks": 8,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/rules/no-redeclare.js b/lib/rules/no-redeclare.js\nindex 608c55a132..2911ecb2e6 100644\n--- a/lib/rules/no-redeclare.js\n+++ b/lib/rules/no-redeclare.js\n@@ -14,33 +14,15 @@ module.exports = function(context) {\n         builtinGlobals: Boolean(context.options[0] && context.options[0].builtinGlobals)\n     };\n \n-    /**\n-     * Gets the names of writeable built-in variables.\n-     * @param {escope.Scope} scope - A scope to get.\n-     * @returns {object} A map that its key is a variable name.\n-     */\n-    function getBuiltinGlobals(scope) {\n-        return scope.variables.reduce(function(retv, variable) {\n-            if (\"writeable\" in variable && variable.name !== \"__proto__\") {\n-                retv[variable.name] = true;\n-            }\n-            return retv;\n-        }, Object.create(null));\n-    }\n-\n     /**\n      * Find variables in a given scope and flag redeclared ones.\n      * @param {Scope} scope - An escope scope object.\n-     * @param {object} builtins - A map that its key is a variable name.\n      * @returns {void}\n      * @private\n      */\n-    function findVariablesInScope(scope, builtins) {\n+    function findVariablesInScope(scope) {\n         scope.variables.forEach(function(variable) {\n-            var hasBuiltin = (\n-                options.builtinGlobals &&\n-                (\"writeable\" in variable || Boolean(builtins && builtins[variable.name]))\n-            );\n+            var hasBuiltin = options.builtinGlobals && \"writeable\" in variable;\n             var count = (hasBuiltin ? 1 : 0) + variable.identifiers.length;\n \n             if (count >= 2) {\n@@ -68,10 +50,8 @@ module.exports = function(context) {\n         var scope = context.getScope();\n \n         // Nodejs env or modules has a special scope.\n-        // But built-in global variables are not there.\n         if (context.ecmaFeatures.globalReturn || context.ecmaFeatures.modules) {\n-            var builtins = (options.builtinGlobals ? getBuiltinGlobals(scope) : null);\n-            findVariablesInScope(scope.childScopes[0], builtins);\n+            findVariablesInScope(scope.childScopes[0]);\n         } else {\n             findVariablesInScope(scope);\n         }\ndiff --git a/lib/rules/no-shadow.js b/lib/rules/no-shadow.js\nindex 87c54eed10..e98063395b 100644\n--- a/lib/rules/no-shadow.js\n+++ b/lib/rules/no-shadow.js\n@@ -156,12 +156,7 @@ module.exports = function(context) {\n \n     return {\n         \"Program:exit\": function() {\n-            // Nodejs env or modules has a special scope for globals.\n             var globalScope = context.getScope();\n-            if (context.ecmaFeatures.globalReturn || context.ecmaFeatures.modules) {\n-                globalScope = globalScope.childScopes[0];\n-            }\n-\n             var stack = globalScope.childScopes.slice();\n             var scope;\n \n",
        "bugId": 324,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DNP",
            "AS-CE",
            "IF-RMV",
            "AS-CE"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "changes": [
                    65
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex de58e44e93..ec7274b63e 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -62,7 +62,7 @@ module.exports = function(context) {\n             var node = definition.node;\n             if (node.type === \"VariableDeclarator\") {\n                 node = node.parent;\n-            } else if (definition.type === \"Parameter\" && node.type === \"FunctionDeclaration\") {\n+            } else if (definition.type === \"Parameter\") {\n                 return false;\n             }\n \n",
        "bugId": 323,
        "tax": "IncorFI-IncorIV-UTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 17
    },
    {
        "changedFiles": {
            "lib/rules/array-callback-return.js": {
                "changes": [
                    188
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/array-callback-return.js b/lib/rules/array-callback-return.js\nindex d85ba0422d..1713125a7a 100644\n--- a/lib/rules/array-callback-return.js\n+++ b/lib/rules/array-callback-return.js\n@@ -185,7 +185,9 @@ module.exports = {\n                     shouldCheck:\n                         TARGET_NODE_TYPE.test(node.type) &&\n                         node.body.type === \"BlockStatement\" &&\n-                        isCallbackOfArrayMethod(node)\n+                        isCallbackOfArrayMethod(node) &&\n+                        !node.async &&\n+                        !node.generator\n                 };\n             },\n \n",
        "bugId": 322,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/nonblock-statement-body-position.js": {
                "changes": [
                    80
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/nonblock-statement-body-position.js b/lib/rules/nonblock-statement-body-position.js\nindex d6ee126da6..212e36a57c 100644\n--- a/lib/rules/nonblock-statement-body-position.js\n+++ b/lib/rules/nonblock-statement-body-position.js\n@@ -77,7 +77,7 @@ module.exports = {\n                     message: \"Expected a linebreak before this statement.\",\n                     fix: fixer => fixer.insertTextBefore(node, \"\\n\")\n                 });\n-            } else if (tokenBefore.loc.end.line !== node.loc.end.line && option === \"beside\") {\n+            } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {\n                 context.report({\n                     node,\n                     message: \"Expected no linebreak before this statement.\",\n",
        "bugId": 321,
        "tax": "G-T",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-extend-native.js": {
                "changes": [
                    57,
                    64,
                    67
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/no-extend-native.js b/lib/rules/no-extend-native.js\nindex 2cf9af895e..dc7b3e30d6 100644\n--- a/lib/rules/no-extend-native.js\n+++ b/lib/rules/no-extend-native.js\n@@ -54,17 +54,17 @@ module.exports = function(context) {\n             });\n         },\n \n-        // handle the Object.defineProperty(Array.prototype) case\n+        // handle the Object.definePropert[y|ies](Array.prototype) case\n         \"CallExpression\": function(node) {\n \n             var callee = node.callee,\n                 subject,\n                 object;\n \n-            // only worry about Object.defineProperty\n+            // only worry about Object.definePropert[y|ies]\n             if (callee.type === \"MemberExpression\" &&\n                 callee.object.name === \"Object\" &&\n-                callee.property.name === \"defineProperty\") {\n+                (callee.property.name === \"defineProperty\" || callee.property.name === \"defineProperties\")) {\n \n                 // verify the object being added to is a native prototype\n                 subject = node.arguments[0];\n",
        "bugId": 320,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 17
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    267,
                    270
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex bf67635e1b..e0ad2005ac 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -264,10 +264,10 @@ module.exports = {\n \n             lastNodeCheckEndOffset = lastNodeCheckEndOffset || 0;\n \n-            const desiredIndent = (indentType === \"space\" ? \" \" : \"\\t\").repeat(needed - lastNodeCheckEndOffset);\n+            const desiredIndent = (indentType === \"space\" ? \" \" : \"\\t\").repeat(needed);\n \n             const textRange = isLastNodeCheck\n-                ? [node.range[1] - gottenSpaces - gottenTabs - 1, node.range[1] - 1 - lastNodeCheckEndOffset]\n+                ? [node.range[1] - gottenSpaces - gottenTabs - 1 - lastNodeCheckEndOffset, node.range[1] - 1 - lastNodeCheckEndOffset]\n                 : [node.range[0] - gottenSpaces - gottenTabs, node.range[0]];\n \n             context.report({\n",
        "bugId": 319,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/use-isnan.js": {
                "insert": [
                    4
                ],
                "changes": [
                    10,
                    15
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 3,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/use-isnan.js b/lib/rules/use-isnan.js\nindex 015f069a3f..8a99100b06 100644\n--- a/lib/rules/use-isnan.js\n+++ b/lib/rules/use-isnan.js\n@@ -1,20 +1,21 @@\n /**\n  * @fileoverview Rule to flag comparisons to the value NaN\n  * @author James Allardice\n+ * @copyright 2014 Jordan Harband. All rights reserved.\n+ * @copyright 2013 James Allardice. All rights reserved.\n  */\n \n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n \n-module.exports = function(context) {\n+module.exports = function (context) {\n \n     \"use strict\";\n \n     return {\n-        \"BinaryExpression\": function(node) {\n-\n-            if (!/^[|&^]$/.test(node.operator) && node.left.name === \"NaN\" || node.right.name === \"NaN\") {\n+        \"BinaryExpression\": function (node) {\n+            if (/^[<>]=?|^===?|^!==?$/.test(node.operator) && (node.left.name === \"NaN\" || node.right.name === \"NaN\")) {\n                 context.report(node, \"Use the isNaN function to compare with NaN.\");\n             }\n         }\n",
        "bugId": 318,
        "tax": "IncorFI-IncorDP-IncorTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/space-unary-ops.js": {
                "changes": [
                    291
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/space-unary-ops.js b/lib/rules/space-unary-ops.js\nindex 5b156fac22..d9998370bd 100644\n--- a/lib/rules/space-unary-ops.js\n+++ b/lib/rules/space-unary-ops.js\n@@ -288,9 +288,11 @@ module.exports = {\n         * @returns {void}\n         */\n         function checkForSpaces(node) {\n-            const tokens = sourceCode.getFirstTokens(node, 2),\n-                firstToken = tokens[0],\n-                secondToken = tokens[1];\n+            const tokens = node.type === \"UpdateExpression\" && !node.prefix\n+                ? sourceCode.getLastTokens(node, 2)\n+                : sourceCode.getFirstTokens(node, 2);\n+            const firstToken = tokens[0];\n+            const secondToken = tokens[1];\n \n             if ((node.type === \"NewExpression\" || node.prefix) && firstToken.type === \"Keyword\") {\n                 checkUnaryWordOperatorForSpaces(node, firstToken, secondToken);\n",
        "bugId": 317,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/semi-spacing.js": {
                "insert": [
                    209
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 4,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/semi-spacing.js b/lib/rules/semi-spacing.js\nindex 4fe95fbf20..854abbe39a 100644\n--- a/lib/rules/semi-spacing.js\n+++ b/lib/rules/semi-spacing.js\n@@ -206,6 +206,10 @@ module.exports = {\n             DebuggerStatement: checkNode,\n             ReturnStatement: checkNode,\n             ThrowStatement: checkNode,\n+            ImportDeclaration: checkNode,\n+            ExportNamedDeclaration: checkNode,\n+            ExportAllDeclaration: checkNode,\n+            ExportDefaultDeclaration: checkNode,\n             ForStatement(node) {\n                 if (node.init) {\n                     checkSemicolonSpacing(sourceCode.getTokenAfter(node.init), node);\n",
        "bugId": 316,
        "tax": "G-VI-MVI",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 32
    },
    {
        "changedFiles": {
            "lib/rules/no-await-in-loop.js": {
                "changes": [
                    87
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-await-in-loop.js b/lib/rules/no-await-in-loop.js\nindex d0a2a58935..ef0bda90bf 100644\n--- a/lib/rules/no-await-in-loop.js\n+++ b/lib/rules/no-await-in-loop.js\n@@ -84,7 +84,7 @@ module.exports = {\n             while (parent && !isBoundary(parent)) {\n                 if (isLooped(node, parent)) {\n                     context.report({\n-                        node,\n+                        node: awaitNode,\n                         messageId: \"unexpectedAwait\"\n                     });\n                     return;\n",
        "bugId": 315,
        "tax": "G-VI-MVI",
        "pan_cat": [
            "CF-CHG",
            "CF-ADD"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-return-assign.js": {
                "changes": [
                    23
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-return-assign.js b/lib/rules/no-return-assign.js\nindex e90a4e3dc0..38fc1cb0eb 100644\n--- a/lib/rules/no-return-assign.js\n+++ b/lib/rules/no-return-assign.js\n@@ -20,7 +20,7 @@ function isEnclosedInParens(node, sourceCode) {\n     var prevToken = sourceCode.getTokenBefore(node);\n     var nextToken = sourceCode.getTokenAfter(node);\n \n-    return prevToken.value === \"(\" && nextToken.value === \")\";\n+    return prevToken && prevToken.value === \"(\" && nextToken && nextToken.value === \")\";\n }\n \n //------------------------------------------------------------------------------\n",
        "bugId": 314,
        "tax": "IncompFI-MIV-MNC",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    112,
                    176,
                    182
                ],
                "deletes": [
                    42
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 12
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 74d4ef388c..2462ef1c33 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -39,7 +39,6 @@ module.exports = function(context) {\n     var MESSAGE = \"Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.\";\n     var DEFAULT_VARIABLE_INDENT = 1;\n \n-    var extraColumnStart = 0;\n     var indentType = \"space\";\n     var indentSize = 4;\n     var options = {\n@@ -109,16 +108,8 @@ module.exports = function(context) {\n      * @returns {int} Indent\n      */\n     function getNodeIndent(node, byLastLine, excludeCommas) {\n-        byLastLine = byLastLine || false;\n-        excludeCommas = excludeCommas || false;\n-\n-        var src = context.getSource(node, node.loc.start.column + extraColumnStart);\n-        var lines = src.split(\"\\n\");\n-        if (byLastLine) {\n-            src = lines[lines.length - 1];\n-        } else {\n-            src = lines[0];\n-        }\n+        var token = byLastLine ? context.getLastToken(node) : context.getFirstToken(node);\n+        var src = context.getSource(token, token.loc.start.column);\n \n         var skip = excludeCommas ? \",\" : \"\";\n \n@@ -173,13 +164,15 @@ module.exports = function(context) {\n      * @returns {void}\n      */\n     function checkLastNodeLineIndent(node, lastLineIndent) {\n-        var endIndent = getNodeIndent(node, true);\n+        var lastToken = context.getLastToken(node);\n+        var endIndent = getNodeIndent(lastToken, true);\n+\n         if (endIndent !== lastLineIndent && isNodeFirstInLine(node, true)) {\n             report(\n                 node,\n                 lastLineIndent,\n                 endIndent,\n-                { line: node.loc.end.line, column: node.loc.end.column }\n+                { line: lastToken.loc.start.line, column: lastToken.loc.start.column }\n             );\n         }\n     }\n",
        "bugId": 313,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "insert": [
                    170,
                    369
                ],
                "changes": [
                    370,
                    398,
                    401,
                    404
                ]
            },
            "lib/ast-utils.js": {
                "insert": [
                    676
                ],
                "changes": [
                    684,
                    687,
                    695,
                    698,
                    702
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 28,
            "linesRem": 0,
            "linesAdd": 19,
            "chunks": 12,
            "linesMod": 9
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex 189bc56921..de92fe0811 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -673,6 +673,8 @@ module.exports = {\n                     case \"/\":\n                     case \"%\":\n                         return 13;\n+                    case \"**\":\n+                        return 15;\n \n                     // no default\n                 }\n@@ -681,10 +683,10 @@ module.exports = {\n \n             case \"UnaryExpression\":\n             case \"AwaitExpression\":\n-                return 14;\n+                return 16;\n \n             case \"UpdateExpression\":\n-                return 15;\n+                return 17;\n \n             case \"CallExpression\":\n \n@@ -692,14 +694,14 @@ module.exports = {\n                 if (node.callee.type === \"FunctionExpression\") {\n                     return -1;\n                 }\n-                return 16;\n+                return 18;\n \n             case \"NewExpression\":\n-                return 17;\n+                return 19;\n \n             // no default\n         }\n-        return 18;\n+        return 20;\n     },\n \n     /**\ndiff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex 7de1306d82..a39d823189 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -167,6 +167,19 @@ module.exports = {\n             return false;\n         }\n \n+        /**\n+         * Determines if a constructor function is newed-up with parens\n+         * @param {ASTNode} newExpression - The NewExpression node to be checked.\n+         * @returns {boolean} True if the constructor is called with parens.\n+         * @private\n+         */\n+        function isNewExpressionWithParens(newExpression) {\n+            const lastToken = sourceCode.getLastToken(newExpression);\n+            const penultimateToken = sourceCode.getTokenBefore(lastToken);\n+\n+            return newExpression.arguments.length > 0 || penultimateToken.value === \"(\" && lastToken.value === \")\";\n+        }\n+\n         /**\n          * Determines if a node is or contains an assignment expression\n          * @param {ASTNode} node - The node to be checked.\n@@ -353,6 +366,10 @@ module.exports = {\n          * @private\n          */\n         function dryUnaryUpdate(node) {\n+            if (node.type === \"UnaryExpression\" && node.argument.type === \"BinaryExpression\" && node.argument.operator === \"**\") {\n+                return;\n+            }\n+\n             if (hasExcessParens(node.argument) && precedence(node.argument) >= precedence(node)) {\n                 report(node.argument);\n             }\n@@ -367,7 +384,8 @@ module.exports = {\n         function dryCallNew(node) {\n             if (hasExcessParens(node.callee) && precedence(node.callee) >= precedence(node) && !(\n                 node.type === \"CallExpression\" &&\n-                node.callee.type === \"FunctionExpression\" &&\n+                (node.callee.type === \"FunctionExpression\" ||\n+                  node.callee.type === \"NewExpression\" && !isNewExpressionWithParens(node.callee)) &&\n \n                 // One set of parentheses are allowed for a function expression\n                 !hasDoubleExcessParens(node.callee)\n@@ -395,13 +413,17 @@ module.exports = {\n          */\n         function dryBinaryLogical(node) {\n             const prec = precedence(node);\n-            const shouldSkipLeft = NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\");\n+            const leftPrecedence = precedence(node.left);\n+            const rightPrecedence = precedence(node.right);\n+            const isExponentiation = node.operator === \"**\";\n+            const shouldSkipLeft = (NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\")) ||\n+              node.left.type === \"UnaryExpression\" && isExponentiation;\n             const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");\n \n-            if (!shouldSkipLeft && hasExcessParens(node.left) && precedence(node.left) >= prec) {\n+            if (!shouldSkipLeft && hasExcessParens(node.left) && (leftPrecedence > prec || (leftPrecedence === prec && !isExponentiation))) {\n                 report(node.left);\n             }\n-            if (!shouldSkipRight && hasExcessParens(node.right) && precedence(node.right) > prec) {\n+            if (!shouldSkipRight && hasExcessParens(node.right) && (rightPrecedence > prec || (rightPrecedence === prec && isExponentiation))) {\n                 report(node.right);\n             }\n         }\n",
        "bugId": 312,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "SW-ARSB",
            "Return",
            "Return",
            "Return",
            "Return",
            "Return"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-escape.js": {
                "changes": [
                    28,
                    197
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/no-useless-escape.js b/lib/rules/no-useless-escape.js\nindex c7c785e89e..b9266bbbaf 100644\n--- a/lib/rules/no-useless-escape.js\n+++ b/lib/rules/no-useless-escape.js\n@@ -25,8 +25,7 @@ function union(setA, setB) {\n }\n \n const VALID_STRING_ESCAPES = new Set(\"\\\\nrvtbfux\\n\\r\\u2028\\u2029\");\n-const REGEX_GENERAL_ESCAPES = new Set(\"\\\\bcdDfnrsStvwWxu0123456789\");\n-const REGEX_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set(\"]\"));\n+const REGEX_GENERAL_ESCAPES = new Set(\"\\\\bcdDfnrsStvwWxu0123456789]\");\n const REGEX_NON_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set(\"^/.$*+?[{}|()B\"));\n \n /**\n@@ -194,7 +193,7 @@ module.exports = {\n                     .filter(charInfo => charInfo.escaped)\n \n                     // Filter out characters that are valid to escape, based on their position in the regular expression.\n-                    .filter(charInfo => !(charInfo.inCharClass ? REGEX_CHARCLASS_ESCAPES : REGEX_NON_CHARCLASS_ESCAPES).has(charInfo.text))\n+                    .filter(charInfo => !(charInfo.inCharClass ? REGEX_GENERAL_ESCAPES : REGEX_NON_CHARCLASS_ESCAPES).has(charInfo.text))\n \n                     // Report all the remaining characters.\n                     .forEach(charInfo => report(node, charInfo.index, charInfo.text));\n",
        "bugId": 311,
        "tax": "IncorFI-IncorHRE",
        "pan_cat": [
            "AS-CE",
            "MC-DAP"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/cli.js": {
                "insert": [
                    31
                ],
                "changes": [
                    55
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 12,
            "linesRem": 0,
            "linesAdd": 11,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/cli.js b/lib/cli.js\nindex 530bfbc423..d398477184 100644\n--- a/lib/cli.js\n+++ b/lib/cli.js\n@@ -28,6 +28,17 @@ const debug = require(\"debug\")(\"eslint:cli\");\n // Helpers\n //------------------------------------------------------------------------------\n \n+/**\n+ * Predicate function for whether or not to apply fixes in quiet mode.\n+ * If a message is a warning, do not apply a fix.\n+ * @param {LintResult} lintResult The lint result.\n+ * @returns {boolean} True if the lint message is an error (and thus should be\n+ * autofixed), false otherwise.\n+ */\n+function quietFixPredicate(lintResult) {\n+    return lintResult.severity === 2;\n+}\n+\n /**\n  * Translates the CLI options into the options expected by the CLIEngine.\n  * @param {Object} cliOptions The CLI options to translate.\n@@ -52,7 +63,7 @@ function translateOptions(cliOptions) {\n         cache: cliOptions.cache,\n         cacheFile: cliOptions.cacheFile,\n         cacheLocation: cliOptions.cacheLocation,\n-        fix: cliOptions.fix,\n+        fix: cliOptions.fix && (cliOptions.quiet ? quietFixPredicate : true),\n         allowInlineConfig: cliOptions.inlineConfig\n     };\n }\n",
        "bugId": 310,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/object-shorthand.js": {
                "changes": [
                    112
                ],
                "deletes": [
                    139
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/object-shorthand.js b/lib/rules/object-shorthand.js\nindex 4c7c066bcd..30486c57fe 100644\n--- a/lib/rules/object-shorthand.js\n+++ b/lib/rules/object-shorthand.js\n@@ -109,7 +109,7 @@ module.exports = {\n                 }\n \n                 // only computed methods can fail the following checks\n-                if (!APPLY_TO_METHODS && node.computed) {\n+                if (node.computed && node.value.type !== \"FunctionExpression\") {\n                     return;\n                 }\n \n@@ -136,6 +136,5 @@ module.exports = {\n                 }\n             }\n         };\n-\n     }\n };\n",
        "bugId": 309,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/newline-before-return.js": {
                "changes": [
                    158
                ],
                "deletes": [
                    136
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 20,
            "linesRem": 16,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/newline-before-return.js b/lib/rules/newline-before-return.js\nindex 77f3aedaa8..5c8a139358 100644\n--- a/lib/rules/newline-before-return.js\n+++ b/lib/rules/newline-before-return.js\n@@ -133,32 +133,17 @@ module.exports = {\n             return (lineNumNode - lineNumTokenBefore - commentLines) > 1;\n         }\n \n-        /**\n-         * Reports expected/unexpected newline before return statement\n-         * @param {ASTNode} node - the node to report in the event of an error\n-         * @param {boolean} isExpected - whether the newline is expected or not\n-         * @returns {void}\n-         * @private\n-         */\n-        function reportError(node, isExpected) {\n-            var expected = isExpected ? \"Expected\" : \"Unexpected\";\n-\n-            context.report({\n-                node: node,\n-                message: expected + \" newline before return statement.\"\n-            });\n-        }\n-\n         //--------------------------------------------------------------------------\n         // Public\n         //--------------------------------------------------------------------------\n \n         return {\n             ReturnStatement: function(node) {\n-                if (isFirstNode(node) && hasNewlineBefore(node)) {\n-                    reportError(node, false);\n-                } else if (!isFirstNode(node) && !hasNewlineBefore(node)) {\n-                    reportError(node, true);\n+                if (!isFirstNode(node) && !hasNewlineBefore(node)) {\n+                    context.report({\n+                        node: node,\n+                        message: \"Expected newline before return statement.\"\n+                    });\n                 }\n             }\n         };\n",
        "bugId": 308,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "IF-CC",
            "IF-RBR",
            "MD-RMV",
            "SQ-AROB",
            "SQ-AROB"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-multi-spaces.js": {
                "changes": [
                    79
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-multi-spaces.js b/lib/rules/no-multi-spaces.js\nindex 73e514335c..84f1b50189 100644\n--- a/lib/rules/no-multi-spaces.js\n+++ b/lib/rules/no-multi-spaces.js\n@@ -76,8 +76,11 @@ module.exports = {\n                     }\n                     const rightToken = tokensAndComments[leftIndex + 1];\n \n-                    // Ignore tokens that have less than 2 spaces between them or are on different lines\n-                    if (leftToken.range[1] + 2 > rightToken.range[0] || leftToken.loc.end.line < rightToken.loc.start.line) {\n+                    // Ignore tokens that don't have 2 spaces between them or are on different lines\n+                    if (\n+                        !sourceCode.text.slice(leftToken.range[1], rightToken.range[0]).includes(\"  \") ||\n+                        leftToken.loc.end.line < rightToken.loc.start.line\n+                    ) {\n                         return;\n                     }\n \n",
        "bugId": 307,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/no-trailing-spaces.js": {
                "changes": [
                    52
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-trailing-spaces.js b/lib/rules/no-trailing-spaces.js\nindex b5d2f8d1b5..598bbea4f9 100644\n--- a/lib/rules/no-trailing-spaces.js\n+++ b/lib/rules/no-trailing-spaces.js\n@@ -49,7 +49,7 @@ module.exports = {\n \n         const options = context.options[0] || {},\n             skipBlankLines = options.skipBlankLines || false,\n-            ignoreComments = typeof options.ignoreComments === \"undefined\" || options.ignoreComments;\n+            ignoreComments = typeof options.ignoreComments === \"boolean\" && options.ignoreComments;\n \n         /**\n          * Report the error message\n",
        "bugId": 306,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-constant-condition.js": {
                "changes": [
                    141,
                    153
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-constant-condition.js b/lib/rules/no-constant-condition.js\nindex 31e5b372c4..0cd445dfdb 100644\n--- a/lib/rules/no-constant-condition.js\n+++ b/lib/rules/no-constant-condition.js\n@@ -138,7 +138,7 @@ module.exports = {\n         function checkConstantConditionLoopInSet(node) {\n             if (loopsInCurrentScope.has(node)) {\n                 loopsInCurrentScope.delete(node);\n-                context.report({ node, message: \"Unexpected constant condition.\" });\n+                context.report({ node: node.test, message: \"Unexpected constant condition.\" });\n             }\n         }\n \n@@ -150,7 +150,7 @@ module.exports = {\n          */\n         function reportIfConstant(node) {\n             if (node.test && isConstant(node.test, true)) {\n-                context.report({ node, message: \"Unexpected constant condition.\" });\n+                context.report({ node: node.test, message: \"Unexpected constant condition.\" });\n             }\n         }\n \n",
        "bugId": 305,
        "tax": "IncorFI-IncorO",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-cond-assign.js": {
                "changes": [
                    41,
                    45
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-cond-assign.js b/lib/rules/no-cond-assign.js\nindex 2dc6251e39..ea086b99b0 100644\n--- a/lib/rules/no-cond-assign.js\n+++ b/lib/rules/no-cond-assign.js\n@@ -38,11 +38,11 @@ module.exports = function(context) {\n     function findConditionalAncestor(node) {\n         var currentAncestor = node;\n \n-        while ((currentAncestor = currentAncestor.parent)) {\n+        do {\n             if (isConditionalTestExpression(currentAncestor)) {\n                 return currentAncestor.parent;\n             }\n-        }\n+        } while ((currentAncestor = currentAncestor.parent));\n \n         return null;\n     }\n",
        "bugId": 304,
        "tax": "G-L-IncorLS",
        "pan_cat": [
            "Loopchange"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "changes": [
                    429,
                    515,
                    524
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 10,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 10
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex 9f48f1d81a..fd6fd0b78b 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -426,7 +426,7 @@ module.exports = {\n                     secondToken.type === \"Keyword\" && (\n                         secondToken.value === \"function\" ||\n                         secondToken.value === \"class\" ||\n-                        secondToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(secondToken))\n+                        secondToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(secondToken, astUtils.isNotClosingParenToken))\n                     )\n                 )\n             ) {\n@@ -512,16 +512,27 @@ module.exports = {\n             ExportDefaultDeclaration: node => checkExpressionOrExportStatement(node.declaration),\n             ExpressionStatement: node => checkExpressionOrExportStatement(node.expression),\n \n-            ForInStatement(node) {\n-                if (hasExcessParens(node.right)) {\n-                    report(node.right);\n-                }\n-                if (hasExcessParens(node.left)) {\n-                    report(node.left);\n-                }\n-            },\n+            \"ForInStatement, ForOfStatement\"(node) {\n+                if (node.left.type !== \"VariableDeclarator\") {\n+                    const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n+\n+                    if (\n+                        firstLeftToken.value === \"let\" && (\n+\n+                            // If `let` is the only thing on the left side of the loop, it's the loop variable: `for ((let) of foo);`\n+                            // Removing it will cause a syntax error, because it will be parsed as the start of a VariableDeclarator.\n+                            firstLeftToken.range[1] === node.left.range[1] ||\n \n-            ForOfStatement(node) {\n+                            // If `let` is followed by a `[` token, it's a property access on the `let` value: `for ((let[foo]) of bar);`\n+                            // Removing it will cause the property access to be parsed as a destructuring declaration of `foo` instead.\n+                            astUtils.isOpeningBracketToken(\n+                                sourceCode.getTokenAfter(firstLeftToken, astUtils.isNotClosingParenToken)\n+                            )\n+                        )\n+                    ) {\n+                        tokensToIgnore.add(firstLeftToken);\n+                    }\n+                }\n                 if (hasExcessParens(node.right)) {\n                     report(node.right);\n                 }\n",
        "bugId": 303,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC",
            "MC-DNP",
            "IF-APC",
            "AS-CE",
            "IF-APC",
            "AS-CE"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/curly.js": {
                "changes": [
                    77,
                    80
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/curly.js b/lib/rules/curly.js\nindex 4fb07c53dc..ba4dac34ba 100644\n--- a/lib/rules/curly.js\n+++ b/lib/rules/curly.js\n@@ -74,10 +74,11 @@ module.exports = {\n          * @private\n          */\n         function isCollapsedOneLiner(node) {\n-            const before = sourceCode.getTokenBefore(node),\n-                last = sourceCode.getLastToken(node);\n+            const before = sourceCode.getTokenBefore(node);\n+            const last = sourceCode.getLastToken(node);\n+            const lastExcludingSemicolon = last.type === \"Punctuator\" && last.value === \";\" ? sourceCode.getTokenBefore(last) : last;\n \n-            return before.loc.start.line === last.loc.end.line;\n+            return before.loc.start.line === lastExcludingSemicolon.loc.end.line;\n         }\n \n         /**\n",
        "bugId": 302,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    730,
                    732
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 813528435f..48122eab1d 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -727,9 +727,19 @@ module.exports = {\n                         if (parent.type === \"VariableDeclarator\" && parentVarNode.loc.start.line === parent.loc.start.line) {\n                             nodeIndent = nodeIndent + (indentSize * options.VariableDeclarator[parentVarNode.parent.kind]);\n                         } else if (parent.type === \"ObjectExpression\" || parent.type === \"ArrayExpression\") {\n-                            nodeIndent += options[parent.type] * indentSize;\n+                            if (typeof options[parent.type] === \"number\") {\n+                                nodeIndent += options[parent.type] * indentSize;\n+                            } else {\n+                                const parentElements = node.parent.type === \"ObjectExpression\" ? node.parent.properties : node.parent.elements;\n+\n+                                nodeIndent = parentElements[0].loc.start.column;\n+                            }\n                         } else if (parent.type === \"CallExpression\" || parent.type === \"NewExpression\") {\n-                            nodeIndent += (typeof options.CallExpression.arguments === \"number\" ? options.CallExpression.arguments : 1) * indentSize;\n+                            if (typeof options.CallExpression.arguments === \"number\") {\n+                                nodeIndent += options.CallExpression.arguments * indentSize;\n+                            } else if (parent.arguments.indexOf(node) !== -1) {\n+                                nodeIndent = parent.arguments[0].loc.start.column;\n+                            }\n                         } else if (parent.type === \"LogicalExpression\" || parent.type === \"ArrowFunctionExpression\") {\n                             nodeIndent += indentSize;\n                         }\n",
        "bugId": 301,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APC",
            "IF-ABR",
            "IF-APC",
            "IF-ABR",
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/multiline-comment-style.js": {
                "insert": [
                    191
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/multiline-comment-style.js b/lib/rules/multiline-comment-style.js\nindex d323d882aa..cde28fd88d 100644\n--- a/lib/rules/multiline-comment-style.js\n+++ b/lib/rules/multiline-comment-style.js\n@@ -188,6 +188,11 @@ module.exports = {\n                 if (!isJSDoc(commentGroup) && commentGroup[0].type === \"Block\") {\n                     const commentLines = getCommentLines(commentGroup);\n                     const block = commentGroup[0];\n+                    const tokenAfter = sourceCode.getTokenAfter(block, { includeComments: true });\n+\n+                    if (tokenAfter && block.loc.end.line === tokenAfter.loc.start.line) {\n+                        return;\n+                    }\n \n                     context.report({\n                         loc: {\n",
        "bugId": 300,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE",
            "IF-APCJ"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "changes": [
                    63
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex 8050b823b1..51cb0db8dd 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -60,7 +60,7 @@ module.exports = {\n \n     create: function(context) {\n \n-        var MESSAGE = \"'{{name}}' is defined but never used\";\n+        var MESSAGE = \"'{{name}}' is defined but never used.\";\n \n         var config = {\n             vars: \"all\",\n",
        "bugId": 299,
        "tax": "IncorFI-IncorO",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/space-before-keywords.js": {
                "changes": [
                    182,
                    196
                ],
                "deletes": [
                    180
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 14,
            "linesRem": 1,
            "linesAdd": 7,
            "chunks": 4,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/space-before-keywords.js b/lib/rules/space-before-keywords.js\nindex 8fad811435..2f17939a6a 100644\n--- a/lib/rules/space-before-keywords.js\n+++ b/lib/rules/space-before-keywords.js\n@@ -177,15 +177,19 @@ module.exports = function(context) {\n         \"FunctionExpression\": function(node) {\n \n             var left = context.getTokenBefore(node);\n-            var right = null;\n \n-            if (left.type === \"Identifier\") {\n-                right = left;\n-                left = context.getTokenBefore(node, 1);\n-            } else {\n-                right = context.getFirstToken(node);\n+            // Check to see if the function expression is a class method\n+            if (node.parent && node.parent.type === \"MethodDefinition\") {\n+                return;\n             }\n \n+            // Check to see if the function expression is an object literal shorthand method\n+            if (node.parent && node.parent.method && node.parent.type === \"Property\") {\n+                return;\n+            }\n+\n+            var right = context.getFirstToken(node);\n+\n             checkTokens(node, left, right, { allowedPrecedingChars: [ \"(\" ] });\n         },\n         \"YieldExpression\": function(node) {\n@@ -193,7 +197,13 @@ module.exports = function(context) {\n         },\n         \"ForOfStatement\": check,\n         \"ClassBody\": function(node) {\n-            check(context.getTokenBefore(node, 1));\n+\n+            // Find the 'class' token\n+            while (node.value !== \"class\") {\n+                node = context.getTokenBefore(node);\n+            }\n+\n+            check(node);\n         },\n         \"Super\": check\n \n",
        "bugId": 298,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE",
            "IF-APCJ",
            "IF-APCJ",
            "Loopadd",
            "MC-DAP"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/object-curly-newline.js": {
                "changes": [
                    134
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/object-curly-newline.js b/lib/rules/object-curly-newline.js\nindex 42f2778739..ebad69de2e 100644\n--- a/lib/rules/object-curly-newline.js\n+++ b/lib/rules/object-curly-newline.js\n@@ -131,8 +131,15 @@ module.exports = {\n          */\n         function check(node) {\n             const options = normalizedOptions[node.type];\n-            const openBrace = sourceCode.getFirstToken(node);\n-            const closeBrace = sourceCode.getLastToken(node);\n+            const openBrace = sourceCode.getFirstToken(node, token => token.value === \"{\");\n+            let closeBrace;\n+\n+            if (node.typeAnnotation) {\n+                closeBrace = sourceCode.getTokenBefore(node.typeAnnotation);\n+            } else {\n+                closeBrace = sourceCode.getLastToken(node);\n+            }\n+\n             let first = sourceCode.getTokenAfter(openBrace, { includeComments: true });\n             let last = sourceCode.getTokenBefore(closeBrace, { includeComments: true });\n             const needsLinebreaks = (\n",
        "bugId": 297,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE",
            "IF-APC",
            "IF-ABR",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/camelcase.js": {
                "insert": [
                    125
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 8,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/camelcase.js b/lib/rules/camelcase.js\nindex b336e595dc..ba204dd594 100644\n--- a/lib/rules/camelcase.js\n+++ b/lib/rules/camelcase.js\n@@ -122,6 +122,14 @@ module.exports = {\n                         report(node);\n                     }\n \n+                // Check if it's an import specifier\n+                } else if ([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"].indexOf(node.parent.type) >= 0) {\n+\n+                    // Report only if the local imported identifier is underscored\n+                    if (node.parent.local && node.parent.local.name === node.name && isUnderscored(name)) {\n+                        report(node);\n+                    }\n+\n                 // Report anything that is underscored that isn't a CallExpression\n                 } else if (isUnderscored(name) && effectiveParent.type !== \"CallExpression\") {\n                     report(node);\n",
        "bugId": 296,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APC",
            "IF-ABR"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "changes": [
                    370,
                    373
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 8
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex dc42e74892..efa3d53bbd 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -367,15 +367,15 @@ module.exports = {\n          * @private\n          */\n         function dryBinaryLogical(node) {\n-            if (!NESTED_BINARY) {\n-                const prec = precedence(node);\n+            const prec = precedence(node);\n+            const shouldSkipLeft = NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\");\n+            const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");\n \n-                if (hasExcessParens(node.left) && precedence(node.left) >= prec) {\n-                    report(node.left);\n-                }\n-                if (hasExcessParens(node.right) && precedence(node.right) > prec) {\n-                    report(node.right);\n-                }\n+            if (!shouldSkipLeft && hasExcessParens(node.left) && precedence(node.left) >= prec) {\n+                report(node.left);\n+            }\n+            if (!shouldSkipRight && hasExcessParens(node.right) && precedence(node.right) > prec) {\n+                report(node.right);\n             }\n         }\n \n",
        "bugId": 295,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/ignored-paths.js": {
                "changes": [
                    182,
                    216
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 10,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 10
        },
        "diff": "diff --git a/lib/ignored-paths.js b/lib/ignored-paths.js\nindex cfca7fa4ff..f69e1f61fb 100644\n--- a/lib/ignored-paths.js\n+++ b/lib/ignored-paths.js\n@@ -179,7 +179,7 @@ class IgnoredPaths {\n \n         let result = false;\n         const absolutePath = path.resolve(this.options.cwd, filepath);\n-        const relativePath = pathUtil.getRelativePath(absolutePath, this.options.cwd);\n+        const relativePath = pathUtil.getRelativePath(absolutePath, this.baseDir);\n \n         if ((typeof category === \"undefined\") || (category === \"default\")) {\n             result = result || (this.ig.default.filter([relativePath]).length === 0);\n@@ -213,15 +213,7 @@ class IgnoredPaths {\n \n         const filter = ig.createFilter();\n \n-        /**\n-         * TODO\n-         * 1.\n-         * Actually, it should be `this.options.baseDir`, which is the base dir of `ignore-path`,\n-         * as well as Line 177.\n-         * But doing this leads to a breaking change and fails tests.\n-         * Related to #6759\n-         */\n-        const base = this.options.cwd;\n+        const base = this.baseDir;\n \n         return function(absolutePath) {\n             const relative = pathUtil.getRelativePath(absolutePath, base);\n",
        "bugId": 294,
        "tax": "IncompFI-CP-MTC",
        "pan_cat": [
            "MC-DAP",
            "AS-CE"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    701
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 7,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex a4258a070a..1dd41804a0 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -698,6 +698,13 @@ module.exports = {\n         */\n         function addFunctionParamsIndent(node, paramsIndent) {\n             const openingParen = node.params.length ? sourceCode.getTokenBefore(node.params[0]) : sourceCode.getTokenBefore(node.body, 1);\n+\n+            if (!openingParen) {\n+\n+                // If there is no opening paren (e.g. for an arrow function with a single parameter), don't indent anything.\n+                return;\n+            }\n+\n             const closingParen = sourceCode.getTokenBefore(node.body);\n             const nodeTokens = getTokensAndComments(node);\n             const openingParenIndex = lodash.sortedIndexBy(nodeTokens, openingParen, token => token.range[0]);\n",
        "bugId": 293,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-undef-init.js": {
                "insert": [
                    46
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 4,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-undef-init.js b/lib/rules/no-undef-init.js\nindex 9df40e9ceb..7e58f55a69 100644\n--- a/lib/rules/no-undef-init.js\n+++ b/lib/rules/no-undef-init.js\n@@ -43,6 +43,10 @@ module.exports = {\n                         message: \"It's not necessary to initialize '{{name}}' to undefined.\",\n                         data: { name },\n                         fix(fixer) {\n+                            if (node.parent.kind === \"var\") {\n+                                return null;\n+                            }\n+\n                             if (node.id.type === \"ArrayPattern\" || node.id.type === \"ObjectPattern\") {\n \n                                 // Don't fix destructuring assignment to `undefined`.\n",
        "bugId": 292,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/ast-utils.js": {
                "changes": [
                    60
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex aa81e57d1b..c340103e94 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -57,7 +57,7 @@ function isModifyingReference(reference, index, references) {\n function isES5Constructor(node) {\n     return (\n         node.id &&\n-        node.id.name[0] === node.id.name[0].toLocaleUpperCase()\n+        node.id.name[0] !== node.id.name[0].toLocaleLowerCase()\n     );\n }\n \n",
        "bugId": 291,
        "tax": "G-DP",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/space-in-parens.js": {
                "changes": [
                    48
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/space-in-parens.js b/lib/rules/space-in-parens.js\nindex 95b03c3db5..67ec5847cd 100644\n--- a/lib/rules/space-in-parens.js\n+++ b/lib/rules/space-in-parens.js\n@@ -45,8 +45,7 @@ module.exports = {\n         const MISSING_SPACE_MESSAGE = \"There must be a space inside this paren.\",\n             REJECTED_SPACE_MESSAGE = \"There should be no spaces inside this paren.\",\n             ALWAYS = context.options[0] === \"always\",\n-\n-            exceptionsArrayOptions = (context.options.length === 2) ? context.options[1].exceptions : [],\n+            exceptionsArrayOptions = (context.options[1] && context.options[1].exceptions) || [],\n             options = {};\n         let exceptions;\n \n",
        "bugId": 290,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    741
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 99608ad519..727ecfaaed 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -738,7 +738,7 @@ module.exports = {\n                     const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);\n \n                     if (previousElement && sourceCode.getLastToken(previousElement).loc.start.line > startToken.loc.end.line) {\n-                        offsets.matchIndentOf(firstTokenOfPreviousElement, getFirstToken(element));\n+                        offsets.setDesiredOffsets(getTokensAndComments(element), firstTokenOfPreviousElement, 0);\n                     }\n                 }\n             });\n",
        "bugId": 289,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DM"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "changes": [
                    431,
                    436
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex ece8027060..f1f48bef55 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -428,12 +428,12 @@ module.exports = {\n                 return true;\n             }\n \n-            // if all parameters preceded by this variable are ignored, this is the last.\n+            // if all parameters preceded by this variable are ignored and unused, this is the last.\n             if (config.argsIgnorePattern) {\n                 const params = context.getDeclaredVariables(def.node);\n                 const posteriorParams = params.slice(params.indexOf(variable) + 1);\n \n-                if (posteriorParams.every(v => config.argsIgnorePattern.test(v.name))) {\n+                if (posteriorParams.every(v => v.references.length === 0 && config.argsIgnorePattern.test(v.name))) {\n                     return true;\n                 }\n             }\n",
        "bugId": 288,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC",
            "MC-DAP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/object-shorthand.js": {
                "changes": [
                    395
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/object-shorthand.js b/lib/rules/object-shorthand.js\nindex 1d3d9dae19..2f7b0ccf90 100644\n--- a/lib/rules/object-shorthand.js\n+++ b/lib/rules/object-shorthand.js\n@@ -392,7 +392,7 @@ module.exports = {\n                         });\n                     }\n                 } else if (APPLY_TO_METHODS && !node.value.id && (node.value.type === \"FunctionExpression\" || node.value.type === \"ArrowFunctionExpression\")) {\n-                    if (IGNORE_CONSTRUCTORS && isConstructor(node.key.name)) {\n+                    if (IGNORE_CONSTRUCTORS && node.key.type === \"Identifier\" && isConstructor(node.key.name)) {\n                         return;\n                     }\n                     if (AVOID_QUOTES && isStringLiteral(node.key)) {\n",
        "bugId": 287,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    725,
                    730
                ],
                "deletes": [
                    733
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 2,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 1c04febd5e..6c3c27c8e1 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -722,16 +722,28 @@ module.exports = {\n                 const parent = node.parent;\n \n                 nodeIndent = getNodeIndent(parent).goodChar;\n-                if (parentVarNode && parentVarNode.loc.start.line !== node.loc.start.line) {\n+                if (!parentVarNode || parentVarNode.loc.start.line !== node.loc.start.line) {\n                     if (parent.type !== \"VariableDeclarator\" || parentVarNode === parentVarNode.parent.declarations[0]) {\n                         if (parent.type === \"VariableDeclarator\" && parentVarNode.loc.start.line === parent.loc.start.line) {\n                             nodeIndent = nodeIndent + (indentSize * options.VariableDeclarator[parentVarNode.parent.kind]);\n                         } else if (parent.type === \"ObjectExpression\" || parent.type === \"ArrayExpression\") {\n-                            if (typeof options[parent.type] === \"number\") {\n+                            const parentElements = node.parent.type === \"ObjectExpression\" ? node.parent.properties : node.parent.elements;\n+\n+                            if (parentElements[0].loc.start.line === parent.loc.start.line && parentElements[0].loc.end.line !== parent.loc.start.line) {\n+\n+                                /*\n+                                 * If the first element of the array spans multiple lines, don't increase the expected indentation of the rest.\n+                                 * e.g. [{\n+                                 *        foo: 1\n+                                 *      },\n+                                 *      {\n+                                 *        bar: 1\n+                                 *      }]\n+                                 * the second object is not indented.\n+                                 */\n+                            } else if (typeof options[parent.type] === \"number\") {\n                                 nodeIndent += options[parent.type] * indentSize;\n                             } else {\n-                                const parentElements = node.parent.type === \"ObjectExpression\" ? node.parent.properties : node.parent.elements;\n-\n                                 nodeIndent = parentElements[0].loc.start.column;\n                             }\n                         } else if (parent.type === \"CallExpression\" || parent.type === \"NewExpression\") {\n",
        "bugId": 286,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC",
            "AS-CE",
            "IF-ABR"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    1042
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 0e6154d559..30d9401dc6 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1039,6 +1039,9 @@ module.exports = {\n \n             VariableDeclarator(node) {\n                 if (node.init) {\n+                    const equalOperator = sourceCode.getTokenBefore(node.init, astUtils.isNotOpeningParenToken);\n+\n+                    offsets.ignoreToken(equalOperator);\n                     offsets.ignoreToken(sourceCode.getFirstToken(node.init));\n                 }\n             },\n",
        "bugId": 285,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE",
            "SQ-AMO"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-param-reassign.js": {
                "changes": [
                    99
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-param-reassign.js b/lib/rules/no-param-reassign.js\nindex f8f6d12635..560d1d6b6f 100644\n--- a/lib/rules/no-param-reassign.js\n+++ b/lib/rules/no-param-reassign.js\n@@ -96,8 +96,15 @@ module.exports = {\n                         }\n                         break;\n \n-                    default:\n+                    // EXCLUDES: e.g. ({ [foo]: a }) = bar;\n+                    case \"Property\":\n+                        if (parent.key === node) {\n+                            return false;\n+                        }\n+\n                         break;\n+\n+                    // no default\n                 }\n \n                 node = parent;\n",
        "bugId": 284,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/max-statements-per-line.js": {
                "insert": [
                    102
                ],
                "changes": [
                    109
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 12,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/max-statements-per-line.js b/lib/rules/max-statements-per-line.js\nindex 64058f0d30..134d1b033b 100644\n--- a/lib/rules/max-statements-per-line.js\n+++ b/lib/rules/max-statements-per-line.js\n@@ -99,6 +99,18 @@ module.exports = {\n             enforceMaxStatementsPerLine(node.consequent);\n         }\n \n+        /**\n+         * Check each line in both sides of an if statement\n+         * @param {ASTNode} node node to evaluate\n+         * @returns {void}\n+         * @private\n+         */\n+        function checkLinesInNonBlockElse(node) {\n+            if (node.alternate && node.alternate.type !== \"BlockStatement\") {\n+                enforceMaxStatementsPerLine([node.alternate]);\n+            }\n+        }\n+\n         //--------------------------------------------------------------------------\n         // Public API\n         //--------------------------------------------------------------------------\n@@ -106,7 +118,8 @@ module.exports = {\n         return {\n             Program: checkLinesInBody,\n             BlockStatement: checkLinesInBody,\n-            SwitchCase: checkLinesInConsequent\n+            SwitchCase: checkLinesInConsequent,\n+            IfStatement: checkLinesInNonBlockElse\n         };\n \n     }\n",
        "bugId": 283,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD",
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/space-unary-ops.js": {
                "changes": [
                    128
                ],
                "deletes": [
                    69
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 10,
            "linesRem": 9,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/space-unary-ops.js b/lib/rules/space-unary-ops.js\nindex 4d122836ad..601d705e67 100644\n--- a/lib/rules/space-unary-ops.js\n+++ b/lib/rules/space-unary-ops.js\n@@ -66,15 +66,6 @@ module.exports = {\n                 node.argument && node.argument.type === \"UnaryExpression\" && node.argument.operator === \"!\";\n         }\n \n-        /**\n-         * Check if the node's child argument is an \"ObjectExpression\"\n-         * @param {ASTnode} node AST node\n-         * @returns {boolean} Whether or not the argument's type is \"ObjectExpression\"\n-         */\n-        function isArgumentObjectExpression(node) {\n-            return node.argument && node.argument.type && node.argument.type === \"ObjectExpression\";\n-        }\n-\n         /**\n          * Checks if an override exists for a given operator.\n          * @param {string} operator Operator\n@@ -125,7 +116,7 @@ module.exports = {\n          * @returns {void}\n          */\n         function verifyWordDoesntHaveSpaces(node, firstToken, secondToken, word) {\n-            if (isArgumentObjectExpression(node)) {\n+            if (astUtils.canTokensBeAdjacent(firstToken, secondToken)) {\n                 if (secondToken.range[0] > firstToken.range[1]) {\n                     context.report({\n                         node,\n",
        "bugId": 282,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-RMV",
            "IF-CC",
            "MC-DNP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/config/config-ops.js": {
                "changes": [
                    170,
                    173
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/config/config-ops.js b/lib/config/config-ops.js\nindex fa5f48b3fa..6823a70f45 100644\n--- a/lib/config/config-ops.js\n+++ b/lib/config/config-ops.js\n@@ -167,14 +167,10 @@ module.exports = {\n             Object.keys(src).forEach(function(key) {\n                 if (Array.isArray(src[key]) || Array.isArray(target[key])) {\n                     dst[key] = deepmerge(target[key], src[key], key === \"plugins\", isRule);\n-                } else if (typeof src[key] !== \"object\" || !src[key]) {\n+                } else if (typeof src[key] !== \"object\" || !src[key] || key === \"exported\" || key === \"astGlobals\") {\n                     dst[key] = src[key];\n                 } else {\n-                    if (!target[key]) {\n-                        dst[key] = src[key];\n-                    } else {\n-                        dst[key] = deepmerge(target[key], src[key], combine, key === \"rules\");\n-                    }\n+                    dst[key] = deepmerge(target[key] || {}, src[key], combine, key === \"rules\");\n                 }\n             });\n         }\n",
        "bugId": 281,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "IF-RMV",
            "IF-RBR",
            "IF-CC"
        ],
        "failingTests": 6
    },
    {
        "changedFiles": {
            "lib/testers/rule-tester.js": {
                "insert": [
                    497
                ],
                "changes": [
                    498
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 3,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/testers/rule-tester.js b/lib/testers/rule-tester.js\nindex e8442f079f..16e4637890 100644\n--- a/lib/testers/rule-tester.js\n+++ b/lib/testers/rule-tester.js\n@@ -494,13 +494,12 @@ RuleTester.prototype = {\n                         assert.fail(messages[i], null, \"Error should be a string or object.\");\n                     }\n                 }\n+            }\n \n-                if (item.hasOwnProperty(\"output\")) {\n-                    const fixResult = SourceCodeFixer.applyFixes(eslint.getSourceCode(), messages);\n-\n-                    assert.equal(fixResult.output, item.output, \"Output is incorrect.\");\n-                }\n+            if (item.hasOwnProperty(\"output\")) {\n+                const fixResult = SourceCodeFixer.applyFixes(eslint.getSourceCode(), messages);\n \n+                assert.equal(fixResult.output, item.output, \"Output is incorrect.\");\n             }\n \n             assertASTDidntChange(result.beforeAST, result.afterAST);\n",
        "bugId": 280,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [],
        "failingTests": 32
    },
    {
        "changedFiles": {
            "lib/rules/quotes.js": {
                "changes": [
                    260
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/quotes.js b/lib/rules/quotes.js\nindex dbef558546..1085ea33b1 100644\n--- a/lib/rules/quotes.js\n+++ b/lib/rules/quotes.js\n@@ -257,7 +257,11 @@ module.exports = {\n             TemplateLiteral(node) {\n \n                 // If backticks are expected or it's a tagged template, then this shouldn't throw an errors\n-                if (allowTemplateLiterals || quoteOption === \"backtick\" || node.parent.type === \"TaggedTemplateExpression\") {\n+                if (\n+                    allowTemplateLiterals ||\n+                    quoteOption === \"backtick\" ||\n+                    node.parent.type === \"TaggedTemplateExpression\" && node === node.parent.quasi\n+                ) {\n                     return;\n                 }\n \n",
        "bugId": 279,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 32
    },
    {
        "changedFiles": {
            "lib/rules/no-var.js": {
                "insert": [
                    18,
                    215,
                    269
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 11,
            "linesRem": 0,
            "linesAdd": 11,
            "chunks": 3,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-var.js b/lib/rules/no-var.js\nindex c74e0b9ad9..d3c163e557 100644\n--- a/lib/rules/no-var.js\n+++ b/lib/rules/no-var.js\n@@ -15,6 +15,15 @@ const astUtils = require(\"../ast-utils\");\n // Helpers\n //------------------------------------------------------------------------------\n \n+/**\n+ * Check whether a given variable is a global variable or not.\n+ * @param {eslint-scope.Variable} variable The variable to check.\n+ * @returns {boolean} `true` if the variable is a global variable.\n+ */\n+function isGlobal(variable) {\n+    return Boolean(variable.scope) && variable.scope.type === \"global\";\n+}\n+\n /**\n  * Finds the nearest function scope or global scope walking up the scope\n  * hierarchy.\n@@ -203,6 +212,7 @@ module.exports = {\n          * Checks whether it can fix a given variable declaration or not.\n          * It cannot fix if the following cases:\n          *\n+         * - A variable is a global variable.\n          * - A variable is declared on a SwitchCase node.\n          * - A variable is redeclared.\n          * - A variable is used from outside the scope.\n@@ -256,6 +266,7 @@ module.exports = {\n \n             if (node.parent.type === \"SwitchCase\" ||\n                 node.declarations.some(hasSelfReferenceInTDZ) ||\n+                variables.some(isGlobal) ||\n                 variables.some(isRedeclared) ||\n                 variables.some(isUsedFromOutsideOf(scopeNode))\n             ) {\n",
        "bugId": 278,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD",
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/camelcase.js": {
                "changes": [
                    112,
                    122
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/camelcase.js b/lib/rules/camelcase.js\nindex aafa876f6e..e3b764f7c2 100644\n--- a/lib/rules/camelcase.js\n+++ b/lib/rules/camelcase.js\n@@ -109,7 +109,7 @@ module.exports = {\n \n                     if (node.parent.parent && node.parent.parent.type === \"ObjectPattern\") {\n \n-                        if (node.parent.shorthand && node.parent.value.left && isUnderscored(node.parent.value.left.name)) {\n+                        if (node.parent.shorthand && node.parent.value.left && isUnderscored(name)) {\n \n                             report(node);\n                         }\n@@ -119,7 +119,7 @@ module.exports = {\n                             return;\n                         }\n \n-                        if (node.parent.value.name && isUnderscored(node.parent.value.name)) {\n+                        if (node.parent.value.name && isUnderscored(name)) {\n                             report(node);\n                         }\n                     }\n",
        "bugId": 277,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC",
            "IF-CC",
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/brace-style.js": {
                "changes": [
                    67,
                    71
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/brace-style.js b/lib/rules/brace-style.js\nindex e7eb19dae9..a44d0163a6 100644\n--- a/lib/rules/brace-style.js\n+++ b/lib/rules/brace-style.js\n@@ -64,11 +64,12 @@ module.exports = function(context) {\n      * @returns {void}\n      */\n     function checkIfStatement(node) {\n-        var tokens;\n+        var tokens,\n+            checkedTypes = [\"BlockStatement\", \"IfStatement\"];\n \n         checkBlock(\"consequent\", \"alternate\")(node);\n \n-        if (node.alternate && node.alternate.type === \"BlockStatement\") {\n+        if (node.alternate && checkedTypes.indexOf(node.alternate.type) > -1) {\n             tokens = context.getTokensBefore(node.alternate, 2);\n             if (style === \"1tbs\") {\n                 if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n",
        "bugId": 276,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-var.js": {
                "insert": [
                    276
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-var.js b/lib/rules/no-var.js\nindex 53a1b28578..dc8fbf8d1c 100644\n--- a/lib/rules/no-var.js\n+++ b/lib/rules/no-var.js\n@@ -273,6 +273,7 @@ module.exports = {\n \n             if (\n                 !isLoopAssignee(node) &&\n+                !(node.parent.type === \"ForStatement\" && node.parent.init === node) &&\n                 node.parent.type !== \"BlockStatement\" &&\n                 node.parent.type !== \"Program\" &&\n                 node.parent.type !== \"SwitchCase\"\n",
        "bugId": 275,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/cli-engine.js": {
                "changes": [
                    460
                ],
                "deletes": [
                    460
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 4,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/cli-engine.js b/lib/cli-engine.js\nindex 2d9299339e..c878778b68 100644\n--- a/lib/cli-engine.js\n+++ b/lib/cli-engine.js\n@@ -457,10 +457,6 @@ function CLIEngine(options) {\n      */\n     this._fileCache = fileEntryCache.create(cacheFile);\n \n-    if (!this.options.cache) {\n-        this._fileCache.destroy();\n-    }\n-\n     // load in additional rules\n     if (this.options.rulePaths) {\n         var cwd = this.options.cwd;\n@@ -665,6 +661,8 @@ CLIEngine.prototype = {\n                     // move to the next file\n                     return;\n                 }\n+            } else {\n+                fileCache.destroy();\n             }\n \n             debug(\"Processing \" + filename);\n",
        "bugId": 274,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-ABR"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/config/config-rule.js": {
                "changes": [
                    226,
                    274,
                    277,
                    283,
                    285,
                    287
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 8,
            "linesMod": 10
        },
        "diff": "diff --git a/lib/config/config-rule.js b/lib/config/config-rule.js\nindex bd7aa13b92..a8a073caa3 100644\n--- a/lib/config/config-rule.js\n+++ b/lib/config/config-rule.js\n@@ -223,7 +223,7 @@ class RuleConfigSet {\n     /**\n     * Add rule configurations from a schema object\n     * @param  {Object} obj Schema item with type === \"object\"\n-    * @returns {void}\n+    * @returns {boolean} true if at least one schema for the object could be generated, false otherwise\n     */\n     addObject(obj) {\n         const objectConfigSet = {\n@@ -258,7 +258,10 @@ class RuleConfigSet {\n \n         if (objectConfigSet.objectConfigs.length > 0) {\n             this.ruleConfigs = this.ruleConfigs.concat(combineArrays(this.ruleConfigs, objectConfigSet.objectConfigs));\n+            return true;\n         }\n+\n+        return false;\n     }\n }\n \n@@ -271,20 +274,21 @@ function generateConfigsFromSchema(schema) {\n     const configSet = new RuleConfigSet();\n \n     if (Array.isArray(schema)) {\n-        schema.forEach(opt => {\n+        for (const opt of schema) {\n             if (opt.enum) {\n                 configSet.addEnums(opt.enum);\n-            }\n-\n-            if (opt.type && opt.type === \"object\") {\n-                configSet.addObject(opt);\n-            }\n+            } else if (opt.type && opt.type === \"object\") {\n+                if (!configSet.addObject(opt)) {\n+                    break;\n+                }\n \n-            if (opt.oneOf) {\n+            // TODO (IanVS): support oneOf\n+            } else {\n \n-                // TODO (IanVS): not yet implemented\n+                // If we don't know how to fill in this option, don't fill in any of the following options.\n+                break;\n             }\n-        });\n+        }\n     }\n     configSet.addErrorSeverity();\n     return configSet.ruleConfigs;\n",
        "bugId": 273,
        "tax": "IncorFI-IncorCP",
        "pan_cat": [
            "LP-CC",
            "IF-ABR",
            "IF-APC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-self-compare.js": {
                "insert": [
                    25
                ],
                "changes": [
                    29,
                    31
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 19,
            "linesRem": 0,
            "linesAdd": 15,
            "chunks": 3,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/no-self-compare.js b/lib/rules/no-self-compare.js\nindex 54f907f594..5beaa181b9 100644\n--- a/lib/rules/no-self-compare.js\n+++ b/lib/rules/no-self-compare.js\n@@ -22,15 +22,28 @@ module.exports = {\n     },\n \n     create(context) {\n+        const sourceCode = context.getSourceCode();\n+\n+        /**\n+         * Determines whether two nodes are composed of the same tokens.\n+         * @param {ASTNode} nodeA The first node\n+         * @param {ASTNode} nodeB The second node\n+         * @returns {boolean} true if the nodes have identical token representations\n+         */\n+        function hasSameTokens(nodeA, nodeB) {\n+            const tokensA = sourceCode.getTokens(nodeA);\n+            const tokensB = sourceCode.getTokens(nodeB);\n+\n+            return tokensA.length === tokensB.length &&\n+                tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);\n+        }\n \n         return {\n \n             BinaryExpression(node) {\n-                const operators = [\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"];\n+                const operators = new Set([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"]);\n \n-                if (operators.indexOf(node.operator) > -1 &&\n-                    (node.left.type === \"Identifier\" && node.right.type === \"Identifier\" && node.left.name === node.right.name ||\n-                    node.left.type === \"Literal\" && node.right.type === \"Literal\" && node.left.value === node.right.value)) {\n+                if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {\n                     context.report({ node, message: \"Comparing to itself is potentially pointless.\" });\n                 }\n             }\n",
        "bugId": 272,
        "tax": "IncorFI-IncorIV-UTC",
        "pan_cat": [
            "AS-CE",
            "MD-ADD",
            "AS-CE",
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/comma-style.js": {
                "changes": [
                    124
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/comma-style.js b/lib/rules/comma-style.js\nindex c0c4e0b9af..67c82ef224 100644\n--- a/lib/rules/comma-style.js\n+++ b/lib/rules/comma-style.js\n@@ -121,7 +121,13 @@ module.exports = {\n                 items.forEach(function(item) {\n                     var commaToken = item ? sourceCode.getTokenBefore(item) : previousItemToken,\n                         currentItemToken = item ? sourceCode.getFirstToken(item) : sourceCode.getTokenAfter(commaToken),\n-                        reportItem = item || currentItemToken;\n+                        reportItem = item || currentItemToken,\n+                        tokenBeforeComma = sourceCode.getTokenBefore(commaToken);\n+\n+                    // Check if previous token is wrapped in parentheses\n+                    if (tokenBeforeComma && tokenBeforeComma.value === \")\") {\n+                        previousItemToken = tokenBeforeComma;\n+                    }\n \n                     /*\n                      * This works by comparing three token locations:\n",
        "bugId": 271,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE",
            "AS-CE",
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    396
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex 5feb7ab6db..6f051c12c5 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -393,7 +393,7 @@ function prepareConfig(config) {\n     if (typeof config.env === \"object\") {\n         Object.keys(config.env).forEach(function(env) {\n             if (config.env[env] && environments[env] && environments[env].parserOptions) {\n-                assign(parserOptions, environments[env].parserOptions);\n+                parserOptions = ConfigOps.merge(parserOptions, environments[env].parserOptions);\n             }\n         });\n     }\n",
        "bugId": 270,
        "tax": "IncorFI-CP",
        "pan_cat": [],
        "failingTests": 6
    },
    {
        "changedFiles": {
            "lib/util/source-code-fixer.js": {
                "changes": [
                    88
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/util/source-code-fixer.js b/lib/util/source-code-fixer.js\nindex e8c440d7c2..042eff591f 100644\n--- a/lib/util/source-code-fixer.js\n+++ b/lib/util/source-code-fixer.js\n@@ -85,11 +85,7 @@ SourceCodeFixer.applyFixes = function(sourceCode, messages) {\n \n         // sort in reverse order of occurrence\n         fixes.sort(function(a, b) {\n-            if (a.fix.range[1] <= b.fix.range[0]) {\n-                return 1;\n-            } else {\n-                return -1;\n-            }\n+            return b.fix.range[1] - a.fix.range[1] || b.fix.range[0] - a.fix.range[0];\n         });\n \n         // split into array of characters for easier manipulation\n",
        "bugId": 269,
        "tax": "G-DP",
        "pan_cat": [
            "IF-RMV",
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/config/config-validator.js": {
                "changes": [
                    192
                ]
            },
            "lib/config/config-file.js": {
                "changes": [
                    549
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/config/config-file.js b/lib/config/config-file.js\nindex 3c790cf3be..091a24f34d 100644\n--- a/lib/config/config-file.js\n+++ b/lib/config/config-file.js\n@@ -546,7 +546,7 @@ function loadFromDisk(resolvedPath, configContext) {\n         }\n \n         // validate the configuration before continuing\n-        validator.validate(config, resolvedPath, configContext.linterContext.rules, configContext.linterContext.environments);\n+        validator.validate(config, resolvedPath.configFullName, configContext.linterContext.rules, configContext.linterContext.environments);\n \n         /*\n          * If an `extends` property is defined, it represents a configuration file to use as\ndiff --git a/lib/config/config-validator.js b/lib/config/config-validator.js\nindex fb5a965641..bff010a63a 100644\n--- a/lib/config/config-validator.js\n+++ b/lib/config/config-validator.js\n@@ -189,7 +189,7 @@ function validateConfigSchema(config, source) {\n     validateSchema = validateSchema || ajv.compile(configSchema);\n \n     if (!validateSchema(config)) {\n-        throw new Error(`${source}:\\n\\tESLint configuration is invalid:\\n${formatErrors(validateSchema.errors)}`);\n+        throw new Error(`ESLint configuration in ${source} is invalid:\\n${formatErrors(validateSchema.errors)}`);\n     }\n }\n \n",
        "bugId": 268,
        "tax": "IncompFI-IncompOM",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/config/config-ops.js": {
                "changes": [
                    178
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/config/config-ops.js b/lib/config/config-ops.js\nindex 79a2f7f417..e1d9a90135 100644\n--- a/lib/config/config-ops.js\n+++ b/lib/config/config-ops.js\n@@ -175,7 +175,7 @@ module.exports = {\n             }\n             Object.keys(src).forEach(key => {\n                 if (Array.isArray(src[key]) || Array.isArray(target[key])) {\n-                    dst[key] = deepmerge(target[key], src[key], key === \"plugins\", isRule);\n+                    dst[key] = deepmerge(target[key], src[key], key === \"plugins\" || key === \"extends\", isRule);\n                 } else if (typeof src[key] !== \"object\" || !src[key] || key === \"exported\" || key === \"astGlobals\") {\n                     dst[key] = src[key];\n                 } else {\n",
        "bugId": 267,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/id-length.js": {
                "changes": [
                    64
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/id-length.js b/lib/rules/id-length.js\nindex d3a942cd04..1747552707 100644\n--- a/lib/rules/id-length.js\n+++ b/lib/rules/id-length.js\n@@ -61,7 +61,9 @@ module.exports = {\n                 return !parent.computed && (\n \n                     // regular property assignment\n-                    (parent.parent.left === parent || // or the last identifier in an ObjectPattern destructuring\n+                    (parent.parent.left === parent && parent.parent.type === \"AssignmentExpression\" ||\n+\n+                    // or the last identifier in an ObjectPattern destructuring\n                     parent.parent.type === \"Property\" && parent.parent.value === parent &&\n                     parent.parent.parent.type === \"ObjectPattern\" && parent.parent.parent.parent.left === parent.parent.parent)\n                 );\n",
        "bugId": 266,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-else-return.js": {
                "insert": [
                    12
                ],
                "changes": [
                    202
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/no-else-return.js b/lib/rules/no-else-return.js\nindex 6ba0b24267..68ab4c7608 100644\n--- a/lib/rules/no-else-return.js\n+++ b/lib/rules/no-else-return.js\n@@ -9,6 +9,7 @@\n // Requirements\n //------------------------------------------------------------------------------\n \n+const astUtils = require(\"../ast-utils\");\n const FixTracker = require(\"../util/fix-tracker\");\n \n //------------------------------------------------------------------------------\n@@ -199,9 +200,11 @@ module.exports = {\n             let consequents,\n                 alternate;\n \n-            // Only \"top-level\" if statements are checked, meaning the first `if`\n-            // in a `if-else-if-...` chain.\n-            if (parent.type === \"IfStatement\" && parent.alternate === node) {\n+            /*\n+             * Fixing this would require splitting one statement into two, so no error should\n+             * be reported if this node is in a position where only one statement is allowed.\n+             */\n+            if (!astUtils.STATEMENT_LIST_PARENTS.has(parent.type)) {\n                 return;\n             }\n \n",
        "bugId": 265,
        "tax": "IncorFI-IncorIV-UTC",
        "pan_cat": [
            "AS-CE",
            "AS-CE",
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-semi.js": {
                "changes": [
                    69
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-semi.js b/lib/rules/no-extra-semi.js\nindex bb65c0486b..679a16641b 100644\n--- a/lib/rules/no-extra-semi.js\n+++ b/lib/rules/no-extra-semi.js\n@@ -66,7 +66,16 @@ module.exports = {\n              */\n             EmptyStatement: function(node) {\n                 var parent = node.parent,\n-                    allowedParentTypes = [\"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"WhileStatement\", \"DoWhileStatement\"];\n+                    allowedParentTypes = [\n+                        \"ForStatement\",\n+                        \"ForInStatement\",\n+                        \"ForOfStatement\",\n+                        \"WhileStatement\",\n+                        \"DoWhileStatement\",\n+                        \"IfStatement\",\n+                        \"LabeledStatement\",\n+                        \"WithStatement\"\n+                    ];\n \n                 if (allowedParentTypes.indexOf(parent.type) === -1) {\n                     report(node);\n",
        "bugId": 264,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-lone-blocks.js": {
                "changes": [
                    35,
                    37,
                    44,
                    47
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 15
        },
        "diff": "diff --git a/lib/rules/no-lone-blocks.js b/lib/rules/no-lone-blocks.js\nindex 48296bf79c..95a5b334c6 100644\n--- a/lib/rules/no-lone-blocks.js\n+++ b/lib/rules/no-lone-blocks.js\n@@ -32,26 +32,22 @@ module.exports = {\n          * @returns {void}\n         */\n         function report(node) {\n-            const parent = context.getAncestors().pop();\n+            const message = node.parent.type === \"BlockStatement\" ? \"Nested block is redundant.\" : \"Block is redundant.\";\n \n-            context.report({ node, message: parent.type === \"Program\"\n-                ? \"Block is redundant.\"\n-                : \"Nested block is redundant.\"\n-            });\n+            context.report({ node, message });\n         }\n \n         /**\n-         * Checks for any ocurrence of BlockStatement > BlockStatement or Program > BlockStatement\n-         * @returns {boolean} True if the current node is a lone block.\n+         * Checks for any ocurrence of a BlockStatement in a place where lists of statements can appear\n+         * @param {ASTNode} node The node to check\n+         * @returns {boolean} True if the node is a lone block.\n         */\n-        function isLoneBlock() {\n-            const parent = context.getAncestors().pop();\n-\n-            /*\n-             * Note: astUtils.STATEMENT_LIST_PARENTS is not used here because blocks in SwitchCases are not checked.\n-             * https://github.com/eslint/eslint/issues/8047\n-             */\n-            return parent.type === \"BlockStatement\" || parent.type === \"Program\";\n+        function isLoneBlock(node) {\n+            return node.parent.type === \"BlockStatement\" ||\n+                node.parent.type === \"Program\" ||\n+\n+                // Don't report blocks in switch cases if the block is the only statement of the case.\n+                node.parent.type === \"SwitchCase\" && !(node.parent.consequent[0] === node && node.parent.consequent.length === 1);\n         }\n \n         /**\n",
        "bugId": 263,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "MD-ADD",
            "AS-CE",
            "MD-RMV",
            "MD-RMV"
        ],
        "failingTests": 32
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    853
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 8,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex a12e93330b..9774708c37 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -850,7 +850,18 @@ module.exports = {\n \n             ExportNamedDeclaration(node) {\n                 if (node.declaration === null) {\n-                    addElementListIndent(getTokensAndComments(node).slice(1), node.specifiers, 1);\n+                    const tokensInNode = getTokensAndComments(node);\n+                    const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken);\n+                    const closingCurlyIndex = lodash.sortedIndexBy(tokensInNode, closingCurly, token => token.range[0]);\n+\n+                    // Indent the specifiers in `export {foo, bar, baz}`\n+                    addElementListIndent(tokensInNode.slice(1, closingCurlyIndex + 1), node.specifiers, 1);\n+\n+                    if (node.source) {\n+\n+                        // Indent everything after and including the `from` token in `export {foo, bar, baz} from 'qux'`\n+                        offsets.setDesiredOffsets(tokensInNode.slice(closingCurlyIndex + 1), sourceCode.getFirstToken(node), 1);\n+                    }\n                 }\n             },\n \n@@ -896,6 +907,14 @@ module.exports = {\n \n                     addElementListIndent(specifierTokens, node.specifiers.filter(specifier => specifier.type === \"ImportSpecifier\"), 1);\n                 }\n+\n+                const fromToken = sourceCode.getLastToken(node, token => token.type === \"Identifier\" && token.value === \"from\");\n+\n+                if (fromToken) {\n+                    const tokensToOffset = sourceCode.getTokensBetween(fromToken, sourceCode.getLastToken(node), 1);\n+\n+                    offsets.setDesiredOffsets(tokensToOffset, sourceCode.getFirstToken(node), 1);\n+                }\n             },\n \n             LogicalExpression: addBinaryOrLogicalExpressionIndent,\n",
        "bugId": 262,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "IF-APC",
            "IF-APTC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-constructor.js": {
                "insert": [
                    28
                ],
                "changes": [
                    29,
                    36
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 14,
            "linesRem": 0,
            "linesAdd": 7,
            "chunks": 3,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/rules/no-useless-constructor.js b/lib/rules/no-useless-constructor.js\nindex 20ca67cbe0..f70614446e 100644\n--- a/lib/rules/no-useless-constructor.js\n+++ b/lib/rules/no-useless-constructor.js\n@@ -25,15 +25,42 @@ module.exports = function(context) {\n             return false;\n         }\n \n+        var superArgs = body[0].expression.arguments;\n+        var firstSuperArg = superArgs[0];\n+        var lastSuperArgIndex = superArgs.length - 1;\n+        var lastSuperArg = superArgs[lastSuperArgIndex];\n+        var isSimpleParameterList = ctorParams.every(function(param) {\n+            return param.type === \"Identifier\" || param.type === \"RestElement\";\n+        });\n \n-        return body[0].expression.arguments.every(function(arg, index) {\n-            return (arg.type === \"Identifier\" && arg.name === ctorParams[index].name) ||\n-            (\n-                arg.type === \"SpreadElement\" &&\n-                ctorParams[index].type === \"RestElement\" &&\n-                arg.argument.name === ctorParams[index].argument.name\n+        /**\n+         * Checks if a super argument is the same with constructor argument\n+         * @param {ASTNode} arg argument node\n+         * @param {number} index argument index\n+         * @returns {boolean} true if the arguments are same, false otherwise\n+         */\n+        function isSameIdentifier(arg, index) {\n+            return (\n+                arg.type === \"Identifier\" &&\n+                arg.name === ctorParams[index].name\n             );\n-        });\n+        }\n+\n+        var spreadsArguments =\n+            superArgs.length === 1 &&\n+            firstSuperArg.type === \"SpreadElement\" &&\n+            firstSuperArg.argument.name === \"arguments\";\n+\n+        var passesParamsAsArgs =\n+            superArgs.length === ctorParams.length &&\n+            superArgs.every(isSameIdentifier) ||\n+            superArgs.length <= ctorParams.length &&\n+            superArgs.slice(0, -1).every(isSameIdentifier) &&\n+            lastSuperArg.type === \"SpreadElement\" &&\n+            ctorParams[lastSuperArgIndex].type === \"RestElement\" &&\n+            lastSuperArg.argument.name === ctorParams[lastSuperArgIndex].argument.name;\n+\n+        return isSimpleParameterList && (spreadsArguments || passesParamsAsArgs);\n     }\n \n     /**\n",
        "bugId": 261,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MD-ADD",
            "Return"
        ],
        "failingTests": 71
    },
    {
        "changedFiles": {
            "lib/rules/vars-on-top.js": {
                "changes": [
                    58
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/vars-on-top.js b/lib/rules/vars-on-top.js\nindex 26c690b9ae..ae009f85ad 100644\n--- a/lib/rules/vars-on-top.js\n+++ b/lib/rules/vars-on-top.js\n@@ -55,7 +55,9 @@ module.exports = function(context) {\n         }\n \n         for (; i < l; ++i) {\n-            if (statements[i].type !== \"VariableDeclaration\") {\n+            if (statements[i].type !== \"VariableDeclaration\" &&\n+                    (statements[i].type !== \"ExportNamedDeclaration\" ||\n+                    statements[i].declaration.type !== \"VariableDeclaration\")) {\n                 return false;\n             }\n             if (statements[i] === node) {\n@@ -104,6 +106,12 @@ module.exports = function(context) {\n             var grandParent = ancestors.pop();\n \n             if (node.kind === \"var\") { // check variable is `var` type and not `let` or `const`\n+                if (parent.type === \"ExportNamedDeclaration\") {\n+                    node = parent;\n+                    parent = grandParent;\n+                    grandParent = ancestors.pop();\n+                }\n+\n                 if (parent.type === \"Program\") { // That means its a global variable\n                     globalVarCheck(node, parent);\n                 } else {\n",
        "bugId": 260,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC",
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/padding-line-between-statements.js": {
                "changes": [
                    96
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/padding-line-between-statements.js b/lib/rules/padding-line-between-statements.js\nindex 707cf33d85..413327dfd4 100644\n--- a/lib/rules/padding-line-between-statements.js\n+++ b/lib/rules/padding-line-between-statements.js\n@@ -93,7 +93,7 @@ function isBlockLikeStatement(sourceCode, node) {\n \n     // Checks the last token is a closing brace of blocks.\n     const lastToken = sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);\n-    const belongingNode = astUtils.isClosingBraceToken(lastToken)\n+    const belongingNode = lastToken && astUtils.isClosingBraceToken(lastToken)\n         ? sourceCode.getNodeByRangeIndex(lastToken.range[0])\n         : null;\n \n",
        "bugId": 259,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/quotes.js": {
                "insert": [
                    212
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/quotes.js b/lib/rules/quotes.js\nindex 1085ea33b1..b1117b85fb 100644\n--- a/lib/rules/quotes.js\n+++ b/lib/rules/quotes.js\n@@ -209,6 +209,7 @@ module.exports = {\n \n                 // LiteralPropertyName.\n                 case \"Property\":\n+                case \"MethodDefinition\":\n                     return parent.key === node && !parent.computed;\n \n                 // ModuleSpecifier.\n",
        "bugId": 258,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "SW-ARSB"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/func-names.js": {
                "insert": [
                    8
                ],
                "changes": [
                    48
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 10,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/func-names.js b/lib/rules/func-names.js\nindex 44b989b2c4..2875e612a2 100644\n--- a/lib/rules/func-names.js\n+++ b/lib/rules/func-names.js\n@@ -5,6 +5,15 @@\n \n \"use strict\";\n \n+/**\n+ * Checks whether or not a given variable is a function name.\n+ * @param {escope.Variable} variable - A variable to check.\n+ * @returns {boolean} `true` if the variable is a function name.\n+ */\n+function isFunctionName(variable) {\n+    return variable && variable.defs[0].type === \"FunctionName\";\n+}\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -45,7 +54,14 @@ module.exports = {\n         }\n \n         return {\n-            FunctionExpression: function(node) {\n+            \"FunctionExpression:exit\": function(node) {\n+\n+                // Skip recursive functions.\n+                var nameVar = context.getDeclaredVariables(node)[0];\n+\n+                if (isFunctionName(nameVar) && nameVar.references.length > 0) {\n+                    return;\n+                }\n \n                 var name = node.id && node.id.name;\n \n",
        "bugId": 257,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD",
            "IF-APCJ"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-implicit-coercion.js": {
                "insert": [
                    195
                ],
                "changes": [
                    197,
                    207,
                    227
                ],
                "deletes": [
                    203
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 3,
            "linesAdd": 1,
            "chunks": 5,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/no-implicit-coercion.js b/lib/rules/no-implicit-coercion.js\nindex 265e59c80c..8e8db9879b 100644\n--- a/lib/rules/no-implicit-coercion.js\n+++ b/lib/rules/no-implicit-coercion.js\n@@ -192,19 +192,24 @@ module.exports = {\n         * Reports an error and autofixes the node\n         * @param {ASTNode} node - An ast node to report the error on.\n         * @param {string} recommendation - The recommended code for the issue\n+        * @param {bool} shouldFix - Whether this report should fix the node\n         * @returns {void}\n         */\n-        function report(node, recommendation) {\n-            context.report({\n+        function report(node, recommendation, shouldFix) {\n+            shouldFix = typeof shouldFix === \"undefined\" ? true : shouldFix;\n+            const reportObj = {\n                 node,\n                 message: \"use `{{recommendation}}` instead.\",\n                 data: {\n                     recommendation\n-                },\n-                fix(fixer) {\n-                    return fixer.replaceText(node, recommendation);\n                 }\n-            });\n+            };\n+\n+            if (shouldFix) {\n+                reportObj.fix = fixer => fixer.replaceText(node, recommendation);\n+            }\n+\n+            context.report(reportObj);\n         }\n \n         return {\n@@ -224,7 +229,7 @@ module.exports = {\n                 if (!operatorAllowed && options.boolean && isBinaryNegatingOfIndexOf(node)) {\n                     const recommendation = `${sourceCode.getText(node.argument)} !== -1`;\n \n-                    report(node, recommendation);\n+                    report(node, recommendation, false);\n                 }\n \n                 // +foo\n",
        "bugId": 256,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-CHG",
            "MC-DNP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    181
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/linter.js b/lib/linter.js\nindex 7e32eedb9a..b06fb833e8 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -178,7 +178,7 @@ function addDeclaredGlobals(program, globalScope, config, envContext) {\n \n     Object.assign(declaredGlobals, builtin);\n \n-    Object.keys(config.env).forEach(name => {\n+    Object.keys(config.env).filter(name => config.env[name]).forEach(name => {\n         const env = envContext.get(name),\n             environmentGlobals = env && env.globals;\n \n",
        "bugId": 255,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "SQ-AMO"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/prefer-const.js": {
                "changes": [
                    73,
                    85
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/prefer-const.js b/lib/rules/prefer-const.js\nindex 02ba0a9fc3..5255f2745c 100644\n--- a/lib/rules/prefer-const.js\n+++ b/lib/rules/prefer-const.js\n@@ -70,9 +70,14 @@ function canBecomeVariableDeclaration(identifier) {\n  *\n  * If the variable should not change to const, this function returns null.\n  * - If the variable is reassigned.\n- * - If the variable is never initialized and assigned.\n+ * - If the variable is never initialized nor assigned.\n  * - If the variable is initialized in a different scope from the declaration.\n  * - If the unique assignment of the variable cannot change to a declaration.\n+ *   e.g. `if (a) b = 1` / `return (b = 1)`\n+ * - If the variable is declared in the global scope and `eslintUsed` is `true`.\n+ *   `/*exported foo` directive comment makes such variables. This rule does not\n+ *   warn such variables because this rule cannot distinguish whether the\n+ *   exported variables are reassigned or not.\n  *\n  * @param {escope.Variable} variable - A variable to get.\n  * @param {boolean} ignoreReadBeforeAssign -\n@@ -82,7 +87,7 @@ function canBecomeVariableDeclaration(identifier) {\n  *      Otherwise, null.\n  */\n function getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign) {\n-    if (variable.eslintUsed) {\n+    if (variable.eslintUsed && variable.scope.type === \"global\") {\n         return null;\n     }\n \n",
        "bugId": 254,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-return.js": {
                "insert": [
                    123
                ],
                "changes": [
                    125,
                    128
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/no-useless-return.js b/lib/rules/no-useless-return.js\nindex 259fed2396..e2a6da0318 100644\n--- a/lib/rules/no-useless-return.js\n+++ b/lib/rules/no-useless-return.js\n@@ -120,15 +120,23 @@ module.exports = {\n          *\n          * @param {ASTNode[]} uselessReturns - The collected return statements.\n          * @param {CodePathSegment[]} prevSegments - The previous segments to traverse.\n+         * @param {WeakSet<CodePathSegment>} [traversedSegments] A set of segments that have already been traversed in this call\n          * @returns {ASTNode[]} `uselessReturns`.\n          */\n-        function getUselessReturns(uselessReturns, prevSegments) {\n+        function getUselessReturns(uselessReturns, prevSegments, traversedSegments) {\n+            if (!traversedSegments) {\n+                traversedSegments = new WeakSet();\n+            }\n             for (const segment of prevSegments) {\n                 if (!segment.reachable) {\n-                    getUselessReturns(\n-                        uselessReturns,\n-                        segment.allPrevSegments.filter(isReturned)\n-                    );\n+                    if (!traversedSegments.has(segment)) {\n+                        traversedSegments.add(segment);\n+                        getUselessReturns(\n+                            uselessReturns,\n+                            segment.allPrevSegments.filter(isReturned),\n+                            traversedSegments\n+                        );\n+                    }\n                     continue;\n                 }\n \n",
        "bugId": 253,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MD-CHG",
            "IF-APC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/func-call-spacing.js": {
                "changes": [
                    89
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/func-call-spacing.js b/lib/rules/func-call-spacing.js\nindex 5c416f0373..651ee92666 100644\n--- a/lib/rules/func-call-spacing.js\n+++ b/lib/rules/func-call-spacing.js\n@@ -86,9 +86,9 @@ module.exports = {\n                 return;\n             }\n \n-            const hasWhitespace = sourceCode.isSpaceBetweenTokens(prevToken, parenToken);\n-            const hasNewline = hasWhitespace &&\n-                /\\n/.test(text.slice(prevToken.range[1], parenToken.range[0]).replace(/\\/\\*.*?\\*\\//g, \"\"));\n+            const textBetweenTokens = text.slice(prevToken.range[1], parenToken.range[0]).replace(/\\/\\*.*?\\*\\//g, \"\");\n+            const hasWhitespace = /\\s/.test(textBetweenTokens);\n+            const hasNewline = hasWhitespace && /[\\n\\r\\u2028\\u2029]/.test(textBetweenTokens);\n \n             /*\n              * never allowNewlines hasWhitespace hasNewline message\n",
        "bugId": 252,
        "tax": "IncompFI-MIV-MHSC",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/newline-per-chained-call.js": {
                "changes": [
                    39
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/newline-per-chained-call.js b/lib/rules/newline-per-chained-call.js\nindex 77d150d04f..05696dc2a5 100644\n--- a/lib/rules/newline-per-chained-call.js\n+++ b/lib/rules/newline-per-chained-call.js\n@@ -36,7 +36,7 @@ module.exports = function(context) {\n \n             objectLineNumber = node.object.loc.end.line;\n             propertyLineNumber = node.property.loc.end.line;\n-            valid = propertyLineNumber > objectLineNumber;\n+            valid = node.computed || propertyLineNumber > objectLineNumber;\n \n             if (!valid) {\n                 codeState.reports.push({\n",
        "bugId": 251,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 71
    },
    {
        "changedFiles": {
            "package.json": {
                "changes": [
                    59
                ]
            },
            "lib/cli.js": {
                "insert": [
                    140
                ],
                "deletes": [
                    156
                ]
            },
            "lib/options.js": {
                "changes": [
                    219
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 3,
            "sizeInLines": 36,
            "linesRem": 18,
            "linesAdd": 15,
            "chunks": 4,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/cli.js b/lib/cli.js\nindex 593c354bc0..c228fd81d0 100644\n--- a/lib/cli.js\n+++ b/lib/cli.js\n@@ -137,6 +137,21 @@ const cli = {\n \n             log.info(\"v\" + require(\"../package.json\").version);\n \n+        } else if (currentOptions.printConfig) {\n+            if (files.length) {\n+                log.error(\"The --print-config option must be used with exactly one file name.\");\n+                return 1;\n+            } else if (text) {\n+                log.error(\"The --print-config option is not available for piped-in code.\");\n+                return 1;\n+            }\n+\n+            const engine = new CLIEngine(translateOptions(currentOptions));\n+\n+            const fileConfig = engine.getConfigForFile(currentOptions.printConfig);\n+\n+            log.info(JSON.stringify(fileConfig, null, \"  \"));\n+            return 0;\n         } else if (currentOptions.help || (!files.length && !text)) {\n \n             log.info(options.generateHelp());\n@@ -153,24 +168,6 @@ const cli = {\n \n             const engine = new CLIEngine(translateOptions(currentOptions));\n \n-            if (currentOptions.printConfig) {\n-                if (files.length !== 1) {\n-                    log.error(\"The --print-config option requires a \" +\n-                        \"single file as positional argument.\");\n-                    return 1;\n-                }\n-\n-                if (text) {\n-                    log.error(\"The --print-config option is not available for piped-in code.\");\n-                    return 1;\n-                }\n-\n-                const fileConfig = engine.getConfigForFile(files[0]);\n-\n-                log.info(JSON.stringify(fileConfig, null, \"  \"));\n-                return 0;\n-            }\n-\n             const report = text ? engine.executeOnText(text, currentOptions.stdinFilename, true) : engine.executeOnFiles(files);\n \n             if (currentOptions.fix) {\ndiff --git a/lib/options.js b/lib/options.js\nindex bbb2456a98..5669104c03 100644\n--- a/lib/options.js\n+++ b/lib/options.js\n@@ -216,8 +216,8 @@ module.exports = optionator({\n         },\n         {\n             option: \"print-config\",\n-            type: \"Boolean\",\n-            description: \"Print the configuration to be used\"\n+            type: \"path::String\",\n+            description: \"Print the configuration for the given file\"\n         }\n     ]\n });\ndiff --git a/package.json b/package.json\nindex 9cf768b2df..d4aaeca164 100644\n--- a/package.json\n+++ b/package.json\n@@ -56,7 +56,7 @@\n     \"lodash\": \"^4.0.0\",\n     \"mkdirp\": \"^0.5.0\",\n     \"natural-compare\": \"^1.4.0\",\n-    \"optionator\": \"^0.8.1\",\n+    \"optionator\": \"^0.8.2\",\n     \"path-is-inside\": \"^1.0.1\",\n     \"pluralize\": \"^1.2.1\",\n     \"progress\": \"^1.1.8\",\n",
        "bugId": 250,
        "tax": "PM",
        "pan_cat": [
            "IF-ABR",
            "IF-APC",
            "IF-CC",
            "IF-ABR"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/getter-return.js": {
                "insert": [
                    17,
                    105
                ],
                "changes": [
                    114,
                    148
                ],
                "deletes": [
                    108
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 40,
            "linesRem": 2,
            "linesAdd": 31,
            "chunks": 5,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/rules/getter-return.js b/lib/rules/getter-return.js\nindex 8a095ad296..58fac8bdac 100644\n--- a/lib/rules/getter-return.js\n+++ b/lib/rules/getter-return.js\n@@ -14,6 +14,7 @@ const astUtils = require(\"../ast-utils\");\n //------------------------------------------------------------------------------\n // Helpers\n //------------------------------------------------------------------------------\n+const TARGET_NODE_TYPE = /^(?:Arrow)?FunctionExpression$/;\n \n /**\n  * Checks a given code path segment is reachable.\n@@ -101,22 +102,45 @@ module.exports = {\n             }\n         }\n \n+        /** Checks whether a node means a getter function.\n+         * @param {ASTNode} node - a node to check.\n+         * @returns {boolean} if node means a getter, return true; else return false.\n+         */\n+        function isGetter(node) {\n+            const parent = node.parent;\n+\n+            if (TARGET_NODE_TYPE.test(node.type) && node.body.type === \"BlockStatement\") {\n+                if (parent.kind === \"get\") {\n+                    return true;\n+                }\n+                if (parent.type === \"Property\" && astUtils.getStaticPropertyName(parent) === \"get\" && parent.parent.type === \"ObjectExpression\") {\n+\n+                    // Object.defineProperty()\n+                    if (parent.parent.parent.type === \"CallExpression\" &&\n+                        astUtils.getStaticPropertyName(parent.parent.parent.callee) === \"defineProperty\") {\n+                        return true;\n+                    }\n+\n+                    // Object.defineProperties()\n+                    if (parent.parent.parent.type === \"Property\" &&\n+                        parent.parent.parent.parent.type === \"ObjectExpression\" &&\n+                        parent.parent.parent.parent.parent.type === \"CallExpression\" &&\n+                        astUtils.getStaticPropertyName(parent.parent.parent.parent.parent.callee) === \"defineProperties\") {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n         return {\n \n             // Stacks this function's information.\n             onCodePathStart(codePath, node) {\n-                const parent = node.parent;\n-\n                 funcInfo = {\n                     upper: funcInfo,\n                     codePath,\n                     hasReturn: false,\n-                    shouldCheck:\n-                        node.type === \"FunctionExpression\" &&\n-                        node.body.type === \"BlockStatement\" &&\n-\n-                        // check if it is a \"getter\", or a method named \"get\".\n-                        (parent.kind === \"get\" || astUtils.getStaticPropertyName(parent) === \"get\"),\n+                    shouldCheck: isGetter(node),\n                     node\n                 };\n             },\n@@ -145,7 +169,8 @@ module.exports = {\n             },\n \n             // Reports a given function if the last path is reachable.\n-            \"FunctionExpression:exit\": checkLastSegment\n+            \"FunctionExpression:exit\": checkLastSegment,\n+            \"ArrowFunctionExpression:exit\": checkLastSegment\n         };\n     }\n };\n",
        "bugId": 249,
        "tax": "IncorFI-IncorIV-UTC",
        "pan_cat": [
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    162
                ]
            },
            "lib/util.js": {
                "changes": [
                    32
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex 5dc0af2458..5faf3c2777 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -159,8 +159,18 @@ function modifyRulesFromComments(ast, config) {\n             if (value.indexOf(\"eslint\") === 0) {\n                 //strip eslint from the string\n                 value = value.substr(6, value.length - 6);\n-                forEachOption(value, function(name, value) {\n-                    modifiedRules[name] = JSON.parse(value);\n+                value = value.replace(/([a-z0-9\\-]+):/g, \"\\\"$1\\\":\").replace(/(\\]|[0-9])\\s+(?=\")/, \"$1,\");\n+                var items = {};\n+                try {\n+                    items = JSON.parse(\"{\" + value + \"}\");\n+                } catch(e) {\n+                    return;\n+                }\n+                Object.keys(items).forEach(function(name) {\n+                    var ruleValue = items[name];\n+                    if (typeof ruleValue === \"number\" || (Array.isArray(ruleValue) && typeof ruleValue[0] === \"number\")) {\n+                        modifiedRules[name] = ruleValue;\n+                    }\n                 });\n             }\n         }\ndiff --git a/lib/util.js b/lib/util.js\nindex 4b9c267e75..21a01c638c 100644\n--- a/lib/util.js\n+++ b/lib/util.js\n@@ -29,8 +29,13 @@ exports.mergeConfigs = function mergeConfigs(base, custom) {\n     Object.keys(custom).forEach(function (key) {\n         var property = custom[key];\n \n-        if (typeof property === \"object\" && !Array.isArray(property)) {\n+        if (Array.isArray(base[key]) && !Array.isArray(property) && typeof property === \"number\") {\n+            //assume that we are just overriding first attribute\n+            base[key][0] = custom[key];\n+            return;\n+        }\n \n+        if (typeof property === \"object\" && !Array.isArray(property)) {\n             // base[key] might not exist, so be careful with recursion here\n             base[key] = mergeConfigs(base[key] || {}, custom[key]);\n         } else {\n",
        "bugId": 248,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 16
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    382
                ],
                "changes": [
                    384,
                    387,
                    891,
                    895
                ],
                "deletes": [
                    404
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 10,
            "linesAdd": 1,
            "chunks": 6,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 2b069011f9..b7df6b696f 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -379,12 +379,17 @@ module.exports = {\n          * if not present then return null\n          * @param {ASTNode} node node to examine\n          * @param {string} type type that is being looked for\n+         * @param {string} stopAtList end points for the evaluating code\n          * @returns {ASTNode|void} if found then node otherwise null\n          */\n-        function getParentNodeByType(node, type) {\n+        function getParentNodeByType(node, type, stopAtList) {\n             let parent = node.parent;\n \n-            while (parent.type !== type && parent.type !== \"Program\") {\n+            if (!stopAtList) {\n+                stopAtList = [\"Program\"];\n+            }\n+\n+            while (parent.type !== type && stopAtList.indexOf(parent.type) === -1 && parent.type !== \"Program\") {\n                 parent = parent.parent;\n             }\n \n@@ -401,16 +406,6 @@ module.exports = {\n             return getParentNodeByType(node, \"VariableDeclarator\");\n         }\n \n-        /**\n-         * Returns the ExpressionStatement based on the current node\n-         * if not present then return null\n-         * @param {ASTNode} node node to examine\n-         * @returns {ASTNode|void} if found then node otherwise null\n-         */\n-        function getAssignmentExpressionNode(node) {\n-            return getParentNodeByType(node, \"AssignmentExpression\");\n-        }\n-\n         /**\n          * Check to see if the node is part of the multi-line variable declaration.\n          * Also if its on the same line as the varNode\n@@ -888,11 +883,11 @@ module.exports = {\n                 // alter the expectation of correct indentation. Skip them.\n                 // TODO: Add appropriate configuration options for variable\n                 // declarations and assignments.\n-                if (getVariableDeclaratorNode(node)) {\n+                if (getParentNodeByType(node, \"VariableDeclarator\", [\"FunctionExpression\", \"ArrowFunctionExpression\"])) {\n                     return;\n                 }\n \n-                if (getAssignmentExpressionNode(node)) {\n+                if (getParentNodeByType(node, \"AssignmentExpression\", [\"FunctionExpression\"])) {\n                     return;\n                 }\n \n",
        "bugId": 247,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "LP-CC",
            "MD-RMV",
            "MD-CHG",
            "MC-DM",
            "MC-DM"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/padded-blocks.js": {
                "insert": [
                    19
                ],
                "changes": [
                    29,
                    31,
                    46,
                    48,
                    50
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 31,
            "linesRem": 0,
            "linesAdd": 24,
            "chunks": 6,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/rules/padded-blocks.js b/lib/rules/padded-blocks.js\nindex edb44637be..12d227f6b1 100644\n--- a/lib/rules/padded-blocks.js\n+++ b/lib/rules/padded-blocks.js\n@@ -16,6 +16,30 @@ module.exports = function (context) {\n     var ALWAYS_MESSAGE = \"Block must be padded by blank lines.\",\n         NEVER_MESSAGE = \"Block must not be padded by blank lines.\";\n \n+    /**\n+     * Retrieves an array of all comments defined inside the given node.\n+     * @param {ASTNode} node The AST node.\n+     * @returns {ASTNode[]} An array of comment nodes.\n+     */\n+    function getCommentsInNode(node) {\n+        var allComments = context.getAllComments();\n+\n+        return allComments.filter(function (comment) {\n+            return node.range[0] < comment.range[0] &&\n+                node.range[1] > comment.range[1];\n+        });\n+    }\n+\n+    /**\n+     * Checks if the location of a node or token is before the location of another node or token\n+     * @param {ASTNode|Token} a The node or token to check if its location is before b.\n+     * @param {ASTNode|Token} b The node or token which will be compared with a.\n+     * @returns {boolean} True if a is located before b.\n+     */\n+    function isLocatedBefore(a, b) {\n+        return a.range[1] < b.range[0];\n+    }\n+\n     /**\n      * Checks if the given non empty block node has a blank line before its first child node.\n      * @param {ASTNode} node The AST node of a BlockStatement.\n@@ -26,10 +50,11 @@ module.exports = function (context) {\n             first = node.body[0],\n             firstLine = first.loc.start.line,\n             expectedFirstLine = blockStart + 2,\n-            leadingComments = context.getComments(first).leading;\n+            comments = getCommentsInNode(node),\n+            firstComment = comments[0];\n \n-        if (leadingComments.length > 0) {\n-            firstLine = leadingComments[0].loc.start.line;\n+        if (firstComment && isLocatedBefore(firstComment, first)) {\n+            firstLine = firstComment.loc.start.line;\n         }\n \n         return expectedFirstLine <= firstLine;\n@@ -43,12 +68,14 @@ module.exports = function (context) {\n     function isBlockBottomPadded(node) {\n         var blockEnd = node.loc.end.line,\n             last = node.body[node.body.length - 1],\n-            lastLine = context.getLastToken(last).loc.end.line,\n+            lastToken = context.getLastToken(last),\n+            lastLine = lastToken.loc.end.line,\n             expectedLastLine = blockEnd - 2,\n-            trailingComments = context.getComments(last).trailing;\n+            comments = getCommentsInNode(node),\n+            lastComment = comments[comments.length - 1];\n \n-        if (trailingComments.length > 0) {\n-            lastLine = trailingComments[trailingComments.length - 1].loc.end.line;\n+        if (lastComment && isLocatedBefore(lastToken, lastComment)) {\n+            lastLine = lastComment.loc.end.line;\n         }\n \n         return lastLine <= expectedLastLine;\n",
        "bugId": 246,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "FALSEY-CHK",
            "MD-ADD",
            "MD-ADD",
            "IF-CC",
            "AS-CE",
            "AS-CE",
            "IF-CC",
            "AS-CE"
        ],
        "failingTests": 4638
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    110
                ]
            },
            "lib/ast-utils.js": {
                "changes": [
                    24
                ]
            },
            "lib/rules/no-empty-character-class.js": {
                "changes": [
                    24
                ]
            },
            "lib/rules/curly.js": {
                "changes": [
                    198
                ]
            },
            "lib/rules/semi.js": {
                "changes": [
                    56
                ]
            },
            "lib/config/config-file.js": {
                "changes": [
                    444
                ]
            },
            "lib/rules/keyword-spacing.js": {
                "changes": [
                    19
                ]
            },
            "lib/rules/no-warning-comments.js": {
                "changes": [
                    57
                ]
            },
            "lib/rules/arrow-body-style.js": {
                "changes": [
                    108
                ]
            },
            "lib/rules/no-useless-escape.js": {
                "insert": [
                    12
                ],
                "changes": [
                    26,
                    58,
                    74,
                    82,
                    108,
                    151,
                    153,
                    158
                ],
                "deletes": [
                    28,
                    43,
                    132
                ]
            },
            "lib/rules/no-lonely-if.js": {
                "changes": [
                    58
                ]
            },
            "lib/util/glob-util.js": {
                "changes": [
                    70,
                    163
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 12,
            "sizeInLines": 68,
            "linesRem": 17,
            "linesAdd": 14,
            "chunks": 25,
            "linesMod": 37
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex 9e171ea316..ef515f8f22 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -21,7 +21,7 @@ const arrayOrTypedArrayPattern = /Array$/;\n const arrayMethodPattern = /^(?:every|filter|find|findIndex|forEach|map|some)$/;\n const bindOrCallOrApplyPattern = /^(?:bind|call|apply)$/;\n const breakableTypePattern = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/;\n-const thisTagPattern = /^[\\s\\*]*@this/m;\n+const thisTagPattern = /^[\\s*]*@this/m;\n \n /**\n  * Checks reference if is non initializer and writable.\ndiff --git a/lib/config/config-file.js b/lib/config/config-file.js\nindex b8e3a1027a..980641f0a4 100644\n--- a/lib/config/config-file.js\n+++ b/lib/config/config-file.js\n@@ -441,7 +441,7 @@ function normalizePackageName(name, prefix) {\n              * for scoped packages, insert the eslint-config after the first / unless\n              * the path is already @scope/eslint or @scope/eslint-config-xxx\n              */\n-            name = name.replace(/^@([^\\/]+)\\/(.*)$/, `@$1/${prefix}-$2`);\n+            name = name.replace(/^@([^/]+)\\/(.*)$/, `@$1/${prefix}-$2`);\n         }\n     } else if (name.indexOf(`${prefix}-`) !== 0) {\n         name = `${prefix}-${name}`;\ndiff --git a/lib/eslint.js b/lib/eslint.js\nindex b221f2e395..a54ca3a134 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -107,7 +107,7 @@ function parseJsonConfig(string, location, messages) {\n     // Optionator cannot parse commaless notations.\n     // But we are supporting that. So this is a fallback for that.\n     items = {};\n-    string = string.replace(/([a-zA-Z0-9\\-\\/]+):/g, \"\\\"$1\\\":\").replace(/(\\]|[0-9])\\s+(?=\")/, \"$1,\");\n+    string = string.replace(/([a-zA-Z0-9\\-/]+):/g, \"\\\"$1\\\":\").replace(/(]|[0-9])\\s+(?=\")/, \"$1,\");\n     try {\n         items = JSON.parse(`{${string}}`);\n     } catch (ex) {\ndiff --git a/lib/rules/arrow-body-style.js b/lib/rules/arrow-body-style.js\nindex ac0f442a3f..d6290e74f1 100644\n--- a/lib/rules/arrow-body-style.js\n+++ b/lib/rules/arrow-body-style.js\n@@ -105,7 +105,7 @@ module.exports = {\n \n                             const tokenAfterArrowBody = sourceCode.getTokenAfter(arrowBody);\n \n-                            if (tokenAfterArrowBody && tokenAfterArrowBody.type === \"Punctuator\" && /^[(\\[\\/`+-]/.test(tokenAfterArrowBody.value)) {\n+                            if (tokenAfterArrowBody && tokenAfterArrowBody.type === \"Punctuator\" && /^[([/`+-]/.test(tokenAfterArrowBody.value)) {\n \n                                 // Don't do a fix if the next token would cause ASI issues when preceded by the returned value.\n                                 return null;\ndiff --git a/lib/rules/curly.js b/lib/rules/curly.js\nindex 02d74a1e03..1f632ec5c1 100644\n--- a/lib/rules/curly.js\n+++ b/lib/rules/curly.js\n@@ -195,7 +195,7 @@ module.exports = {\n                 return true;\n             }\n \n-            if (/^[(\\[\\/`+-]/.test(tokenAfter.value)) {\n+            if (/^[([/`+-]/.test(tokenAfter.value)) {\n \n                 // If the next token starts with a character that would disrupt ASI, insert a semicolon.\n                 return true;\ndiff --git a/lib/rules/keyword-spacing.js b/lib/rules/keyword-spacing.js\nindex 4a6a024552..88941be636 100644\n--- a/lib/rules/keyword-spacing.js\n+++ b/lib/rules/keyword-spacing.js\n@@ -16,10 +16,10 @@ const astUtils = require(\"../ast-utils\"),\n // Constants\n //------------------------------------------------------------------------------\n \n-const PREV_TOKEN = /^[\\)\\]\\}>]$/;\n-const NEXT_TOKEN = /^(?:[\\(\\[\\{<~!]|\\+\\+?|--?)$/;\n-const PREV_TOKEN_M = /^[\\)\\]\\}>*]$/;\n-const NEXT_TOKEN_M = /^[\\{*]$/;\n+const PREV_TOKEN = /^[)\\]}>]$/;\n+const NEXT_TOKEN = /^(?:[([{<~!]|\\+\\+?|--?)$/;\n+const PREV_TOKEN_M = /^[)\\]}>*]$/;\n+const NEXT_TOKEN_M = /^[{*]$/;\n const TEMPLATE_OPEN_PAREN = /\\$\\{$/;\n const TEMPLATE_CLOSE_PAREN = /^\\}/;\n const CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template)$/;\ndiff --git a/lib/rules/no-empty-character-class.js b/lib/rules/no-empty-character-class.js\nindex 723cebc945..ce1c24f3d0 100644\n--- a/lib/rules/no-empty-character-class.js\n+++ b/lib/rules/no-empty-character-class.js\n@@ -21,7 +21,7 @@ plain-English description of the following regexp:\n 4. `[gimuy]*`: optional regexp flags\n 5. `$`: fix the match at the end of the string\n */\n-const regex = /^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*\\/[gimuy]*$/;\n+const regex = /^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+])*\\/[gimuy]*$/;\n \n //------------------------------------------------------------------------------\n // Rule Definition\ndiff --git a/lib/rules/no-lonely-if.js b/lib/rules/no-lonely-if.js\nindex 19517bc3dc..31f47b90e0 100644\n--- a/lib/rules/no-lonely-if.js\n+++ b/lib/rules/no-lonely-if.js\n@@ -55,7 +55,7 @@ module.exports = {\n                                 node.consequent.type !== \"BlockStatement\" && lastIfToken.value !== \";\" && tokenAfterElseBlock &&\n                                 (\n                                     node.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line ||\n-                                    /^[(\\[\\/+`-]/.test(tokenAfterElseBlock.value) ||\n+                                    /^[([/+`-]/.test(tokenAfterElseBlock.value) ||\n                                     lastIfToken.value === \"++\" ||\n                                     lastIfToken.value === \"--\"\n                                 )\ndiff --git a/lib/rules/no-useless-escape.js b/lib/rules/no-useless-escape.js\nindex eaa8f4a90f..f47f2b73d3 100644\n--- a/lib/rules/no-useless-escape.js\n+++ b/lib/rules/no-useless-escape.js\n@@ -9,6 +9,19 @@\n // Rule Definition\n //------------------------------------------------------------------------------\n \n+/**\n+* Returns the union of two sets.\n+* @param {Set} setA The first set\n+* @param {Set} setB The second set\n+* @returns {Set} The union of the two sets\n+*/\n+function union(setA, setB) {\n+    return new Set(function *() {\n+        yield* setA;\n+        yield* setB;\n+    }());\n+}\n+\n const VALID_STRING_ESCAPES = [\n     \"\\\\\",\n     \"n\",\n@@ -23,24 +36,9 @@ const VALID_STRING_ESCAPES = [\n     \"\\r\"\n ];\n \n-const VALID_REGEX_ESCAPES = [\n+const REGEX_GENERAL_ESCAPES = new Set([\n     \"\\\\\",\n-    \".\",\n-    \"-\",\n-    \"^\",\n-    \"$\",\n-    \"*\",\n-    \"+\",\n-    \"?\",\n-    \"{\",\n-    \"}\",\n-    \"[\",\n-    \"]\",\n-    \"|\",\n-    \"(\",\n-    \")\",\n     \"b\",\n-    \"B\",\n     \"c\",\n     \"d\",\n     \"D\",\n@@ -55,7 +53,66 @@ const VALID_REGEX_ESCAPES = [\n     \"W\",\n     \"x\",\n     \"u\"\n-];\n+]);\n+const REGEX_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set([\"]\"]));\n+const REGEX_NON_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set([\n+    \"^\",\n+    \"/\",\n+    \".\",\n+    \"$\",\n+    \"*\",\n+    \"+\",\n+    \"?\",\n+    \"[\",\n+    \"{\",\n+    \"}\",\n+    \"|\",\n+    \"(\",\n+    \")\",\n+    \"B\"\n+]));\n+\n+/**\n+* Parses a regular expression into a list of characters with character class info.\n+* @param {string} regExpText The raw text used to create the regular expression\n+* @returns {Object[]} A list of characters, each with info on escaping and whether they're in a character class.\n+* @example\n+*\n+* parseRegExp('a\\\\b[cd-]')\n+*\n+* returns:\n+* [\n+*   {text: 'a', index: 0, escaped: false, inCharClass: false, startsCharClass: false, endsCharClass: false},\n+*   {text: 'b', index: 2, escaped: true, inCharClass: false, startsCharClass: false, endsCharClass: false},\n+*   {text: 'c', index: 4, escaped: false, inCharClass: true, startsCharClass: true, endsCharClass: false},\n+*   {text: 'd', index: 5, escaped: false, inCharClass: true, startsCharClass: false, endsCharClass: false},\n+*   {text: '-', index: 6, escaped: false, inCharClass: true, startsCharClass: false, endsCharClass: false}\n+* ]\n+*/\n+function parseRegExp(regExpText) {\n+    const charList = [];\n+\n+    regExpText.split(\"\").reduce((state, char, index) => {\n+        if (!state.escapeNextChar) {\n+            if (char === \"\\\\\") {\n+                return Object.assign(state, {escapeNextChar: true});\n+            }\n+            if (char === \"[\" && !state.inCharClass) {\n+                return Object.assign(state, {inCharClass: true, startingCharClass: true});\n+            }\n+            if (char === \"]\" && state.inCharClass) {\n+                if (charList.length && charList[charList.length - 1].inCharClass) {\n+                    charList[charList.length - 1].endsCharClass = true;\n+                }\n+                return Object.assign(state, {inCharClass: false, startingCharClass: false});\n+            }\n+        }\n+        charList.push({text: char, index, escaped: state.escapeNextChar, inCharClass: state.inCharClass, startsCharClass: state.startingCharClass, endsCharClass: false});\n+        return Object.assign(state, {escapeNextChar: false, startingCharClass: false});\n+    }, {escapeNextChar: false, inCharClass: false, startingCharClass: false});\n+\n+    return charList;\n+}\n \n module.exports = {\n     meta: {\n@@ -71,7 +128,26 @@ module.exports = {\n     create(context) {\n \n         /**\n-         * Checks if the escape character in given slice is unnecessary.\n+         * Reports a node\n+         * @param {ASTNode} node The node to report\n+         * @param {number} startOffset The backslash's offset from the start of the node\n+         * @param {string} character The uselessly escaped character (not including the backslash)\n+         * @returns {void}\n+         */\n+        function report(node, startOffset, character) {\n+            context.report({\n+                node,\n+                loc: {\n+                    line: node.loc.start.line,\n+                    column: node.loc.start.column + startOffset\n+                },\n+                message: \"Unnecessary escape character: \\\\{{character}}.\",\n+                data: {character}\n+            });\n+        }\n+\n+        /**\n+         * Checks if the escape character in given string slice is unnecessary.\n          *\n          * @private\n          * @param {string[]} escapes - list of valid escapes\n@@ -79,7 +155,7 @@ module.exports = {\n          * @param {string} match - string slice to validate.\n          * @returns {void}\n          */\n-        function validate(escapes, node, match) {\n+        function validateString(escapes, node, match) {\n             const isTemplateElement = node.type === \"TemplateElement\";\n             const escapedChar = match[0][1];\n             let isUnnecessaryEscape = escapes.indexOf(escapedChar) === -1;\n@@ -105,17 +181,7 @@ module.exports = {\n             }\n \n             if (isUnnecessaryEscape && !isQuoteEscape) {\n-                context.report({\n-                    node,\n-                    loc: {\n-                        line: node.loc.start.line,\n-                        column: node.loc.start.column + match.index\n-                    },\n-                    message: \"Unnecessary escape character: {{character}}.\",\n-                    data: {\n-                        character: match[0]\n-                    }\n-                });\n+                report(node, match.index, match[0].slice(1));\n             }\n         }\n \n@@ -129,8 +195,6 @@ module.exports = {\n             const isTemplateElement = node.type === \"TemplateElement\";\n             const value = isTemplateElement ? node.value.raw : node.raw;\n             const pattern = /\\\\[^\\d]/g;\n-            let nodeEscapes,\n-                match;\n \n             if (isTemplateElement && node.parent && node.parent.parent && node.parent.parent.type === \"TaggedTemplateExpression\") {\n \n@@ -148,16 +212,40 @@ module.exports = {\n                     return;\n                 }\n \n-                nodeEscapes = VALID_STRING_ESCAPES;\n+                let match;\n+\n+                while ((match = pattern.exec(value))) {\n+                    validateString(VALID_STRING_ESCAPES, node, match);\n+                }\n             } else if (node.regex) {\n-                nodeEscapes = VALID_REGEX_ESCAPES;\n-            } else {\n-                return;\n-            }\n+                parseRegExp(node.regex.pattern)\n \n-            while ((match = pattern.exec(value))) {\n-                validate(nodeEscapes, node, match);\n+                    /*\n+                     * The '-' character is a special case, because it's only valid to escape it if it's in a character\n+                     * class, and is not at either edge of the character class. To account for this, don't consider '-'\n+                     * characters to be valid in general, and filter out '-' characters that appear in the middle of a\n+                     * character class.\n+                     */\n+                    .filter(charInfo => !(charInfo.text === \"-\" && charInfo.inCharClass && !charInfo.startsCharClass && !charInfo.endsCharClass))\n+\n+                    /*\n+                     * The '^' character is also a special case; it must always be escaped outside of character classes, but\n+                     * it only needs to be escaped in character classes if it's at the beginning of the character class. To\n+                     * account for this, consider it to be a valid escape character outside of character classes, and filter\n+                     * out '^' characters that appear at the start of a character class.\n+                     */\n+                    .filter(charInfo => !(charInfo.text === \"^\" && charInfo.startsCharClass))\n+\n+                    // Filter out characters that aren't escaped.\n+                    .filter(charInfo => charInfo.escaped)\n+\n+                    // Filter out characters that are valid to escape, based on their position in the regular expression.\n+                    .filter(charInfo => !(charInfo.inCharClass ? REGEX_CHARCLASS_ESCAPES : REGEX_NON_CHARCLASS_ESCAPES).has(charInfo.text))\n+\n+                    // Report all the remaining characters.\n+                    .forEach(charInfo => report(node, charInfo.index, charInfo.text));\n             }\n+\n         }\n \n         return {\ndiff --git a/lib/rules/no-warning-comments.js b/lib/rules/no-warning-comments.js\nindex 511bd9bb48..91390602ad 100644\n--- a/lib/rules/no-warning-comments.js\n+++ b/lib/rules/no-warning-comments.js\n@@ -54,7 +54,7 @@ module.exports = {\n          * @returns {RegExp} The term converted to a RegExp\n          */\n         function convertToRegExp(term) {\n-            const escaped = term.replace(/[-\\/\\\\$\\^*+?.()|\\[\\]{}]/g, \"\\\\$&\");\n+            const escaped = term.replace(/[-/\\\\$^*+?.()|[\\]{}]/g, \"\\\\$&\");\n             let prefix;\n \n             /*\ndiff --git a/lib/rules/semi.js b/lib/rules/semi.js\nindex 2f28f1614d..b69620216a 100644\n--- a/lib/rules/semi.js\n+++ b/lib/rules/semi.js\n@@ -53,7 +53,7 @@ module.exports = {\n \n     create(context) {\n \n-        const OPT_OUT_PATTERN = /^[-[(\\/+]$/; // One of [(/+-, but not ++ or --\n+        const OPT_OUT_PATTERN = /^[-[(/+]$/; // One of [(/+-, but not ++ or --\n         const options = context.options[1];\n         const never = context.options[0] === \"never\",\n             exceptOneLine = options && options.omitLastInOneLineBlock === true,\ndiff --git a/lib/util/glob-util.js b/lib/util/glob-util.js\nindex cba2e694ad..07729aa5d4 100644\n--- a/lib/util/glob-util.js\n+++ b/lib/util/glob-util.js\n@@ -67,7 +67,7 @@ function processPath(options) {\n         const resolvedPath = path.resolve(cwd, pathname);\n \n         if (shell.test(\"-d\", resolvedPath)) {\n-            newPath = pathname.replace(/[\\/\\\\]$/, \"\") + suffix;\n+            newPath = pathname.replace(/[/\\\\]$/, \"\") + suffix;\n         }\n \n         return pathUtil.convertPathToPosix(newPath);\n@@ -160,7 +160,7 @@ function listFilesToProcess(globPatterns, options) {\n         } else {\n \n             // regex to find .hidden or /.hidden patterns, but not ./relative or ../relative\n-            const globIncludesDotfiles = /(?:(?:^\\.)|(?:[\\/\\\\]\\.))[^\\/\\\\\\.].*/.test(pattern);\n+            const globIncludesDotfiles = /(?:(?:^\\.)|(?:[/\\\\]\\.))[^/\\\\.].*/.test(pattern);\n \n             const ignoredPaths = new IgnoredPaths(Object.assign({}, options, {dotfiles: options.dotfiles || globIncludesDotfiles}));\n             const shouldIgnore = ignoredPaths.getIgnoredFoldersGlobChecker();\n",
        "bugId": 245,
        "tax": "IncorFI-IncorHRE",
        "pan_cat": [
            "AS-CE",
            "MC-DAP",
            "MC-DAP",
            "IF-CC",
            "IF-CC",
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "IF-CC",
            "MD-ADD",
            "MD-ADD",
            "MD-ADD",
            "MC-DAP",
            "AS-CE",
            "MC-DAP",
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-implied-eval.js": {
                "changes": [
                    24
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-implied-eval.js b/lib/rules/no-implied-eval.js\nindex a49fd21d9b..4daadd8fb8 100644\n--- a/lib/rules/no-implied-eval.js\n+++ b/lib/rules/no-implied-eval.js\n@@ -21,7 +21,7 @@ module.exports = {\n     },\n \n     create(context) {\n-        const CALLEE_RE = /set(?:Timeout|Interval)|execScript/;\n+        const CALLEE_RE = /^(setTimeout|setInterval|execScript)$/;\n \n         /*\n          * Figures out if we should inspect a given binary expression. Is a stack\n",
        "bugId": 244,
        "tax": "IncorFI-IncorHRE",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/unicode-bom.js": {
                "changes": [
                    48
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/unicode-bom.js b/lib/rules/unicode-bom.js\nindex 2f16a25850..7109a49edb 100644\n--- a/lib/rules/unicode-bom.js\n+++ b/lib/rules/unicode-bom.js\n@@ -45,7 +45,7 @@ module.exports = {\n                         loc: location,\n                         message: \"Expected Unicode BOM (Byte Order Mark).\",\n                         fix(fixer) {\n-                            return fixer.insertTextBefore(node, \"\\uFEFF\");\n+                            return fixer.insertTextBeforeRange([0, 1], \"\\uFEFF\");\n                         }\n                     });\n                 } else if (sourceCode.hasBOM && (requireBOM === \"never\")) {\n",
        "bugId": 243,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DM"
        ],
        "failingTests": 32
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-return.js": {
                "insert": [
                    110,
                    179,
                    182
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 3,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-useless-return.js b/lib/rules/no-useless-return.js\nindex 5aac24dd0a..706cf27586 100644\n--- a/lib/rules/no-useless-return.js\n+++ b/lib/rules/no-useless-return.js\n@@ -107,6 +107,7 @@ module.exports = {\n \n     create(context) {\n         const segmentInfoMap = new WeakMap();\n+        const usedUnreachableSegments = new WeakSet();\n         let scopeInfo = null;\n \n         /**\n@@ -175,8 +176,10 @@ module.exports = {\n          */\n         function markReturnStatementsOnSegmentAsUsed(segment) {\n             if (!segment.reachable) {\n+                usedUnreachableSegments.add(segment);\n                 segment.allPrevSegments\n                     .filter(isReturned)\n+                    .filter(prevSegment => !usedUnreachableSegments.has(prevSegment))\n                     .forEach(markReturnStatementsOnSegmentAsUsed);\n                 return;\n             }\n",
        "bugId": 242,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "insert": [
                    236
                ],
                "changes": [
                    247
                ],
                "deletes": [
                    245
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 21,
            "linesRem": 1,
            "linesAdd": 17,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex 06863ed0ad..a0138f12c2 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -233,6 +233,23 @@ module.exports = function(context) {\n         return unusedVars;\n     }\n \n+    /**\n+     * Gets the index of a given variable name in a given comment.\n+     * @param {escope.Variable} variable - A variable to get.\n+     * @param {ASTNode} comment - A comment node which includes the variable name.\n+     * @returns {number} The index of the variable name's location.\n+     */\n+    function getColumnInComment(variable, comment) {\n+        var namePattern = new RegExp(\"[\\\\s,]\" + escape(variable.name) + \"(?:$|[\\\\s,:])\", \"g\");\n+\n+        // To ignore the first text \"global\".\n+        namePattern.lastIndex = comment.value.indexOf(\"global\") + 6;\n+\n+        // Search a given variable name.\n+        var match = namePattern.exec(comment.value);\n+        return match ? match.index + 1 : 0;\n+    }\n+\n     /**\n      * Creates the correct location of a given variables.\n      * The location is at its name string in a `/*global` comment.\n@@ -242,11 +259,9 @@ module.exports = function(context) {\n      */\n     function getLocation(variable) {\n         var comment = variable.eslintExplicitGlobalComment;\n-        var content = comment.value;\n         var baseLoc = comment.loc.start;\n-        var namePattern = new RegExp(\"\\\\b\" + escape(variable.name) + \"\\\\b\");\n-        var column = namePattern.exec(content).index;\n-        var prefix = content.slice(0, column);\n+        var column = getColumnInComment(variable, comment);\n+        var prefix = comment.value.slice(0, column);\n         var lineInComment = (prefix.match(/\\n/g) || []).length;\n \n         if (lineInComment > 0) {\n",
        "bugId": 241,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/arrow-parens.js": {
                "changes": [
                    61,
                    98
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/arrow-parens.js b/lib/rules/arrow-parens.js\nindex 67bfdf541c..e069e307eb 100644\n--- a/lib/rules/arrow-parens.js\n+++ b/lib/rules/arrow-parens.js\n@@ -58,7 +58,9 @@ module.exports = {\n                 requireForBlockBody &&\n                 node.params.length === 1 &&\n                 node.params[0].type === \"Identifier\" &&\n-                node.body.type !== \"BlockStatement\"\n+                !node.params[0].typeAnnotation &&\n+                node.body.type !== \"BlockStatement\" &&\n+                !node.returnType\n             ) {\n                 if (token.type === \"Punctuator\" && token.value === \"(\") {\n                     context.report({\n@@ -95,7 +97,12 @@ module.exports = {\n             }\n \n             // \"as-needed\": x => x\n-            if (asNeeded && node.params.length === 1 && node.params[0].type === \"Identifier\") {\n+            if (asNeeded &&\n+                node.params.length === 1 &&\n+                node.params[0].type === \"Identifier\" &&\n+                !node.params[0].typeAnnotation &&\n+                !node.returnType\n+            ) {\n                 if (token.type === \"Punctuator\" && token.value === \"(\") {\n                     context.report({\n                         node,\n",
        "bugId": 240,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "FALSEY-CHK",
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/capitalized-comments.js": {
                "insert": [
                    235
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 4,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/capitalized-comments.js b/lib/rules/capitalized-comments.js\nindex 9948e53dff..98d860c2bc 100644\n--- a/lib/rules/capitalized-comments.js\n+++ b/lib/rules/capitalized-comments.js\n@@ -232,6 +232,10 @@ module.exports = {\n             const commentWordCharsOnly = commentWithoutAsterisks\n                 .replace(WHITESPACE, \"\");\n \n+            if (commentWordCharsOnly.length === 0) {\n+                return true;\n+            }\n+\n             const firstWordChar = commentWordCharsOnly[0];\n \n             if (!LETTER_PATTERN.test(firstWordChar)) {\n",
        "bugId": 239,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "conf/cli-options.js": {
                "changes": [
                    21
                ],
                "deletes": [
                    8
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 2,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/conf/cli-options.js b/conf/cli-options.js\nindex 83c815987b..b377f3da7f 100644\n--- a/conf/cli-options.js\n+++ b/conf/cli-options.js\n@@ -5,8 +5,6 @@\n \n \"use strict\";\n \n-var DEFAULT_PARSER = require(\"../conf/eslint.json\").parser;\n-\n module.exports = {\n     configFile: null,\n     baseConfig: false,\n@@ -18,8 +16,9 @@ module.exports = {\n     extensions: [\".js\"],\n     ignore: true,\n     ignorePath: null,\n-    parser: DEFAULT_PARSER,\n+    parser: \"\",     // must be empty\n     cache: false,\n+\n     // in order to honor the cacheFile option if specified\n     // this option should not have a default value otherwise\n     // it will always be used\n",
        "bugId": 238,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/brace-style.js": {
                "insert": [
                    143
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/brace-style.js b/lib/rules/brace-style.js\nindex c109228bd8..bde74371e4 100644\n--- a/lib/rules/brace-style.js\n+++ b/lib/rules/brace-style.js\n@@ -140,6 +140,9 @@ module.exports = {\n             BlockStatement(node) {\n                 validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));\n             },\n+            ClassBody(node) {\n+                validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));\n+            },\n             SwitchStatement(node) {\n                 const closingCurly = sourceCode.getLastToken(node);\n                 const openingCurly = sourceCode.getTokenBefore(node.cases.length ? node.cases[0] : closingCurly);\n",
        "bugId": 237,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    786
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 45332f4473..429567ee56 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -783,7 +783,7 @@ module.exports = {\n             offsets.setDesiredOffsets(\n                 [startToken.range[1], endToken.range[0]],\n                 startToken,\n-                offset === \"first\" ? 1 : offset\n+                typeof offset === \"number\" ? offset : 1\n             );\n             offsets.setDesiredOffset(endToken, startToken, 0);\n \n",
        "bugId": 236,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/key-spacing.js": {
                "changes": [
                    420
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/key-spacing.js b/lib/rules/key-spacing.js\nindex 7a4ee82f00..8d7564a5bb 100644\n--- a/lib/rules/key-spacing.js\n+++ b/lib/rules/key-spacing.js\n@@ -417,8 +417,8 @@ module.exports = {\n         function report(property, side, whitespace, expected, mode) {\n             const diff = whitespace.length - expected,\n                 nextColon = getNextColon(property.key),\n-                tokenBeforeColon = sourceCode.getTokenBefore(nextColon),\n-                tokenAfterColon = sourceCode.getTokenAfter(nextColon),\n+                tokenBeforeColon = sourceCode.getTokenOrCommentBefore(nextColon),\n+                tokenAfterColon = sourceCode.getTokenOrCommentAfter(nextColon),\n                 isKeySide = side === \"key\",\n                 locStart = isKeySide ? tokenBeforeColon.loc.start : tokenAfterColon.loc.start,\n                 isExtra = diff > 0,\n",
        "bugId": 235,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [
            "MC-DM",
            "MC-DM"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-rename.js": {
                "changes": [
                    90
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-useless-rename.js b/lib/rules/no-useless-rename.js\nindex cb828dedbe..4efe8f8e93 100644\n--- a/lib/rules/no-useless-rename.js\n+++ b/lib/rules/no-useless-rename.js\n@@ -87,7 +87,13 @@ module.exports = {\n                     return;\n                 }\n \n-                if (properties[i].computed) {\n+                /**\n+                 * If an ObjectPattern property is computed, we have no idea\n+                 * if a rename is useless or not. If an ObjectPattern property\n+                 * lacks a key, it is likely an ExperimentalRestProperty and\n+                 * so there is no \"renaming\" occurring here.\n+                 */\n+                if (properties[i].computed || !properties[i].key) {\n                     return;\n                 }\n \n",
        "bugId": 234,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/cli-engine.js": {
                "changes": [
                    745
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/cli-engine.js b/lib/cli-engine.js\nindex a6f6b66584..dd024859a8 100644\n--- a/lib/cli-engine.js\n+++ b/lib/cli-engine.js\n@@ -742,8 +742,11 @@ CLIEngine.prototype = {\n         if (filename && !path.isAbsolute(filename)) {\n             filename = path.resolve(options.cwd, filename);\n         }\n-        if (filename && warnIgnored && ignoredPaths.contains(filename)) {\n-            results.push(createIgnoreResult(filename, options.cwd));\n+\n+        if (filename && ignoredPaths.contains(filename)) {\n+            if (warnIgnored) {\n+                results.push(createIgnoreResult(filename, options.cwd));\n+            }\n         } else {\n             results.push(processText(text, configHelper, filename, options.fix, options.allowInlineConfig));\n         }\n",
        "bugId": 233,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-APC",
            "IF-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    732
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 6c3c27c8e1..2762027e52 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -729,7 +729,7 @@ module.exports = {\n                         } else if (parent.type === \"ObjectExpression\" || parent.type === \"ArrayExpression\") {\n                             const parentElements = node.parent.type === \"ObjectExpression\" ? node.parent.properties : node.parent.elements;\n \n-                            if (parentElements[0].loc.start.line === parent.loc.start.line && parentElements[0].loc.end.line !== parent.loc.start.line) {\n+                            if (parentElements[0] && parentElements[0].loc.start.line === parent.loc.start.line && parentElements[0].loc.end.line !== parent.loc.start.line) {\n \n                                 /*\n                                  * If the first element of the array spans multiple lines, don't increase the expected indentation of the rest.\n",
        "bugId": 232,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/no-multiple-empty-lines.js": {
                "changes": [
                    91
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-multiple-empty-lines.js b/lib/rules/no-multiple-empty-lines.js\nindex 77bb341aef..46080277bc 100644\n--- a/lib/rules/no-multiple-empty-lines.js\n+++ b/lib/rules/no-multiple-empty-lines.js\n@@ -88,7 +88,7 @@ module.exports = function(context) {\n                         // within the file, not at the end\n                         if (blankCounter >= max) {\n                             context.report(node, location,\n-                                    \"More than \" + max + \" blank lines not allowed.\");\n+                                    \"More than \" + max + \" blank \" + (max === 1 ? \"line\" : \"lines\") + \" not allowed.\");\n                         }\n                     } else {\n                         // inside the last blank lines\n",
        "bugId": 231,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 17
    },
    {
        "changedFiles": {
            "lib/rules/sort-keys.js": {
                "insert": [
                    127
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 4,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/sort-keys.js b/lib/rules/sort-keys.js\nindex 1c8a97b1d0..3acb227209 100644\n--- a/lib/rules/sort-keys.js\n+++ b/lib/rules/sort-keys.js\n@@ -124,6 +124,10 @@ module.exports = {\n             },\n \n             Property(node) {\n+                if (node.parent.type === \"ObjectPattern\") {\n+                    return;\n+                }\n+\n                 const prevName = stack.prevName;\n                 const thisName = getPropertyName(node);\n \n",
        "bugId": 230,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/object-shorthand.js": {
                "insert": [
                    103,
                    300
                ],
                "changes": [
                    300,
                    306,
                    318,
                    324
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 19,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 7,
            "linesMod": 10
        },
        "diff": "diff --git a/lib/rules/object-shorthand.js b/lib/rules/object-shorthand.js\nindex 3ef782461a..7ac6048d2a 100644\n--- a/lib/rules/object-shorthand.js\n+++ b/lib/rules/object-shorthand.js\n@@ -100,6 +100,7 @@ module.exports = {\n         const PARAMS = context.options[1] || {};\n         const IGNORE_CONSTRUCTORS = PARAMS.ignoreConstructors;\n         const AVOID_QUOTES = PARAMS.avoidQuotes;\n+        const sourceCode = context.getSourceCode();\n \n         //--------------------------------------------------------------------------\n         // Helpers\n@@ -296,14 +297,19 @@ module.exports = {\n                             node,\n                             message: \"Expected method shorthand.\",\n                             fix(fixer) {\n+\n+                                // NOTE: If this rule is enhanced to handle arrow functions as well, this logic needs to be updated.\n+                                const functionToken = sourceCode.getTokens(node).find(token => token.type === \"Keyword\" && token.value === \"function\");\n+\n                                 if (node.value.generator) {\n-                                    return fixer.replaceTextRange(\n-                                        [node.key.range[0], node.value.range[0] + \"function*\".length],\n-                                        `*[${node.key.name}]`\n-                                    );\n+                                    return fixer.replaceTextRange([sourceCode.getTokenBefore(node.key).range[0], sourceCode.getTokenAfter(functionToken).range[1]], `*[${sourceCode.getText(node.key)}]`);\n+                                }\n+\n+                                if (node.value.async) {\n+                                    return fixer.replaceTextRange([sourceCode.getTokenBefore(node.key).range[0], functionToken.range[1]], `async [${sourceCode.getText(node.key)}]`);\n                                 }\n \n-                                return fixer.removeRange([node.key.range[1] + 1, node.value.range[0] + \"function\".length]);\n+                                return fixer.removeRange([sourceCode.getTokenAfter(node.key).range[1], functionToken.range[1]]);\n                             }\n                         });\n                         return;\n@@ -314,14 +320,19 @@ module.exports = {\n                         node,\n                         message: \"Expected method shorthand.\",\n                         fix(fixer) {\n+\n+                            // NOTE: If this rule is enhanced to handle arrow functions as well, this logic needs to be updated.\n+                            const functionToken = sourceCode.getTokens(node).find(token => token.type === \"Keyword\" && token.value === \"function\");\n+\n                             if (node.value.generator) {\n-                                return fixer.replaceTextRange(\n-                                    [node.key.range[0], node.value.range[0] + \"function*\".length],\n-                                    `*${node.key.name}`\n-                                );\n+                                return fixer.replaceTextRange([node.key.range[0], sourceCode.getTokenAfter(functionToken).range[1]], `*${sourceCode.getText(node.key)}`);\n+                            }\n+\n+                            if (node.value.async) {\n+                                return fixer.replaceTextRange([node.key.range[0], functionToken.range[1]], `async ${sourceCode.getText(node.key)}`);\n                             }\n \n-                            return fixer.removeRange([node.key.range[1], node.value.range[0] + \"function\".length]);\n+                            return fixer.removeRange([node.key.range[1], functionToken.range[1]]);\n                         }\n                     });\n                 } else if (node.value.type === \"Identifier\" && node.key.name === node.value.name && APPLY_TO_PROPS) {\n",
        "bugId": 229,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP",
            "IF-APCJ",
            "MC-DAP",
            "MC-DAP",
            "IF-APCJ",
            "MC-DAP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/cli.js": {
                "insert": [
                    147
                ],
                "changes": [
                    156,
                    167,
                    173,
                    180,
                    187
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 6,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/cli.js b/lib/cli.js\nindex f044480970..6a5482bf9a 100644\n--- a/lib/cli.js\n+++ b/lib/cli.js\n@@ -144,6 +144,8 @@ const cli = {\n \n         const files = currentOptions._;\n \n+        const useStdin = typeof text === \"string\";\n+\n         if (currentOptions.version) { // version from package.json\n \n             log.info(`v${require(\"../package.json\").version}`);\n@@ -153,7 +155,7 @@ const cli = {\n                 log.error(\"The --print-config option must be used with exactly one file name.\");\n                 return 1;\n             }\n-            if (text) {\n+            if (useStdin) {\n                 log.error(\"The --print-config option is not available for piped-in code.\");\n                 return 1;\n             }\n@@ -164,27 +166,27 @@ const cli = {\n \n             log.info(JSON.stringify(fileConfig, null, \"  \"));\n             return 0;\n-        } else if (currentOptions.help || (!files.length && !text)) {\n+        } else if (currentOptions.help || (!files.length && !useStdin)) {\n \n             log.info(options.generateHelp());\n \n         } else {\n \n-            debug(`Running on ${text ? \"text\" : \"files\"}`);\n+            debug(`Running on ${useStdin ? \"text\" : \"files\"}`);\n \n             if (currentOptions.fix && currentOptions.fixDryRun) {\n                 log.error(\"The --fix option and the --fix-dry-run option cannot be used together.\");\n                 return 1;\n             }\n \n-            if (text && currentOptions.fix) {\n+            if (useStdin && currentOptions.fix) {\n                 log.error(\"The --fix option is not available for piped-in code; use --fix-dry-run instead.\");\n                 return 1;\n             }\n \n             const engine = new CLIEngine(translateOptions(currentOptions));\n \n-            const report = text ? engine.executeOnText(text, currentOptions.stdinFilename, true) : engine.executeOnFiles(files);\n+            const report = useStdin ? engine.executeOnText(text, currentOptions.stdinFilename, true) : engine.executeOnFiles(files);\n \n             if (currentOptions.fix) {\n                 debug(\"Fix mode enabled - applying fixes\");\n",
        "bugId": 228,
        "tax": "IncompFI-MIV-EIP",
        "pan_cat": [
            "IF-CC",
            "IF-CC",
            "IF-CC",
            "MC-DAP",
            "AS-CE"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-fallthrough.js": {
                "changes": [
                    39
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-fallthrough.js b/lib/rules/no-fallthrough.js\nindex 9dbb1853aa..8236c68bd3 100644\n--- a/lib/rules/no-fallthrough.js\n+++ b/lib/rules/no-fallthrough.js\n@@ -36,8 +36,8 @@ module.exports = function(context) {\n             // checking on previous case\n             if (!switchData.lastCaseClosed) {\n \n-                // a fall through comment will be a leading comment of the following case\n-                comments = context.getComments(node).leading;\n+                // a fall through comment will be the last trailing comment of the last case\n+                comments = context.getComments(switchData.lastCase).trailing;\n                 comment = comments[comments.length - 1];\n \n                 // check for comment\n",
        "bugId": 227,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DAP",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/complexity.js": {
                "changes": [
                    45
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/complexity.js b/lib/rules/complexity.js\nindex 5754c095ca..e8dd3cf992 100644\n--- a/lib/rules/complexity.js\n+++ b/lib/rules/complexity.js\n@@ -42,7 +42,7 @@ module.exports = function(context) {\n \n         if (node.id) {\n             name = node.id.name;\n-        } else if (node.parent.type === \"MethodDefinition\") {\n+        } else if (node.parent.type === \"MethodDefinition\" || node.parent.type === \"Property\") {\n             name = node.parent.key.name;\n         }\n \n",
        "bugId": 226,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/config/config-validator.js": {
                "changes": [
                    92
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/config/config-validator.js b/lib/config/config-validator.js\nindex 5aeb635c1d..f2307dc637 100644\n--- a/lib/config/config-validator.js\n+++ b/lib/config/config-validator.js\n@@ -89,7 +89,9 @@ function validateRuleSchema(id, localOptions, rulesContext) {\n     if (validateRule) {\n         validateRule(localOptions);\n         if (validateRule.errors) {\n-            throw new Error(validateRule.errors.map(error => `\\tValue \"${error.data}\" ${error.message}.\\n`).join(\"\"));\n+            throw new Error(validateRule.errors.map(\n+                error => `\\tValue ${JSON.stringify(error.data)} ${error.message}.\\n`\n+            ).join(\"\"));\n         }\n     }\n }\n",
        "bugId": 225,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/operator-assignment.js": {
                "changes": [
                    20,
                    31
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/operator-assignment.js b/lib/rules/operator-assignment.js\nindex 15ab8f8bd3..7ebb74d2ba 100644\n--- a/lib/rules/operator-assignment.js\n+++ b/lib/rules/operator-assignment.js\n@@ -17,7 +17,7 @@\n  *     shorthand form.\n  */\n function isCommutativeOperatorWithShorthand(operator) {\n-    return [\"+\", \"*\", \"&\", \"^\", \"|\"].indexOf(operator) >= 0;\n+    return [\"*\", \"&\", \"^\", \"|\"].indexOf(operator) >= 0;\n }\n \n /**\n@@ -28,7 +28,7 @@ function isCommutativeOperatorWithShorthand(operator) {\n  *     a shorthand form.\n  */\n function isNonCommutativeOperatorWithShorthand(operator) {\n-    return [\"-\", \"/\", \"%\", \"<<\", \">>\", \">>>\"].indexOf(operator) >= 0;\n+    return [\"+\", \"-\", \"/\", \"%\", \"<<\", \">>\", \">>>\"].indexOf(operator) >= 0;\n }\n \n //------------------------------------------------------------------------------\n",
        "bugId": 224,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "Return",
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/sort-vars.js": {
                "changes": [
                    20
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 15
        },
        "diff": "diff --git a/lib/rules/sort-vars.js b/lib/rules/sort-vars.js\nindex 22101853c7..9aa85c8cbd 100644\n--- a/lib/rules/sort-vars.js\n+++ b/lib/rules/sort-vars.js\n@@ -17,21 +17,23 @@ module.exports = function(context) {\n     return {\n         \"VariableDeclaration\": function(node) {\n             node.declarations.reduce(function(memo, decl) {\n-                if (decl.id.type !== \"ObjectPattern\" && decl.id.type !== \"ArrayPattern\") {\n-                    var lastVariableName = memo.id.name,\n-                        currenVariableName = decl.id.name;\n-\n-                    if (ignoreCase) {\n-                        lastVariableName = lastVariableName.toLowerCase();\n-                        currenVariableName = currenVariableName.toLowerCase();\n-                    }\n-\n-                    if (currenVariableName < lastVariableName) {\n-                        context.report(decl, \"Variables within the same declaration block should be sorted alphabetically\");\n-                        return memo;\n-                    } else {\n-                        return decl;\n-                    }\n+                if (decl.id.type === \"ObjectPattern\" || decl.id.type === \"ArrayPattern\") {\n+                    return memo;\n+                }\n+\n+                var lastVariableName = memo.id.name,\n+                    currenVariableName = decl.id.name;\n+\n+                if (ignoreCase) {\n+                    lastVariableName = lastVariableName.toLowerCase();\n+                    currenVariableName = currenVariableName.toLowerCase();\n+                }\n+\n+                if (currenVariableName < lastVariableName) {\n+                    context.report(decl, \"Variables within the same declaration block should be sorted alphabetically\");\n+                    return memo;\n+                } else {\n+                    return decl;\n                 }\n             }, node.declarations[0]);\n         }\n",
        "bugId": 223,
        "tax": "G-RS-MRS",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/brace-style.js": {
                "changes": [
                    141
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/brace-style.js b/lib/rules/brace-style.js\nindex bde74371e4..bad9b70566 100644\n--- a/lib/rules/brace-style.js\n+++ b/lib/rules/brace-style.js\n@@ -138,7 +138,13 @@ module.exports = {\n \n         return {\n             BlockStatement(node) {\n-                validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));\n+                if (\n+                    node.parent.type !== \"BlockStatement\" &&\n+                    node.parent.type !== \"SwitchCase\" &&\n+                    node.parent.type !== \"Program\"\n+                ) {\n+                    validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));\n+                }\n             },\n             ClassBody(node) {\n                 validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));\n",
        "bugId": 222,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/ast-utils.js": {
                "changes": [
                    348
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex 2412892f1f..948b8d9fef 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -345,7 +345,7 @@ module.exports = {\n                 //   class A { set foo() { ... } }\n                 //   class A { static foo() { ... } }\n                 case \"MethodDefinition\":\n-                    return parent.static;\n+                    return false;\n \n                 // e.g.\n                 //   var foo = function foo() { ... }.bind(obj);\n",
        "bugId": 221,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 6
    },
    {
        "changedFiles": {
            "lib/rules/array-bracket-spacing.js": {
                "changes": [
                    182
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/array-bracket-spacing.js b/lib/rules/array-bracket-spacing.js\nindex 9bd7e94495..73cfbdc3c1 100644\n--- a/lib/rules/array-bracket-spacing.js\n+++ b/lib/rules/array-bracket-spacing.js\n@@ -179,8 +179,10 @@ module.exports = {\n \n             const first = sourceCode.getFirstToken(node),\n                 second = sourceCode.getFirstToken(node, 1),\n-                penultimate = sourceCode.getLastToken(node, 1),\n-                last = sourceCode.getLastToken(node),\n+                last = node.typeAnnotation\n+                    ? sourceCode.getTokenBefore(node.typeAnnotation)\n+                    : sourceCode.getLastToken(node),\n+                penultimate = sourceCode.getTokenBefore(last),\n                 firstElement = node.elements[0],\n                 lastElement = node.elements[node.elements.length - 1];\n \n",
        "bugId": 220,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE",
            "MC-DM"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/space-before-keywords.js": {
                "changes": [
                    183
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 9
        },
        "diff": "diff --git a/lib/rules/space-before-keywords.js b/lib/rules/space-before-keywords.js\nindex 73be7a07da..8ec493ed5d 100644\n--- a/lib/rules/space-before-keywords.js\n+++ b/lib/rules/space-before-keywords.js\n@@ -180,15 +180,10 @@ module.exports = function(context) {\n \n             var left = context.getTokenBefore(node);\n             var right = context.getFirstToken(node);\n-            var isClassMethod = node.parent && node.parent.type === \"MethodDefinition\";\n-            var isObjectShorthandMethod = node.parent && node.parent.method && node.parent.type === \"Property\";\n-\n-            // If the function expression is a class method or an object literal shorthand method\n-            // the first token (`right`) will match the function parentheses while `left` will match\n-            // the function identifier. Thus, we want to grab the tokens that are one more to the left.\n-            if (isClassMethod || isObjectShorthandMethod) {\n-                right = left;\n-                left = context.getTokenBefore(left);\n+\n+            // If it's a method, a getter, or a setter, the first token is not the `function` keyword.\n+            if (right.type !== \"Keyword\") {\n+                return;\n             }\n \n             checkTokens(node, left, right, { allowedPrecedingChars: [ \"(\", \"{\" ] });\n",
        "bugId": 219,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    1044
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex c0ae9547e5..d5eb6b5dd9 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -1041,7 +1041,7 @@ module.exports = (function() {\n             // if current node introduces a scope, add it to the list\n             var current = controller.current();\n             if (currentConfig.ecmaFeatures.blockBindings) {\n-                if ([\"BlockStatement\", \"SwitchStatement\", \"ArrowFunctionExpression\"].indexOf(current.type) >= 0) {\n+                if ([\"BlockStatement\", \"SwitchStatement\", \"CatchClause\", \"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"].indexOf(current.type) >= 0) {\n                     parents.push(current);\n                 }\n             } else {\n",
        "bugId": 218,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/rules/line-comment-position.js": {
                "changes": [
                    53
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/line-comment-position.js b/lib/rules/line-comment-position.js\nindex cd4c9a9fd8..fa2384e88a 100644\n--- a/lib/rules/line-comment-position.js\n+++ b/lib/rules/line-comment-position.js\n@@ -50,7 +50,7 @@ module.exports = {\n             ignorePattern,\n             applyDefaultPatterns = true;\n \n-        if (!options || typeof option === \"string\") {\n+        if (!options || typeof options === \"string\") {\n             above = !options || options === \"above\";\n \n         } else {\n",
        "bugId": 217,
        "tax": "G-T",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    434
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex e18fd534c8..56888fcb47 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -431,7 +431,12 @@ module.exports = function(context) {\n                 if (parent.type !== \"VariableDeclarator\" || parentVarNode === parentVarNode.parent.declarations[0]) {\n                     if (parentVarNode.loc.start.line === effectiveParent.loc.start.line) {\n                         nodeIndent = nodeIndent + (indentSize * options.VariableDeclarator[parentVarNode.parent.kind]);\n-                    } else if (parent.type === \"ObjectExpression\" || parent.type === \"ArrayExpression\") {\n+                    } else if (\n+                        parent.type === \"ObjectExpression\" ||\n+                        parent.type === \"ArrayExpression\" ||\n+                        parent.type === \"CallExpression\" ||\n+                        parent.type === \"ArrowFunctionExpression\"\n+                    ) {\n                         nodeIndent = nodeIndent + indentSize;\n                     }\n                 }\n",
        "bugId": 216,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 71
    },
    {
        "changedFiles": {
            "lib/rules/brace-style.js": {
                "changes": [
                    146
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/brace-style.js b/lib/rules/brace-style.js\nindex 34835bdc36..197767b07c 100644\n--- a/lib/rules/brace-style.js\n+++ b/lib/rules/brace-style.js\n@@ -143,7 +143,7 @@ module.exports = {\n                         });\n                     }\n \n-                    if (curlyTokenEnd.loc.start.line === block.body[block.body.length - 1].loc.start.line) {\n+                    if (curlyTokenEnd.loc.start.line === block.body[block.body.length - 1].loc.end.line) {\n                         context.report({\n                             node: block.body[block.body.length - 1],\n                             message: CLOSE_MESSAGE_SINGLE,\n",
        "bugId": 215,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-shadow.js": {
                "changes": [
                    42
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-shadow.js b/lib/rules/no-shadow.js\nindex 34c52d9755..ed01f7c8ed 100644\n--- a/lib/rules/no-shadow.js\n+++ b/lib/rules/no-shadow.js\n@@ -39,8 +39,8 @@ module.exports = function(context) {\n                     // \"arguments\" is a special case that has no identifiers (#1759)\n                     variable.identifiers.length > 0 &&\n \n-                    // function names are exempt\n-                    variable.defs.length && variable.defs[0].type !== \"FunctionName\"\n+                    // function and class names are exempt\n+                    variable.defs.length && variable.defs[0].type !== \"FunctionName\" && variable.defs[0].type !== \"ClassName\"\n             ) {\n                 context.report(variable.identifiers[0], \"{{a}} is already declared in the upper scope.\", {a: variable.name});\n             }\n",
        "bugId": 214,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/rules/max-len.js": {
                "changes": [
                    216
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/max-len.js b/lib/rules/max-len.js\nindex 35ac803b65..5a6eaa72f1 100644\n--- a/lib/rules/max-len.js\n+++ b/lib/rules/max-len.js\n@@ -213,7 +213,8 @@ module.exports = {\n          * @returns {ASTNode[]} An array of string nodes.\n          */\n         function getAllStrings() {\n-            return sourceCode.ast.tokens.filter(token => token.type === \"String\");\n+            return sourceCode.ast.tokens.filter(token => (token.type === \"String\" ||\n+                (token.type === \"JSXText\" && sourceCode.getNodeByRangeIndex(token.range[0] - 1).type === \"JSXAttribute\")));\n         }\n \n         /**\n",
        "bugId": 213,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    1097
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 2159880f88..308306af2d 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1094,8 +1094,8 @@ module.exports = {\n                     const questionMarkToken = sourceCode.getFirstTokenBetween(node.test, node.consequent, token => token.type === \"Punctuator\" && token.value === \"?\");\n                     const colonToken = sourceCode.getFirstTokenBetween(node.consequent, node.alternate, token => token.type === \"Punctuator\" && token.value === \":\");\n \n-                    const firstConsequentToken = sourceCode.getTokenAfter(questionMarkToken, { includeComments: true });\n-                    const lastConsequentToken = sourceCode.getTokenBefore(colonToken, { includeComments: true });\n+                    const firstConsequentToken = sourceCode.getTokenAfter(questionMarkToken);\n+                    const lastConsequentToken = sourceCode.getTokenBefore(colonToken);\n                     const firstAlternateToken = sourceCode.getTokenAfter(colonToken);\n \n                     offsets.setDesiredOffset(questionMarkToken, firstToken, 1);\n",
        "bugId": 212,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DNP",
            "MC-DNP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    419
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 08f3eecea3..41fae33caa 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -416,7 +416,11 @@ module.exports = function(context) {\n             return;\n         }\n \n-        if (node.parent && (node.parent.type === \"FunctionExpression\" || node.parent.type === \"FunctionDeclaration\")) {\n+        if (node.parent && (\n+                node.parent.type === \"FunctionExpression\" ||\n+                node.parent.type === \"FunctionDeclaration\" ||\n+                node.parent.type === \"ArrowFunctionExpression\"\n+        )) {\n             checkIndentInFunctionBlock(node);\n             return;\n         }\n",
        "bugId": 211,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 19
    },
    {
        "changedFiles": {
            "lib/rules/prefer-arrow-callback.js": {
                "insert": [
                    13
                ],
                "changes": [
                    97,
                    113
                ],
                "deletes": [
                    111
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 1,
            "linesAdd": 9,
            "chunks": 4,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/prefer-arrow-callback.js b/lib/rules/prefer-arrow-callback.js\nindex f410f17854..2fe1970b85 100644\n--- a/lib/rules/prefer-arrow-callback.js\n+++ b/lib/rules/prefer-arrow-callback.js\n@@ -10,6 +10,15 @@\n // Helpers\n //------------------------------------------------------------------------------\n \n+/**\n+ * Checks whether or not a given variable is a function name.\n+ * @param {escope.Variable} variable - A variable to check.\n+ * @returns {boolean} `true` if the variable is a function name.\n+ */\n+function isFunctionName(variable) {\n+    return variable != null && variable.defs[0].type === \"FunctionName\";\n+}\n+\n /**\n  * Checkes whether or not a given node is a callback.\n  * @param {ASTNode} node - A node to check.\n@@ -94,7 +103,7 @@ module.exports = function(context) {\n     }\n \n     return {\n-        \"Program\": function() {\n+        Program: function() {\n             stack = [];\n         },\n \n@@ -108,12 +117,21 @@ module.exports = function(context) {\n         FunctionExpression: enterScope,\n         \"FunctionExpression:exit\": function(node) {\n             var hasThisKeyword = exitScope();\n-            var info = getCallbackInfo(node);\n \n-            if (!node.generator &&\n-                info.isCallback &&\n-                (!hasThisKeyword || info.isLexicalThis)\n-            ) {\n+            // Skip generators.\n+            if (node.generator) {\n+                return;\n+            }\n+\n+            // Skip recursive functions.\n+            var nameVar = context.getDeclaredVariables(node)[0];\n+            if (isFunctionName(nameVar) && nameVar.references.length > 0) {\n+                return;\n+            }\n+\n+            // Reports if it's a callback.\n+            var info = getCallbackInfo(node);\n+            if (info.isCallback && (!hasThisKeyword || info.isLexicalThis)) {\n                 context.report(node, \"Unexpected function expression.\");\n             }\n         }\n",
        "bugId": 210,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-ADD",
            "IF-APCJ",
            "IF-APCJ"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/formatters/junit.js": {
                "changes": [
                    42,
                    46
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 15
        },
        "diff": "diff --git a/lib/formatters/junit.js b/lib/formatters/junit.js\nindex 069ed5ff8f..77d548f380 100644\n--- a/lib/formatters/junit.js\n+++ b/lib/formatters/junit.js\n@@ -39,22 +39,28 @@ module.exports = function(results) {\n \n         const messages = result.messages;\n \n-        output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"${messages.length}\" errors=\"${messages.length}\" name=\"${result.filePath}\">\\n`;\n-        messages.forEach(message => {\n-            const type = message.fatal ? \"error\" : \"failure\";\n+        if (messages.length > 0) {\n+            output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"${messages.length}\" errors=\"${messages.length}\" name=\"${result.filePath}\">\\n`;\n+            messages.forEach(message => {\n+                const type = message.fatal ? \"error\" : \"failure\";\n \n-            output += `<testcase time=\"0\" name=\"org.eslint.${message.ruleId || \"unknown\"}\">`;\n-            output += `<${type} message=\"${xmlEscape(message.message || \"\")}\">`;\n-            output += \"<![CDATA[\";\n-            output += `line ${message.line || 0}, col `;\n-            output += `${message.column || 0}, ${getMessageType(message)}`;\n-            output += ` - ${xmlEscape(message.message || \"\")}`;\n-            output += (message.ruleId ? ` (${message.ruleId})` : \"\");\n-            output += \"]]>\";\n-            output += `</${type}>`;\n-            output += \"</testcase>\\n\";\n-        });\n-        output += \"</testsuite>\\n\";\n+                output += `<testcase time=\"0\" name=\"org.eslint.${message.ruleId || \"unknown\"}\">`;\n+                output += `<${type} message=\"${xmlEscape(message.message || \"\")}\">`;\n+                output += \"<![CDATA[\";\n+                output += `line ${message.line || 0}, col `;\n+                output += `${message.column || 0}, ${getMessageType(message)}`;\n+                output += ` - ${xmlEscape(message.message || \"\")}`;\n+                output += (message.ruleId ? ` (${message.ruleId})` : \"\");\n+                output += \"]]>\";\n+                output += `</${type}>`;\n+                output += \"</testcase>\\n\";\n+            });\n+            output += \"</testsuite>\\n\";\n+        } else {\n+            output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"1\" errors=\"0\" name=\"${result.filePath}\">\\n`;\n+            output += `<testcase time=\"0\" name=\"${result.filePath}\" />\\n`;\n+            output += \"</testsuite>\\n\";\n+        }\n \n     });\n \n",
        "bugId": 209,
        "tax": "PM",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-unexpected-multiline.js": {
                "insert": [
                    33,
                    81
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 16,
            "linesRem": 0,
            "linesAdd": 16,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-unexpected-multiline.js b/lib/rules/no-unexpected-multiline.js\nindex 6c15f5dd59..2c2ac2db31 100644\n--- a/lib/rules/no-unexpected-multiline.js\n+++ b/lib/rules/no-unexpected-multiline.js\n@@ -30,6 +30,9 @@ module.exports = {\n         const FUNCTION_MESSAGE = \"Unexpected newline between function and ( of function call.\";\n         const PROPERTY_MESSAGE = \"Unexpected newline between object and [ of property access.\";\n         const TAGGED_TEMPLATE_MESSAGE = \"Unexpected newline between template tag and template literal.\";\n+        const DIVISION_MESSAGE = \"Unexpected newline between numerator and division operator.\";\n+\n+        const REGEX_FLAG_MATCHER = /^[gimuy]+$/;\n \n         const sourceCode = context.getSourceCode();\n \n@@ -75,6 +78,19 @@ module.exports = {\n                     return;\n                 }\n                 checkForBreakAfter(node.callee, FUNCTION_MESSAGE);\n+            },\n+\n+            \"BinaryExpression[operator='/'] > BinaryExpression[operator='/']\"(node) {\n+                const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n+                const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n+\n+                if (\n+                    tokenAfterOperator.type === \"Identifier\" &&\n+                    REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) &&\n+                    secondSlash.range[1] === tokenAfterOperator.range[0]\n+                ) {\n+                    checkForBreakAfter(node.left, DIVISION_MESSAGE);\n+                }\n             }\n         };\n \n",
        "bugId": 208,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/object-curly-newline.js": {
                "changes": [
                    119
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/object-curly-newline.js b/lib/rules/object-curly-newline.js\nindex 14b5d06a72..39043a8b9b 100644\n--- a/lib/rules/object-curly-newline.js\n+++ b/lib/rules/object-curly-newline.js\n@@ -116,7 +116,8 @@ function areLineBreaksRequired(node, options, first, last) {\n     } else {\n \n         // is ImportDeclaration or ExportNamedDeclaration\n-        objectProperties = node.specifiers;\n+        objectProperties = node.specifiers\n+            .filter(s => s.type === \"ImportSpecifier\" || s.type === \"ExportSpecifier\");\n     }\n \n     return objectProperties.length >= options.minProperties ||\n",
        "bugId": 207,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    1117,
                    1123
                ],
                "changes": [
                    1124,
                    1127
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 19,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 5,
            "linesMod": 14
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 82268975df..fb143806cf 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1114,28 +1114,29 @@ module.exports = {\n                 const tokenBeforeObject = sourceCode.getTokenBefore(node.object, token => astUtils.isNotOpeningParenToken(token) || parameterParens.has(token));\n                 const firstObjectToken = tokenBeforeObject ? sourceCode.getTokenAfter(tokenBeforeObject) : sourceCode.ast.tokens[0];\n                 const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);\n+                const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n \n                 if (node.computed) {\n \n                     // For computed MemberExpressions, match the closing bracket with the opening bracket.\n                     offsets.matchIndentOf(firstNonObjectToken, sourceCode.getLastToken(node));\n+                    offsets.setDesiredOffsets(getTokensAndComments(node.property), firstNonObjectToken, 1);\n                 }\n \n-                if (typeof options.MemberExpression === \"number\") {\n-                    const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n+                /*\n+                 * If the object ends on the same line that the property starts, match against the last token\n+                 * of the object, to ensure that the MemberExpression is not indented.\n+                 *\n+                 * Otherwise, match against the first token of the object, e.g.\n+                 * foo\n+                 *   .bar\n+                 *   .baz // <-- offset by 1 from `foo`\n+                 */\n+                const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line\n+                    ? lastObjectToken\n+                    : firstObjectToken;\n \n-                    /*\n-                     * If the object ends on the same line that the property starts, match against the last token\n-                     * of the object, to ensure that the MemberExpression is not indented.\n-                     *\n-                     * Otherwise, match against the first token of the object, e.g.\n-                     * foo\n-                     *   .bar\n-                     *   .baz // <-- offset by 1 from `foo`\n-                     */\n-                    const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line\n-                        ? lastObjectToken\n-                        : firstObjectToken;\n+                if (typeof options.MemberExpression === \"number\") {\n \n                     // Match the dot (for non-computed properties) or the opening bracket (for computed properties) against the object.\n                     offsets.setDesiredOffset(firstNonObjectToken, offsetBase, options.MemberExpression);\n@@ -1150,6 +1151,9 @@ module.exports = {\n                     // If the MemberExpression option is off, ignore the dot and the first token of the property.\n                     offsets.ignoreToken(firstNonObjectToken);\n                     offsets.ignoreToken(secondNonObjectToken);\n+\n+                    // To ignore the property indentation, ensure that the property tokens depend on the ignored tokens.\n+                    offsets.matchIndentOf(offsetBase, firstNonObjectToken);\n                     offsets.matchIndentOf(firstNonObjectToken, secondNonObjectToken);\n                 }\n             },\n",
        "bugId": 206,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "SQ-AMO",
            "SQ-AMO"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/brace-style.js": {
                "changes": [
                    68
                ],
                "deletes": [
                    65
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/brace-style.js b/lib/rules/brace-style.js\nindex bb4433cc45..44bd6d2c80 100644\n--- a/lib/rules/brace-style.js\n+++ b/lib/rules/brace-style.js\n@@ -62,10 +62,12 @@ module.exports = {\n         function removeNewlineBetween(firstToken, secondToken) {\n             const textRange = [firstToken.range[1], secondToken.range[0]];\n             const textBetween = sourceCode.text.slice(textRange[0], textRange[1]);\n-            const NEWLINE_REGEX = astUtils.createGlobalLinebreakMatcher();\n \n             // Don't do a fix if there is a comment between the tokens\n-            return fixer => fixer.replaceTextRange(textRange, textBetween.trim() ? null : textBetween.replace(NEWLINE_REGEX, \"\"));\n+            if (textBetween.trim()) {\n+                return null;\n+            }\n+            return fixer => fixer.replaceTextRange(textRange, \" \");\n         }\n \n         /**\n",
        "bugId": 205,
        "tax": "PM",
        "pan_cat": [
            "IF-APCJ",
            "MC-DAP"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    965
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex 3a52bb3af1..533ddd62cf 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -962,8 +962,14 @@ module.exports = (function() {\n             source: sourceCode.lines[location.line - 1] || \"\"\n         };\n \n-        // ensure there's range and text properties as well as metadata switch, otherwise it's not a valid fix\n-        if (fix && Array.isArray(fix.range) && (typeof fix.text === \"string\") && (!meta || meta.fixable)) {\n+        // ensure there's range and text properties, otherwise it's not a valid fix\n+        if (fix && Array.isArray(fix.range) && (typeof fix.text === \"string\")) {\n+\n+            // If rule uses fix, has metadata, but has no metadata.fixable, we should throw\n+            if (meta && !meta.fixable) {\n+                throw new Error(\"Fixable rules should export a `meta.fixable` property.\");\n+            }\n+\n             problem.fix = fix;\n         }\n \n",
        "bugId": 204,
        "tax": "IncompFI-EH",
        "pan_cat": [],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/cli-engine.js": {
                "changes": [
                    332,
                    496,
                    562
                ],
                "deletes": [
                    496
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 1,
            "linesAdd": 2,
            "chunks": 4,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/cli-engine.js b/lib/cli-engine.js\nindex feee09d2e5..457e242e67 100644\n--- a/lib/cli-engine.js\n+++ b/lib/cli-engine.js\n@@ -329,7 +329,7 @@ function processPath(extensions) {\n             newPath = pathname + suffix;\n         }\n \n-        return newPath.replace(/\\\\/g, \"/\");\n+        return newPath.replace(/\\\\/g, \"/\").replace(/^\\.\\//, \"\");\n     };\n }\n \n@@ -493,7 +493,6 @@ CLIEngine.prototype = {\n \n         globOptions = {\n             nodir: true,\n-            realpath: true,\n             ignore: ignoredPathsList\n         };\n \n@@ -504,6 +503,8 @@ CLIEngine.prototype = {\n          * @returns {void}\n          */\n         function executeOnFile(filename) {\n+            filename = fs.realpathSync(filename);\n+\n             if (processed[filename]) {\n                 return;\n             }\n@@ -559,7 +560,7 @@ CLIEngine.prototype = {\n \n         patterns.forEach(function(pattern) {\n             if (shell.test(\"-f\", pattern) && !ignoredPaths.contains(pattern)) {\n-                executeOnFile(fs.realpathSync(pattern));\n+                executeOnFile(pattern);\n             } else {\n                 glob.sync(pattern, globOptions).forEach(executeOnFile);\n             }\n",
        "bugId": 203,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "Return",
            "MC-DAP"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/config/autoconfig.js": {
                "changes": [
                    313
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/config/autoconfig.js b/lib/config/autoconfig.js\nindex ed2223bfd7..be3d097074 100644\n--- a/lib/config/autoconfig.js\n+++ b/lib/config/autoconfig.js\n@@ -310,7 +310,13 @@ Registry.prototype = {\n                 var lintResults = eslint.verify(sourceCodes[filename], lintConfig);\n \n                 lintResults.forEach(function(result) {\n-                    lintedRegistry.rules[result.ruleId][ruleSetIdx].errorCount += 1;\n+\n+                    // It is possible that the error is from a configuration comment\n+                    // in a linted file, in which case there may not be a config\n+                    // set in this ruleSetIdx. (https://github.com/eslint/eslint/issues/5992)\n+                    if (lintedRegistry.rules[result.ruleId][ruleSetIdx]) {\n+                        lintedRegistry.rules[result.ruleId][ruleSetIdx].errorCount += 1;\n+                    }\n                 });\n \n                 ruleSetIdx += 1;\n",
        "bugId": 202,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/config.js": {
                "changes": [
                    86
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/config.js b/lib/config.js\nindex 99680e7f92..db687d6b88 100644\n--- a/lib/config.js\n+++ b/lib/config.js\n@@ -83,7 +83,11 @@ function loadConfig(filePath) {\n                 filePath = \"eslint-config-\" + filePath;\n             }\n \n-            config = require(filePath);\n+            var packagedConfig = require(filePath);\n+        }\n+\n+        if (packagedConfig) {\n+            assign(config, packagedConfig);\n         }\n \n         // If an `extends` property is defined, it represents a configuration file to use as\n",
        "bugId": 201,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "AS-CE",
            "IF-APC"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/rules/lines-around-comment.js": {
                "insert": [
                    129
                ],
                "changes": [
                    309,
                    314
                ],
                "deletes": [
                    270
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 18,
            "linesRem": 8,
            "linesAdd": 8,
            "chunks": 4,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/lines-around-comment.js b/lib/rules/lines-around-comment.js\nindex a32e8dda45..8e7d7b1aea 100644\n--- a/lib/rules/lines-around-comment.js\n+++ b/lib/rules/lines-around-comment.js\n@@ -126,6 +126,14 @@ module.exports = {\n \n         var sourceCode = context.getSourceCode();\n \n+        var lines = sourceCode.lines,\n+            numLines = lines.length + 1,\n+            comments = sourceCode.getAllComments(),\n+            commentLines = getCommentLineNums(comments),\n+            emptyLines = getEmptyLineNums(lines),\n+            commentAndEmptyLines = commentLines.concat(emptyLines),\n+            reportedLines = [];\n+\n         /**\n          * Returns whether or not comments are on lines starting with or ending with code\n          * @param {ASTNode} node The comment node to check.\n@@ -267,14 +275,6 @@ module.exports = {\n          * @returns {void}\n          */\n         function checkForEmptyLine(node, opts) {\n-\n-            var lines = sourceCode.lines,\n-                numLines = lines.length + 1,\n-                comments = sourceCode.getAllComments(),\n-                commentLines = getCommentLineNums(comments),\n-                emptyLines = getEmptyLineNums(lines),\n-                commentAndEmptyLines = commentLines.concat(emptyLines);\n-\n             var after = opts.after,\n                 before = opts.before;\n \n@@ -306,12 +306,16 @@ module.exports = {\n             }\n \n             // check for newline before\n-            if (!exceptionStartAllowed && before && !contains(prevLineNum, commentAndEmptyLines)) {\n+            if (!exceptionStartAllowed && before && !contains(prevLineNum, commentAndEmptyLines) &&\n+                    reportedLines.indexOf(prevLineNum) < 0) {\n+                reportedLines.push(prevLineNum);\n                 context.report(node, \"Expected line before comment.\");\n             }\n \n             // check for newline after\n-            if (!exceptionEndAllowed && after && !contains(nextLineNum, commentAndEmptyLines)) {\n+            if (!exceptionEndAllowed && after && !contains(nextLineNum, commentAndEmptyLines) &&\n+                    reportedLines.indexOf(nextLineNum) < 0) {\n+                reportedLines.push(nextLineNum);\n                 context.report(node, \"Expected line after comment.\");\n             }\n \n",
        "bugId": 200,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/ignored-paths.js": {
                "insert": [
                    204
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/ignored-paths.js b/lib/ignored-paths.js\nindex bace73db6a..cfca7fa4ff 100644\n--- a/lib/ignored-paths.js\n+++ b/lib/ignored-paths.js\n@@ -201,6 +201,12 @@ class IgnoredPaths {\n \n         const ig = ignore().add(DEFAULT_IGNORE_DIRS);\n \n+        if (this.options.dotfiles !== true) {\n+\n+            // Ignore hidden folders.  (This cannot be \".*\", or else it's not possible to unignore hidden files)\n+            ig.add([\".*/*\", \"!../\"]);\n+        }\n+\n         if (this.options.ignore) {\n             ig.add(this.ig.custom);\n         }\n",
        "bugId": 199,
        "tax": "IncorFI-P",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "bin/eslint.js": {
                "changes": [
                    47,
                    50
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 4
        },
        "diff": "diff --git a/bin/eslint.js b/bin/eslint.js\nindex 2b5d4e7fe8..7c05ad3b6e 100755\n--- a/bin/eslint.js\n+++ b/bin/eslint.js\n@@ -44,11 +44,10 @@ process.once(\"uncaughtException\", err => {\n     if (typeof err.messageTemplate === \"string\" && err.messageTemplate.length > 0) {\n         const template = lodash.template(fs.readFileSync(path.resolve(__dirname, `../messages/${err.messageTemplate}.txt`), \"utf-8\"));\n \n-        console.log(\"\\nOops! Something went wrong! :(\");\n-        console.log(`\\n${template(err.messageData || {})}`);\n+        console.error(\"\\nOops! Something went wrong! :(\");\n+        console.error(`\\n${template(err.messageData || {})}`);\n     } else {\n-        console.log(err.message);\n-        console.log(err.stack);\n+        console.error(err.stack);\n     }\n \n     process.exitCode = 1;\n",
        "bugId": 198,
        "tax": "IncorFI-IncorO",
        "pan_cat": [
            "MC-DM",
            "MC-DM",
            "MC-DM"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/formatters/junit.js": {
                "changes": [
                    42,
                    60
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 8
        },
        "diff": "diff --git a/lib/formatters/junit.js b/lib/formatters/junit.js\nindex c41a2a4dd8..069ed5ff8f 100644\n--- a/lib/formatters/junit.js\n+++ b/lib/formatters/junit.js\n@@ -39,10 +39,7 @@ module.exports = function(results) {\n \n         const messages = result.messages;\n \n-        if (messages.length) {\n-            output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"${messages.length}\" errors=\"${messages.length}\" name=\"${result.filePath}\">\\n`;\n-        }\n-\n+        output += `<testsuite package=\"org.eslint\" time=\"0\" tests=\"${messages.length}\" errors=\"${messages.length}\" name=\"${result.filePath}\">\\n`;\n         messages.forEach(message => {\n             const type = message.fatal ? \"error\" : \"failure\";\n \n@@ -57,10 +54,7 @@ module.exports = function(results) {\n             output += `</${type}>`;\n             output += \"</testcase>\\n\";\n         });\n-\n-        if (messages.length) {\n-            output += \"</testsuite>\\n\";\n-        }\n+        output += \"</testsuite>\\n\";\n \n     });\n \n",
        "bugId": 197,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "IF-RMV",
            "IF-RMV"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    372,
                    376,
                    383,
                    436
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 5099255dd3..3c0c9827d8 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -369,18 +369,23 @@ module.exports = {\n \n \t\t/**\n          * Check to see if the node is a file level IIFE\n-         * @param {ASTNode} node node to check\n+         * @param {ASTNode} node The function node to check.\n          * @returns {boolean} True if the node is the outer IIFE\n          */\n         function isOuterIIFE(node) {\n-            return node && node.type === \"CallExpression\" &&\n-                node.parent && node.parent.type === \"ExpressionStatement\" &&\n-                node.parent.parent && node.parent.parent.type === \"Program\";\n+            var parent = node.parent;\n+\n+            return (\n+                parent.type === \"CallExpression\" &&\n+                parent.callee === node &&\n+                parent.parent.type === \"ExpressionStatement\" &&\n+                parent.parent.parent && parent.parent.parent.type === \"Program\"\n+            );\n         }\n \n         /**\n          * Check indent for function block content\n-         * @param {ASTNode} node node to examine\n+         * @param {ASTNode} node A BlockStatement node that is inside of a function.\n          * @returns {void}\n          */\n         function checkIndentInFunctionBlock(node) {\n@@ -433,8 +438,8 @@ module.exports = {\n             // is the outer IIFE and that option is enabled.\n             var functionOffset = indentSize;\n \n-            if (options.outerIIFEBody !== null && isOuterIIFE(calleeNode.parent)) {\n-                functionOffset = options.outerIIFEBody;\n+            if (options.outerIIFEBody !== null && isOuterIIFE(calleeNode)) {\n+                functionOffset = options.outerIIFEBody * indentSize;\n             }\n             indent += functionOffset;\n \n",
        "bugId": 196,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "Return",
            "MC-DAP",
            "AS-CE"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/yoda.js": {
                "insert": [
                    200,
                    213
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/yoda.js b/lib/rules/yoda.js\nindex ab5e7d04c9..b38123597a 100644\n--- a/lib/rules/yoda.js\n+++ b/lib/rules/yoda.js\n@@ -197,6 +197,7 @@ module.exports = function (context) {\n             // Comparisons must always be yoda-style: if (\"blue\" === color)\n             if (\n                 (node.right.type === \"Literal\" || looksLikeLiteral(node.right)) &&\n+                !(node.left.type === \"Literal\" || looksLikeLiteral(node.left)) &&\n                 !(!isEqualityOperator(node.operator) && onlyEquality) &&\n                 isComparisonOperator(node.operator) &&\n                 !(exceptRange && isRangeTest(context.getAncestors().pop()))\n@@ -209,6 +210,7 @@ module.exports = function (context) {\n             // Comparisons must never be yoda-style (default)\n             if (\n                 (node.left.type === \"Literal\" || looksLikeLiteral(node.left)) &&\n+                !(node.right.type === \"Literal\" || looksLikeLiteral(node.right)) &&\n                 !(!isEqualityOperator(node.operator) && onlyEquality) &&\n                 isComparisonOperator(node.operator) &&\n                 !(exceptRange && isRangeTest(context.getAncestors().pop()))\n",
        "bugId": 195,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 4492
    },
    {
        "changedFiles": {
            "lib/rules/no-cond-assign.js": {
                "insert": [
                    7
                ],
                "changes": [
                    62
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-cond-assign.js b/lib/rules/no-cond-assign.js\nindex f96218579e..2d66f55a5b 100644\n--- a/lib/rules/no-cond-assign.js\n+++ b/lib/rules/no-cond-assign.js\n@@ -4,6 +4,8 @@\n  */\n \"use strict\";\n \n+const astUtils = require(\"../ast-utils\");\n+\n const NODE_DESCRIPTIONS = {\n     DoWhileStatement: \"a 'do...while' statement\",\n     ForStatement: \"a 'for' statement\",\n@@ -59,7 +61,7 @@ module.exports = {\n                 if (isConditionalTestExpression(currentAncestor)) {\n                     return currentAncestor.parent;\n                 }\n-            } while ((currentAncestor = currentAncestor.parent));\n+            } while ((currentAncestor = currentAncestor.parent) && !astUtils.isFunction(currentAncestor));\n \n             return null;\n         }\n",
        "bugId": 194,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "LP-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/prefer-destructuring.js": {
                "changes": [
                    148
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/prefer-destructuring.js b/lib/rules/prefer-destructuring.js\nindex eeb5e060ca..56c348a478 100644\n--- a/lib/rules/prefer-destructuring.js\n+++ b/lib/rules/prefer-destructuring.js\n@@ -145,7 +145,7 @@ module.exports = {\n          * @returns {void}\n          */\n         function performCheck(leftNode, rightNode, reportNode) {\n-            if (rightNode.type !== \"MemberExpression\") {\n+            if (rightNode.type !== \"MemberExpression\" || rightNode.object.type === \"Super\") {\n                 return;\n             }\n \n",
        "bugId": 193,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "changes": [
                    585
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex d8e0df64a7..1025aa5a97 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -582,7 +582,7 @@ module.exports = {\n                         tokensToIgnore.add(firstLeftToken);\n                     }\n                 }\n-                if (hasExcessParens(node.right)) {\n+                if (!(node.type === \"ForOfStatement\" && node.right.type === \"SequenceExpression\") && hasExcessParens(node.right)) {\n                     report(node.right);\n                 }\n                 if (hasExcessParens(node.left)) {\n",
        "bugId": 192,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/generator-star-spacing.js": {
                "insert": [
                    57
                ],
                "changes": [
                    103,
                    105,
                    108
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 21,
            "linesRem": 0,
            "linesAdd": 18,
            "chunks": 4,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/generator-star-spacing.js b/lib/rules/generator-star-spacing.js\nindex fa735cbc53..0cab2be50e 100644\n--- a/lib/rules/generator-star-spacing.js\n+++ b/lib/rules/generator-star-spacing.js\n@@ -54,6 +54,24 @@ module.exports = {\n \n         var sourceCode = context.getSourceCode();\n \n+        /**\n+         * Gets `*` token from a given node.\n+         *\n+         * @param {ASTNode} node - A node to get `*` token. This is one of\n+         *      FunctionDeclaration, FunctionExpression, Property, and\n+         *      MethodDefinition.\n+         * @returns {Token} `*` token.\n+         */\n+        function getStarToken(node) {\n+            var token = sourceCode.getFirstToken(node);\n+\n+            while (token.value !== \"*\") {\n+                token = sourceCode.getTokenAfter(token);\n+            }\n+\n+            return token;\n+        }\n+\n         /**\n          * Checks the spacing between two tokens before or after the star token.\n          * @param {string} side Either \"before\" or \"after\".\n@@ -100,12 +118,12 @@ module.exports = {\n             }\n \n             if (node.parent.method || node.parent.type === \"MethodDefinition\") {\n-                starToken = sourceCode.getTokenBefore(node, 1);\n+                starToken = getStarToken(node.parent);\n             } else {\n-                starToken = sourceCode.getFirstToken(node, 1);\n+                starToken = getStarToken(node);\n             }\n \n-            // Only check before when preceded by `function` keyword\n+            // Only check before when preceded by `function`|`static` keyword\n             prevToken = sourceCode.getTokenBefore(starToken);\n             if (prevToken.value === \"function\" || prevToken.value === \"static\") {\n                 checkSpacing(\"before\", prevToken, starToken);\n",
        "bugId": 191,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/init-declarations.js": {
                "insert": [
                    9
                ],
                "changes": [
                    25,
                    33
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 21,
            "linesRem": 0,
            "linesAdd": 19,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/init-declarations.js b/lib/rules/init-declarations.js\nindex 6ab78a0d08..47ee0cda07 100644\n--- a/lib/rules/init-declarations.js\n+++ b/lib/rules/init-declarations.js\n@@ -6,6 +6,25 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n+/**\n+ * Checks whether or not a given declarator node has its initializer.\n+ * @param {ASTNode} node - A declarator node to check.\n+ * @returns {boolean} `true` when the node has its initializer.\n+ */\n+function isInitialized(node) {\n+    var declaration = node.parent;\n+    var block = declaration.parent;\n+\n+    if (block.type === \"ForInStatement\" || block.type === \"ForOfStatement\") {\n+        return block.left === declaration;\n+    }\n+    return node.init != null;\n+}\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -22,7 +41,7 @@ module.exports = function(context) {\n     //--------------------------------------------------------------------------\n \n     return {\n-        \"VariableDeclaration\": function(node) {\n+        \"VariableDeclaration:exit\": function(node) {\n \n             var kind = node.kind,\n                 declarations = node.declarations;\n@@ -30,7 +49,7 @@ module.exports = function(context) {\n             for (var i = 0; i < declarations.length; ++i) {\n                 var declaration = declarations[i],\n                     id = declaration.id,\n-                    initialized = declaration.init !== null;\n+                    initialized = isInitialized(declaration);\n \n                 if (id.type !== \"Identifier\") {\n                     continue;\n",
        "bugId": 190,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "changes": [
                    516
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex 3ff9bc64ff..3ed278d54d 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -513,7 +513,7 @@ module.exports = {\n                             }\n \n                             // if \"args\" option is \"after-used\", skip all but the last parameter\n-                            if (config.args === \"after-used\" && !isLastInNonIgnoredParameters(variable)) {\n+                            if (config.args === \"after-used\" && astUtils.isFunction(def.name.parent) && !isLastInNonIgnoredParameters(variable)) {\n                                 continue;\n                             }\n                         } else {\n",
        "bugId": 189,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/valid-jsdoc.js": {
                "changes": [
                    168,
                    195
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/valid-jsdoc.js b/lib/rules/valid-jsdoc.js\nindex d6ebd24a4a..09fc684719 100644\n--- a/lib/rules/valid-jsdoc.js\n+++ b/lib/rules/valid-jsdoc.js\n@@ -165,7 +165,7 @@ module.exports = {\n         }\n \n         /**\n-         * Check if return tag type is void or undefined\n+         * Validate type for a given JSDoc node\n          * @param {Object} jsdocNode JSDoc node\n          * @param {Object} type JSDoc tag\n          * @returns {void}\n@@ -192,7 +192,9 @@ module.exports = {\n                     elements = type.elements;\n                     break;\n                 case \"FieldType\":  // Array.<{count: number, votes: number}>\n-                    typesToCheck.push(getCurrentExpectedTypes(type.value));\n+                    if (type.value) {\n+                        typesToCheck.push(getCurrentExpectedTypes(type.value));\n+                    }\n                     break;\n                 default:\n                     typesToCheck.push(getCurrentExpectedTypes(type));\n",
        "bugId": 188,
        "tax": "IncompFI-MIV-MNC",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-undef.js": {
                "changes": [
                    65
                ],
                "deletes": [
                    87
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 2,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-undef.js b/lib/rules/no-undef.js\nindex 988d677cd7..fe4d5f3f39 100644\n--- a/lib/rules/no-undef.js\n+++ b/lib/rules/no-undef.js\n@@ -62,8 +62,7 @@ function hasTypeOfOperator(node) {\n \n module.exports = function(context) {\n \n-    var NOT_DEFINED_MESSAGE = \"\\\"{{name}}\\\" is not defined.\",\n-        READ_ONLY_MESSAGE = \"\\\"{{name}}\\\" is read only.\";\n+    var NOT_DEFINED_MESSAGE = \"\\\"{{name}}\\\" is not defined.\";\n \n     var options = context.options[0];\n     var considerTypeOf = options && options.typeof === true || false;\n@@ -84,8 +83,6 @@ module.exports = function(context) {\n \n                 if (!variable) {\n                     context.report(ref.identifier, NOT_DEFINED_MESSAGE, { name: name });\n-                } else if (ref.isWrite() && variable.writeable === false) {\n-                    context.report(ref.identifier, READ_ONLY_MESSAGE, { name: name });\n                 }\n             });\n \n",
        "bugId": 187,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-RBR"
        ],
        "failingTests": 6
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    1245
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 5a8feee8ff..4b4355b3ca 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1242,6 +1242,7 @@ module.exports = {\n                     offsets.ignoreToken(equalOperator);\n                     offsets.ignoreToken(tokenAfterOperator);\n                     offsets.matchIndentOf(equalOperator, tokenAfterOperator);\n+                    offsets.matchIndentOf(sourceCode.getFirstToken(node), equalOperator);\n                 }\n             },\n \n",
        "bugId": 186,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "SQ-AMO"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    753
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 19,
            "linesRem": 0,
            "linesAdd": 8,
            "chunks": 2,
            "linesMod": 11
        },
        "diff": "diff --git a/lib/linter.js b/lib/linter.js\nindex eedcace78a..1a4e1fd979 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -750,17 +750,8 @@ module.exports = class Linter {\n     verify(textOrSourceCode, config, filenameOrOptions, saveState) {\n         let text,\n             parserServices,\n-            allowInlineConfig;\n-\n-        if (typeof textOrSourceCode === \"string\") {\n-            this.sourceCode = null;\n-            text = textOrSourceCode;\n-        } else {\n-            this.sourceCode = textOrSourceCode;\n-            text = this.sourceCode.text;\n-        }\n-\n-        let providedFilename;\n+            allowInlineConfig,\n+            providedFilename;\n \n         // evaluate arguments\n         if (typeof filenameOrOptions === \"object\") {\n@@ -777,6 +768,14 @@ module.exports = class Linter {\n             this.reset();\n         }\n \n+        if (typeof textOrSourceCode === \"string\") {\n+            this.sourceCode = null;\n+            text = textOrSourceCode;\n+        } else {\n+            this.sourceCode = textOrSourceCode;\n+            text = this.sourceCode.text;\n+        }\n+\n         // search and apply \"eslint-env *\".\n         const envInFile = findEslintEnv(text);\n \n",
        "bugId": 185,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    713
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex 17f9c69a2a..fd4db2a155 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -710,7 +710,7 @@ module.exports = (function() {\n      */\n     api.getSource = function(node, beforeCount, afterCount) {\n         if (node) {\n-            return (currentText !== null) ? currentText.slice(node.range[0] - (beforeCount || 0),\n+            return (currentText !== null) ? currentText.slice(Math.max(node.range[0] - (beforeCount || 0), 0),\n                 node.range[1] + (afterCount || 0)) : null;\n         } else {\n             return currentText;\n",
        "bugId": 184,
        "tax": "G-DP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    828
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex c8195c7d7f..8739c58d05 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -825,7 +825,7 @@ module.exports = {\n                  */\n                 const lastToken = sourceCode.getLastToken(node);\n \n-                if (astUtils.isSemicolonToken(lastToken)) {\n+                if (node.type !== \"EmptyStatement\" && astUtils.isSemicolonToken(lastToken)) {\n                     offsets.matchIndentOf(lastParentToken, lastToken);\n                 }\n             }\n",
        "bugId": 183,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/multiline-comment-style.js": {
                "changes": [
                    128
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/multiline-comment-style.js b/lib/rules/multiline-comment-style.js\nindex 0972b7cc78..302a7d858a 100644\n--- a/lib/rules/multiline-comment-style.js\n+++ b/lib/rules/multiline-comment-style.js\n@@ -125,10 +125,12 @@ module.exports = {\n                         },\n                         message: EXPECTED_BLOCK_ERROR,\n                         fix(fixer) {\n-                            return fixer.replaceTextRange(\n-                                [commentGroup[0].range[0], commentGroup[commentGroup.length - 1].range[1]],\n-                                `/*${convertToStarredBlock(commentGroup[0], commentLines)}*/`\n-                            );\n+                            const range = [commentGroup[0].range[0], commentGroup[commentGroup.length - 1].range[1]];\n+                            const starredBlock = `/*${convertToStarredBlock(commentGroup[0], commentLines)}*/`;\n+\n+                            return commentLines.some(value => value.startsWith(\"/\"))\n+                                ? null\n+                                : fixer.replaceTextRange(range, starredBlock);\n                         }\n                     });\n                 } else {\n",
        "bugId": 182,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/object-curly-newline.js": {
                "insert": [
                    146,
                    167,
                    181,
                    203,
                    223
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 18,
            "linesRem": 0,
            "linesAdd": 18,
            "chunks": 5,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/object-curly-newline.js b/lib/rules/object-curly-newline.js\nindex b78cb9cfce..42f2778739 100644\n--- a/lib/rules/object-curly-newline.js\n+++ b/lib/rules/object-curly-newline.js\n@@ -143,6 +143,8 @@ module.exports = {\n                     first.loc.start.line !== last.loc.end.line\n                 )\n             );\n+            const hasCommentsFirstToken = astUtils.isCommentToken(first);\n+            const hasCommentsLastToken = astUtils.isCommentToken(last);\n \n             /*\n              * Use tokens or comments to check multiline or not.\n@@ -162,6 +164,10 @@ module.exports = {\n                         node,\n                         loc: openBrace.loc.start,\n                         fix(fixer) {\n+                            if (hasCommentsFirstToken) {\n+                                return null;\n+                            }\n+\n                             return fixer.insertTextAfter(openBrace, \"\\n\");\n                         }\n                     });\n@@ -172,6 +178,10 @@ module.exports = {\n                         node,\n                         loc: closeBrace.loc.start,\n                         fix(fixer) {\n+                            if (hasCommentsLastToken) {\n+                                return null;\n+                            }\n+\n                             return fixer.insertTextBefore(closeBrace, \"\\n\");\n                         }\n                     });\n@@ -190,6 +200,10 @@ module.exports = {\n                         node,\n                         loc: openBrace.loc.start,\n                         fix(fixer) {\n+                            if (hasCommentsFirstToken) {\n+                                return null;\n+                            }\n+\n                             return fixer.removeRange([\n                                 openBrace.range[1],\n                                 first.range[0]\n@@ -206,6 +220,10 @@ module.exports = {\n                         node,\n                         loc: closeBrace.loc.start,\n                         fix(fixer) {\n+                            if (hasCommentsLastToken) {\n+                                return null;\n+                            }\n+\n                             return fixer.removeRange([\n                                 last.range[1],\n                                 closeBrace.range[0]\n",
        "bugId": 181,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-APCJ",
            "IF-APCJ",
            "IF-APCJ",
            "IF-APCJ"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/prefer-destructuring.js": {
                "changes": [
                    112
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/prefer-destructuring.js b/lib/rules/prefer-destructuring.js\nindex d7fbc3559d..7f472b423b 100644\n--- a/lib/rules/prefer-destructuring.js\n+++ b/lib/rules/prefer-destructuring.js\n@@ -109,8 +109,10 @@ module.exports = {\n                 return;\n             }\n \n-            if (checkArrays && isArrayIndexAccess(rightNode)) {\n-                report(reportNode, \"array\");\n+            if (isArrayIndexAccess(rightNode)) {\n+                if (checkArrays) {\n+                    report(reportNode, \"array\");\n+                }\n                 return;\n             }\n \n",
        "bugId": 180,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-debugger.js": {
                "insert": [
                    8
                ],
                "changes": [
                    31
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-debugger.js b/lib/rules/no-debugger.js\nindex a158724fef..d79cb18166 100644\n--- a/lib/rules/no-debugger.js\n+++ b/lib/rules/no-debugger.js\n@@ -5,6 +5,8 @@\n \n \"use strict\";\n \n+const astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -28,7 +30,10 @@ module.exports = {\n                     node,\n                     message: \"Unexpected 'debugger' statement.\",\n                     fix(fixer) {\n-                        return fixer.remove(node);\n+                        if (astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type)) {\n+                            return fixer.remove(node);\n+                        }\n+                        return null;\n                     }\n                 });\n             }\n",
        "bugId": 179,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/valid-jsdoc.js": {
                "changes": [
                    346,
                    350
                ],
                "deletes": [
                    343
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 2,
            "linesAdd": 2,
            "chunks": 4,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/valid-jsdoc.js b/lib/rules/valid-jsdoc.js\nindex e7d6fdeadf..65ed539d55 100644\n--- a/lib/rules/valid-jsdoc.js\n+++ b/lib/rules/valid-jsdoc.js\n@@ -340,14 +340,14 @@ module.exports = {\n \n                 if (node.params) {\n                     node.params.forEach(function(param, i) {\n-                        var name = param.name;\n-\n                         if (param.type === \"AssignmentPattern\") {\n-                            name = param.left.name;\n+                            param = param.left;\n                         }\n \n+                        var name = param.name;\n+\n                         // TODO(nzakas): Figure out logical things to do with destructured, default, rest params\n-                        if (param.type === \"Identifier\" || param.type === \"AssignmentPattern\") {\n+                        if (param.type === \"Identifier\") {\n                             if (jsdocParams[i] && (name !== jsdocParams[i])) {\n                                 context.report(jsdocNode, \"Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.\", {\n                                     name: name,\n",
        "bugId": 178,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-multiple-empty-lines.js": {
                "changes": [
                    114
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/no-multiple-empty-lines.js b/lib/rules/no-multiple-empty-lines.js\nindex 2063ebd917..9d1067c205 100644\n--- a/lib/rules/no-multiple-empty-lines.js\n+++ b/lib/rules/no-multiple-empty-lines.js\n@@ -111,10 +111,19 @@ module.exports = {\n                                 message,\n                                 data: { max: maxAllowed, pluralizedLines: maxAllowed === 1 ? \"line\" : \"lines\" },\n                                 fix(fixer) {\n-                                    return fixer.removeRange([\n-                                        sourceCode.getIndexFromLoc({ line: lastLineNumber + 1, column: 0 }),\n-                                        sourceCode.getIndexFromLoc({ line: lineNumber - maxAllowed, column: 0 })\n-                                    ]);\n+                                    const rangeStart = sourceCode.getIndexFromLoc({ line: lastLineNumber + 1, column: 0 });\n+\n+                                    /*\n+                                     * The end of the removal range is usually the start index of the next line.\n+                                     * However, at the end of the file there is no next line, so the end of the\n+                                     * range is just the length of the text.\n+                                     */\n+                                    const lineNumberAfterRemovedLines = lineNumber - maxAllowed;\n+                                    const rangeEnd = lineNumberAfterRemovedLines <= allLines.length\n+                                        ? sourceCode.getIndexFromLoc({ line: lineNumberAfterRemovedLines, column: 0 })\n+                                        : sourceCode.text.length;\n+\n+                                    return fixer.removeRange([rangeStart, rangeEnd]);\n                                 }\n                             });\n                         }\n",
        "bugId": 177,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    1033,
                    1328,
                    1331
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 78c8bb9afe..c8195c7d7f 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1030,7 +1030,7 @@ module.exports = {\n                 const nodeTokens = getTokensAndComments(node);\n                 const tokensFromOperator = nodeTokens.slice(lodash.sortedIndexBy(nodeTokens, operator, token => token.range[0]));\n \n-                offsets.setDesiredOffsets(tokensFromOperator, sourceCode.getFirstToken(node.left), 1);\n+                offsets.setDesiredOffsets(tokensFromOperator, sourceCode.getLastToken(node.left), 1);\n                 offsets.ignoreToken(tokensFromOperator[0]);\n                 offsets.ignoreToken(tokensFromOperator[1]);\n             },\n@@ -1325,12 +1325,12 @@ module.exports = {\n             VariableDeclarator(node) {\n                 if (node.init) {\n                     const equalOperator = sourceCode.getTokenBefore(node.init, astUtils.isNotOpeningParenToken);\n-                    const tokenAfterOperator = sourceCode.getTokenAfter(equalOperator);\n+                    const tokensAfterOperator = sourceCode.getTokensAfter(equalOperator, token => token.range[1] <= node.range[1]);\n \n                     offsets.ignoreToken(equalOperator);\n-                    offsets.ignoreToken(tokenAfterOperator);\n-                    offsets.matchIndentOf(equalOperator, tokenAfterOperator);\n-                    offsets.matchIndentOf(sourceCode.getFirstToken(node), equalOperator);\n+                    offsets.ignoreToken(tokensAfterOperator[0]);\n+                    offsets.setDesiredOffsets(tokensAfterOperator, equalOperator, 1);\n+                    offsets.matchIndentOf(sourceCode.getLastToken(node.id), equalOperator);\n                 }\n             },\n \n",
        "bugId": 176,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DM",
            "MC-DAP",
            "MC-DM",
            "MC-DM",
            "MC-DM",
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/dot-notation.js": {
                "insert": [
                    82
                ],
                "changes": [
                    84
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/dot-notation.js b/lib/rules/dot-notation.js\nindex 3f5eae0bbe..abb9b4b488 100644\n--- a/lib/rules/dot-notation.js\n+++ b/lib/rules/dot-notation.js\n@@ -79,9 +79,11 @@ module.exports = {\n                                     return null;\n                                 }\n \n+                                const textBeforeDot = astUtils.isDecimalInteger(node.object) ? \" \" : \"\";\n+\n                                 return fixer.replaceTextRange(\n                                     [leftBracket.range[0], rightBracket.range[1]],\n-                                    `.${node.property.value}`\n+                                    `${textBeforeDot}.${node.property.value}`\n                                 );\n                             }\n                         });\n",
        "bugId": 175,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/prefer-arrow-callback.js": {
                "changes": [
                    280
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 9
        },
        "diff": "diff --git a/lib/rules/prefer-arrow-callback.js b/lib/rules/prefer-arrow-callback.js\nindex a867a93905..43a8bb77de 100644\n--- a/lib/rules/prefer-arrow-callback.js\n+++ b/lib/rules/prefer-arrow-callback.js\n@@ -277,15 +277,23 @@ module.exports = {\n                             const paramsRightParen = sourceCode.getTokenBefore(node.body);\n                             const asyncKeyword = node.async ? \"async \" : \"\";\n                             const paramsFullText = sourceCode.text.slice(paramsLeftParen.range[0], paramsRightParen.range[1]);\n-\n-                            if (callbackInfo.isLexicalThis) {\n-\n-                                // If the callback function has `.bind(this)`, replace it with an arrow function and remove the binding.\n-                                return fixer.replaceText(node.parent.parent, `${asyncKeyword}${paramsFullText} => ${sourceCode.getText(node.body)}`);\n-                            }\n-\n-                            // Otherwise, only replace the `function` keyword and parameters with the arrow function parameters.\n-                            return fixer.replaceTextRange([node.start, node.body.start], `${asyncKeyword}${paramsFullText} => `);\n+                            const arrowFunctionText = `${asyncKeyword}${paramsFullText} => ${sourceCode.getText(node.body)}`;\n+\n+                            /*\n+                             * If the callback function has `.bind(this)`, replace it with an arrow function and remove the binding.\n+                             * Otherwise, just replace the arrow function itself.\n+                             */\n+                            const replacedNode = callbackInfo.isLexicalThis ? node.parent.parent : node;\n+\n+                            /*\n+                             * If the replaced node is part of a BinaryExpression, LogicalExpression, or MemberExpression, then\n+                             * the arrow function needs to be parenthesized, because `foo || () => {}` is invalid syntax even\n+                             * though `foo || function() {}` is valid.\n+                             */\n+                            const needsParens = replacedNode.parent.type !== \"CallExpression\" && replacedNode.parent.type !== \"ConditionalExpression\";\n+                            const replacementText = needsParens ? `(${arrowFunctionText})` : arrowFunctionText;\n+\n+                            return fixer.replaceText(replacedNode, replacementText);\n                         }\n                     });\n                 }\n",
        "bugId": 174,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DM"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-invalid-this.js": {
                "insert": [
                    38
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-invalid-this.js b/lib/rules/no-invalid-this.js\nindex 427fd0fae4..bc840233c5 100644\n--- a/lib/rules/no-invalid-this.js\n+++ b/lib/rules/no-invalid-this.js\n@@ -35,6 +35,15 @@ function isES5Constructor(node) {\n  * @returns {boolean} Whether or not the node has a `@this` tag in its comments.\n  */\n function hasJSDocThisTag(node) {\n+    var jsdocComment = astUtils.getJSDocComment(node);\n+    if (jsdocComment != null && thisTagPattern.test(jsdocComment.value)) {\n+        return true;\n+    }\n+\n+    // Checks `@this` in its leading comments for callbacks,\n+    // because callbacks don't have its JSDoc comment.\n+    // e.g.\n+    //     sinon.test(/* @this sinon.Sandbox */function() { this.spy(); });\n     return astUtils.getComments(node).leading.some(function(comment) {\n         return thisTagPattern.test(comment.value);\n     });\n",
        "bugId": 173,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "insert": [
                    69
                ],
                "changes": [
                    142
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 12,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 11
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex 5dd632fdb0..f9cf2da31c 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -66,6 +66,7 @@ module.exports = {\n \n         const DEFINED_MESSAGE = \"'{{name}}' is defined but never used.\";\n         const ASSIGNED_MESSAGE = \"'{{name}}' is assigned a value but never used.\";\n+        const REST_PROPERTY_TYPE = /^(?:Experimental)?RestProperty$/;\n \n         const config = {\n             vars: \"all\",\n@@ -139,17 +140,16 @@ module.exports = {\n          */\n         function hasRestSpreadSibling(variable) {\n             if (config.ignoreRestSiblings) {\n-                const restProperties = new Set([\"ExperimentalRestProperty\", \"RestProperty\"]);\n-\n-                return variable.defs\n-                    .filter(def => def.name.type === \"Identifier\")\n-                    .some(def => (\n-                        def.node.id &&\n-                        def.node.id.type === \"ObjectPattern\" &&\n-                        def.node.id.properties.length &&\n-                        restProperties.has(def.node.id.properties[def.node.id.properties.length - 1].type) &&  // last property is a rest property\n-                        !restProperties.has(def.name.parent.type)  // variable is sibling of the rest property\n-                    ));\n+                return variable.defs.some(def => {\n+                    const propertyNode = def.name.parent;\n+                    const patternNode = propertyNode.parent;\n+\n+                    return (\n+                        propertyNode.type === \"Property\" &&\n+                        patternNode.type === \"ObjectPattern\" &&\n+                        REST_PROPERTY_TYPE.test(patternNode.properties[patternNode.properties.length - 1].type)\n+                    );\n+                });\n             }\n \n             return false;\n",
        "bugId": 172,
        "tax": "IncorFI-CP",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/file-finder.js": {
                "changes": [
                    91
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/file-finder.js b/lib/file-finder.js\nindex d78126c836..4559405700 100644\n--- a/lib/file-finder.js\n+++ b/lib/file-finder.js\n@@ -88,7 +88,9 @@ FileFinder.prototype.findAllInDirectoryAndParents = function(directory) {\n         j,\n         searched;\n \n-    if (!directory) {\n+    if (directory) {\n+        directory = path.resolve(this.cwd, directory);\n+    } else {\n         directory = this.cwd;\n     }\n \n",
        "bugId": 171,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "IF-ABR",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/new-parens.js": {
                "insert": [
                    8
                ],
                "changes": [
                    29,
                    34
                ],
                "deletes": [
                    27,
                    39
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 46,
            "linesRem": 2,
            "linesAdd": 38,
            "chunks": 5,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/new-parens.js b/lib/rules/new-parens.js\nindex 3fc0f9bd4d..8d9ec0aac3 100644\n--- a/lib/rules/new-parens.js\n+++ b/lib/rules/new-parens.js\n@@ -5,6 +5,44 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n+/**\n+ * Checks whether the given token is an opening parenthesis or not.\n+ *\n+ * @param {Token} token - The token to check.\n+ * @returns {boolean} `true` if the token is an opening parenthesis.\n+ */\n+function isOpeningParen(token) {\n+    return token.type === \"Punctuator\" && token.value === \"(\";\n+}\n+\n+/**\n+ * Checks whether the given token is an closing parenthesis or not.\n+ *\n+ * @param {Token} token - The token to check.\n+ * @returns {boolean} `true` if the token is an closing parenthesis.\n+ */\n+function isClosingParen(token) {\n+    return token.type === \"Punctuator\" && token.value === \")\";\n+}\n+\n+/**\n+ * Checks whether the given node is inside of another given node.\n+ *\n+ * @param {ASTNode|Token} inner - The inner node to check.\n+ * @param {ASTNode|Token} outer - The outer node to check.\n+ * @returns {boolean} `true` if the `inner` is in `outer`.\n+ */\n+function isInRange(inner, outer) {\n+    const ir = inner.range;\n+    const or = outer.range;\n+\n+    return or[0] <= ir[0] && ir[1] <= or[1];\n+}\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -24,18 +62,21 @@ module.exports = {\n         const sourceCode = context.getSourceCode();\n \n         return {\n-\n             NewExpression(node) {\n-                const tokens = sourceCode.getTokens(node);\n-                const prenticesTokens = tokens.filter(function(token) {\n-                    return token.value === \"(\" || token.value === \")\";\n-                });\n+                let token = sourceCode.getTokenAfter(node.callee);\n+\n+                // Skip ')'\n+                while (token && isClosingParen(token)) {\n+                    token = sourceCode.getTokenAfter(token);\n+                }\n \n-                if (prenticesTokens.length < 2) {\n-                    context.report(node, \"Missing '()' invoking a constructor.\");\n+                if (!(token && isOpeningParen(token) && isInRange(token, node))) {\n+                    context.report({\n+                        node,\n+                        message: \"Missing '()' invoking a constructor.\"\n+                    });\n                 }\n             }\n         };\n-\n     }\n };\n",
        "bugId": 170,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "MD-ADD",
            "MD-ADD",
            "MD-ADD",
            "MC-DM",
            "IF-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-whitespace-before-property.js": {
                "insert": [
                    65
                ]
            },
            "lib/ast-utils.js": {
                "insert": [
                    718
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 28,
            "linesRem": 0,
            "linesAdd": 28,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex 20c3fa2d32..66b39d922a 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -715,5 +715,27 @@ module.exports = {\n         }\n \n         return directives;\n+    },\n+\n+\n+    /**\n+     * Determines whether this node is a decimal integer literal. If a node is a decimal integer literal, a dot added\n+     after the node will be parsed as a decimal point, rather than a property-access dot.\n+     * @param {ASTNode} node - The node to check.\n+     * @returns {boolean} `true` if this node is a decimal integer.\n+     * @example\n+     *\n+     * 5       // true\n+     * 5.      // false\n+     * 5.0     // false\n+     * 05      // false\n+     * 0x5     // false\n+     * 0b101   // false\n+     * 0o5     // false\n+     * 5e0     // false\n+     * '5'     // false\n+     */\n+    isDecimalInteger(node) {\n+        return node.type === \"Literal\" && typeof node.value === \"number\" && /^(0|[1-9]\\d*)$/.test(node.raw);\n     }\n };\ndiff --git a/lib/rules/no-whitespace-before-property.js b/lib/rules/no-whitespace-before-property.js\nindex 8751f143f1..cb9af56579 100644\n--- a/lib/rules/no-whitespace-before-property.js\n+++ b/lib/rules/no-whitespace-before-property.js\n@@ -62,6 +62,12 @@ module.exports = {\n                     propName: sourceCode.getText(node.property)\n                 },\n                 fix(fixer) {\n+                    if (!node.computed && astUtils.isDecimalInteger(node.object)) {\n+\n+                        // If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n+                        // Don't fix this case.\n+                        return null;\n+                    }\n                     return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n                 }\n             });\n",
        "bugId": 169,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "MD-ADD",
            "IF-APCJ"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/camelcase.js": {
                "insert": [
                    41
                ],
                "changes": [
                    121,
                    134
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/camelcase.js b/lib/rules/camelcase.js\nindex 1b22c25e67..7c68d4ae45 100644\n--- a/lib/rules/camelcase.js\n+++ b/lib/rules/camelcase.js\n@@ -38,6 +38,7 @@ module.exports = {\n \n         // contains reported nodes to avoid reporting twice on destructuring with shorthand notation\n         const reported = [];\n+        const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);\n \n         /**\n          * Checks if a string contains an underscore and isn't all upper-case\n@@ -118,7 +119,7 @@ module.exports = {\n                         return;\n                     }\n \n-                    if (isUnderscored(name) && effectiveParent.type !== \"CallExpression\") {\n+                    if (isUnderscored(name) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {\n                         report(node);\n                     }\n \n@@ -131,7 +132,7 @@ module.exports = {\n                     }\n \n                 // Report anything that is underscored that isn't a CallExpression\n-                } else if (isUnderscored(name) && effectiveParent.type !== \"CallExpression\") {\n+                } else if (isUnderscored(name) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {\n                     report(node);\n                 }\n             }\n",
        "bugId": 168,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/array-bracket-newline.js": {
                "insert": [
                    197
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/array-bracket-newline.js b/lib/rules/array-bracket-newline.js\nindex 319ac60f2c..adfce985fd 100644\n--- a/lib/rules/array-bracket-newline.js\n+++ b/lib/rules/array-bracket-newline.js\n@@ -194,6 +194,12 @@ module.exports = {\n                     options.multiline &&\n                     elements.length > 0 &&\n                     firstIncComment.loc.start.line !== lastIncComment.loc.end.line\n+                ) ||\n+                (\n+                    elements.length === 0 &&\n+                    firstIncComment.type === \"Block\" &&\n+                    firstIncComment.loc.start.line !== lastIncComment.loc.end.line &&\n+                    firstIncComment === lastIncComment\n                 )\n             );\n \n",
        "bugId": 167,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-computed-key.js": {
                "changes": [
                    37
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-useless-computed-key.js b/lib/rules/no-useless-computed-key.js\nindex c1ab1d9acd..9e01c11b3c 100644\n--- a/lib/rules/no-useless-computed-key.js\n+++ b/lib/rules/no-useless-computed-key.js\n@@ -34,7 +34,7 @@ module.exports = {\n                 const key = node.key,\n                     nodeType = typeof key.value;\n \n-                if (key.type === \"Literal\" && (nodeType === \"string\" || nodeType === \"number\")) {\n+                if (key.type === \"Literal\" && (nodeType === \"string\" || nodeType === \"number\") && key.value !== \"__proto__\") {\n                     context.report({\n                         node,\n                         message: MESSAGE_UNNECESSARY_COMPUTED,\n",
        "bugId": 166,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-return.js": {
                "insert": [
                    257
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-useless-return.js b/lib/rules/no-useless-return.js\nindex 37c90d6133..5aac24dd0a 100644\n--- a/lib/rules/no-useless-return.js\n+++ b/lib/rules/no-useless-return.js\n@@ -254,6 +254,9 @@ module.exports = {\n \n             // Adds ReturnStatement node to check whether it's useless or not.\n             ReturnStatement(node) {\n+                if (node.argument) {\n+                    markReturnStatementsOnCurrentSegmentsAsUsed();\n+                }\n                 if (node.argument || isInLoop(node) || isInFinally(node)) {\n                     return;\n                 }\n",
        "bugId": 165,
        "tax": "IncompFI-MIV",
        "pan_cat": [],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/lines-around-directive.js": {
                "insert": [
                    66
                ],
                "changes": [
                    72,
                    74,
                    95,
                    97
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 22,
            "linesRem": 0,
            "linesAdd": 18,
            "chunks": 6,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/lines-around-directive.js b/lib/rules/lines-around-directive.js\nindex f0f0ebd0b9..b1e54e940b 100644\n--- a/lib/rules/lines-around-directive.js\n+++ b/lib/rules/lines-around-directive.js\n@@ -63,15 +63,32 @@ module.exports = {\n             return node.loc.start.line - tokenLineBefore >= 2;\n         }\n \n+        /**\n+        * Gets the last token of a node that is on the same line as the rest of the node.\n+        * This will usually be the last token of the node, but it will be the second-to-last token if the node has a trailing\n+        * semicolon on a different line.\n+        * @param {ASTNode} node A directive node\n+        * @returns {Token} The last token of the node on the line\n+        */\n+        function getLastTokenOnLine(node) {\n+            const lastToken = sourceCode.getLastToken(node);\n+            const secondToLastToken = sourceCode.getTokenBefore(lastToken);\n+\n+            return lastToken.type === \"Punctuator\" && lastToken.value === \";\" && lastToken.loc.start.line > secondToLastToken.loc.end.line\n+                ? secondToLastToken\n+                : lastToken;\n+        }\n+\n         /**\n          * Check if node is followed by a blank newline.\n          * @param {ASTNode} node Node to check.\n          * @returns {boolean} Whether or not the passed in node is followed by a blank newline.\n          */\n         function hasNewlineAfter(node) {\n-            const tokenAfter = sourceCode.getTokenOrCommentAfter(node);\n+            const lastToken = getLastTokenOnLine(node);\n+            const tokenAfter = sourceCode.getTokenOrCommentAfter(lastToken);\n \n-            return tokenAfter.loc.start.line - node.loc.end.line >= 2;\n+            return tokenAfter.loc.start.line - lastToken.loc.end.line >= 2;\n         }\n \n         /**\n@@ -91,10 +108,12 @@ module.exports = {\n                     location\n                 },\n                 fix(fixer) {\n+                    const lastToken = getLastTokenOnLine(node);\n+\n                     if (expected) {\n-                        return location === \"before\" ? fixer.insertTextBefore(node, \"\\n\") : fixer.insertTextAfter(node, \"\\n\");\n+                        return location === \"before\" ? fixer.insertTextBefore(node, \"\\n\") : fixer.insertTextAfter(lastToken, \"\\n\");\n                     }\n-                    return fixer.removeRange(location === \"before\" ? [node.range[0] - 1, node.range[0]] : [node.range[1], node.range[1] + 1]);\n+                    return fixer.removeRange(location === \"before\" ? [node.range[0] - 1, node.range[0]] : [lastToken.range[1], lastToken.range[1] + 1]);\n                 }\n             });\n         }\n",
        "bugId": 164,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-ADD",
            "Return",
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-return-await.js": {
                "insert": [
                    7,
                    28
                ],
                "changes": [
                    42
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 23,
            "linesRem": 0,
            "linesAdd": 22,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-return-await.js b/lib/rules/no-return-await.js\nindex c3d278557c..6338f530da 100644\n--- a/lib/rules/no-return-await.js\n+++ b/lib/rules/no-return-await.js\n@@ -4,6 +4,8 @@\n  */\n \"use strict\";\n \n+const astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -23,6 +25,26 @@ module.exports = {\n     },\n \n     create(context) {\n+\n+        /**\n+        * Determines whether a thrown error from this node will be caught/handled within this function rather than immediately halting\n+        * this function. For example, a statement in a `try` block will always have an error handler. A statement in\n+        * a `catch` block will only have an error handler if there is also a `finally` block.\n+        * @param {ASTNode} node A node representing a location where an could be thrown\n+        * @returns {boolean} `true` if a thrown error will be caught/handled in this function\n+        */\n+        function hasErrorHandler(node) {\n+            let ancestor = node;\n+\n+            while (!astUtils.isFunction(ancestor) && ancestor.type !== \"Program\") {\n+                if (ancestor.parent.type === \"TryStatement\" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {\n+                    return true;\n+                }\n+                ancestor = ancestor.parent;\n+            }\n+            return false;\n+        }\n+\n         return {\n             ArrowFunctionExpression(node) {\n                 if (node.async && node.body.type === \"AwaitExpression\") {\n@@ -39,7 +61,7 @@ module.exports = {\n             ReturnStatement(node) {\n                 const argument = node.argument;\n \n-                if (argument && argument.type === \"AwaitExpression\") {\n+                if (argument && argument.type === \"AwaitExpression\" && !hasErrorHandler(node)) {\n                     const sourceCode = context.getSourceCode();\n                     const loc = argument.loc;\n \n",
        "bugId": 163,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "IF-CC",
            "MD-ADD"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "package.json": {
                "changes": [
                    42
                ]
            },
            "lib/eslint.js": {
                "changes": [
                    961
                ]
            },
            "lib/rules/no-redeclare.js": {
                "changes": [
                    53
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 3,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 7
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex 0a3e39192b..346cd156f0 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -958,7 +958,7 @@ module.exports = (function() {\n             // if current node is function declaration, add it to the list\n             var current = controller.current();\n             if ([\"FunctionDeclaration\", \"FunctionExpression\",\n-                    \"ArrowFunctionExpression\"].indexOf(current.type) >= 0) {\n+                    \"ArrowFunctionExpression\", \"SwitchStatement\"].indexOf(current.type) >= 0) {\n                 parents.push(current);\n             }\n \ndiff --git a/lib/rules/no-redeclare.js b/lib/rules/no-redeclare.js\nindex da1b7bff4c..8f7bd2f2ce 100644\n--- a/lib/rules/no-redeclare.js\n+++ b/lib/rules/no-redeclare.js\n@@ -50,9 +50,18 @@ module.exports = function(context) {\n         }\n     }\n \n-    return {\n-        \"Program\": findVariables,\n-        \"FunctionExpression\": findVariables,\n-        \"FunctionDeclaration\": findVariables\n-    };\n+    if (context.ecmaFeatures.blockBindings) {\n+        return {\n+            \"Program\": findVariables,\n+            \"BlockStatement\": findVariables,\n+            \"SwitchStatement\": findVariables\n+        };\n+    } else {\n+        return {\n+            \"Program\": findVariables,\n+            \"FunctionDeclaration\": findVariables,\n+            \"FunctionExpression\": findVariables,\n+            \"ArrowFunctionExpression\": findVariables\n+        };\n+    }\n };\ndiff --git a/package.json b/package.json\nindex fb89fbb871..3ee3a5f450 100644\n--- a/package.json\n+++ b/package.json\n@@ -39,7 +39,7 @@\n     \"debug\": \"^2.1.1\",\n     \"doctrine\": \"^0.6.2\",\n     \"escape-string-regexp\": \"^1.0.2\",\n-    \"escope\": \"^3.0.0\",\n+    \"escope\": \"^3.0.1\",\n     \"espree\": \"^2.0.1\",\n     \"estraverse\": \"^2.0.0\",\n     \"estraverse-fb\": \"^1.3.1\",\n",
        "bugId": 162,
        "tax": "PM",
        "pan_cat": [
            "IF-CC",
            "Return"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/rules/no-unexpected-multiline.js": {
                "changes": [
                    83
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-unexpected-multiline.js b/lib/rules/no-unexpected-multiline.js\nindex 2c2ac2db31..9398b8a603 100644\n--- a/lib/rules/no-unexpected-multiline.js\n+++ b/lib/rules/no-unexpected-multiline.js\n@@ -80,7 +80,7 @@ module.exports = {\n                 checkForBreakAfter(node.callee, FUNCTION_MESSAGE);\n             },\n \n-            \"BinaryExpression[operator='/'] > BinaryExpression[operator='/']\"(node) {\n+            \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n                 const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n                 const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n \n",
        "bugId": 161,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "I'dsayitisMD-CHG"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/func-style.js": {
                "changes": [
                    27
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/func-style.js b/lib/rules/func-style.js\nindex 3a26aa3e99..661c015738 100644\n--- a/lib/rules/func-style.js\n+++ b/lib/rules/func-style.js\n@@ -24,7 +24,7 @@ module.exports = function(context) {\n         \"FunctionDeclaration\": function(node) {\n             stack.push(false);\n \n-            if (!enforceDeclarations) {\n+            if (!enforceDeclarations && node.parent.type !== \"ExportDefaultDeclaration\") {\n                 context.report(node, \"Expected a function expression.\");\n             }\n         },\n",
        "bugId": 160,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 71
    },
    {
        "changedFiles": {
            "lib/code-path-analysis/code-path-analyzer.js": {
                "changes": [
                    515
                ]
            },
            "lib/code-path-analysis/debug-helpers.js": {
                "changes": [
                    110
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 23,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 23
        },
        "diff": "diff --git a/lib/code-path-analysis/code-path-analyzer.js b/lib/code-path-analysis/code-path-analyzer.js\nindex cb8b1e1bf8..539b5e18b3 100644\n--- a/lib/code-path-analysis/code-path-analyzer.js\n+++ b/lib/code-path-analysis/code-path-analyzer.js\n@@ -512,13 +512,8 @@ function processCodePathToExit(analyzer, node) {\n             break;\n     }\n \n-    /*\n-     * Skip updating the current segment to avoid creating useless segments if\n-     * the node type is the same as the parent node type.\n-     */\n-    if (!dontForward && (!node.parent || node.type !== node.parent.type)) {\n-\n-        // Emits onCodePathSegmentStart events if updated.\n+    // Emits onCodePathSegmentStart events if updated.\n+    if (!dontForward) {\n         forwardCurrentToHead(analyzer, node);\n     }\n     debug.dumpState(node, state, true);\ndiff --git a/lib/code-path-analysis/debug-helpers.js b/lib/code-path-analysis/debug-helpers.js\nindex 622bd6081f..9af985ce85 100644\n--- a/lib/code-path-analysis/debug-helpers.js\n+++ b/lib/code-path-analysis/debug-helpers.js\n@@ -107,22 +107,23 @@ module.exports = {\n                 text += \"style=\\\"rounded,dashed,filled\\\",fillcolor=\\\"#FF9800\\\",label=\\\"<<unreachable>>\\\\n\";\n             }\n \n-            if (segment.internal.nodes.length > 0) {\n-                text += segment.internal.nodes.map(node => {\n-                    switch (node.type) {\n-                        case \"Identifier\": return `${node.type} (${node.name})`;\n-                        case \"Literal\": return `${node.type} (${node.value})`;\n-                        default: return node.type;\n-                    }\n-                }).join(\"\\\\n\");\n-            } else if (segment.internal.exitNodes.length > 0) {\n-                text += segment.internal.exitNodes.map(node => {\n-                    switch (node.type) {\n-                        case \"Identifier\": return `${node.type}:exit (${node.name})`;\n-                        case \"Literal\": return `${node.type}:exit (${node.value})`;\n-                        default: return `${node.type}:exit`;\n-                    }\n-                }).join(\"\\\\n\");\n+            if (segment.internal.nodes.length > 0 || segment.internal.exitNodes.length > 0) {\n+                text += [].concat(\n+                    segment.internal.nodes.map(node => {\n+                        switch (node.type) {\n+                            case \"Identifier\": return `${node.type} (${node.name})`;\n+                            case \"Literal\": return `${node.type} (${node.value})`;\n+                            default: return node.type;\n+                        }\n+                    }),\n+                    segment.internal.exitNodes.map(node => {\n+                        switch (node.type) {\n+                            case \"Identifier\": return `${node.type}:exit (${node.name})`;\n+                            case \"Literal\": return `${node.type}:exit (${node.value})`;\n+                            default: return `${node.type}:exit`;\n+                        }\n+                    })\n+                ).join(\"\\\\n\");\n             } else {\n                 text += \"????\";\n             }\n",
        "bugId": 159,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    899
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 30ecc4757a..6babe29c9d 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -896,7 +896,7 @@ module.exports = {\n \n             parameterParens.add(openingParen);\n             parameterParens.add(closingParen);\n-            offsets.matchIndentOf(sourceCode.getLastToken(node.callee), openingParen);\n+            offsets.matchIndentOf(sourceCode.getTokenBefore(openingParen), openingParen);\n \n             addElementListIndent(node.arguments, openingParen, closingParen, options.CallExpression.arguments);\n         }\n",
        "bugId": 158,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DM"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/testers/rule-tester.js": {
                "changes": [
                    307
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/testers/rule-tester.js b/lib/testers/rule-tester.js\nindex 9f6bc2a534..644bf5bdf4 100644\n--- a/lib/testers/rule-tester.js\n+++ b/lib/testers/rule-tester.js\n@@ -304,11 +304,9 @@ class RuleTester {\n                 filename = item.filename;\n             }\n \n-            if (item.options) {\n-                const options = item.options.concat();\n-\n-                options.unshift(1);\n-                config.rules[ruleName] = options;\n+            if (Object.prototype.hasOwnProperty.call(item, \"options\")) {\n+                assert(Array.isArray(item.options), \"options must be an array\");\n+                config.rules[ruleName] = [1].concat(item.options);\n             } else {\n                 config.rules[ruleName] = 1;\n             }\n",
        "bugId": 157,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "IF-CC",
            "AS-CE"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-spaced-func.js": {
                "changes": [
                    27,
                    37
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/no-spaced-func.js b/lib/rules/no-spaced-func.js\nindex 4513d80472..551a3c6097 100644\n--- a/lib/rules/no-spaced-func.js\n+++ b/lib/rules/no-spaced-func.js\n@@ -24,17 +24,21 @@ module.exports = function(context) {\n             prevToken = lastCalleeToken,\n             parenToken = sourceCode.getTokenAfter(lastCalleeToken);\n \n-        if (sourceCode.getLastToken(node).value !== \")\") {\n-            return;\n-        }\n-\n-        while (parenToken.value !== \"(\") {\n+        // advances to an open parenthesis.\n+        while (\n+            parenToken &&\n+            parenToken.range[1] < node.range[1] &&\n+            parenToken.value !== \"(\"\n+        ) {\n             prevToken = parenToken;\n             parenToken = sourceCode.getTokenAfter(parenToken);\n         }\n \n         // look for a space between the callee and the open paren\n-        if (sourceCode.isSpaceBetweenTokens(prevToken, parenToken)) {\n+        if (parenToken &&\n+            parenToken.range[1] < node.range[1] &&\n+            sourceCode.isSpaceBetweenTokens(prevToken, parenToken)\n+        ) {\n             context.report({\n                 node: node,\n                 loc: lastCalleeToken.loc.start,\n",
        "bugId": 156,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC",
            "LP-CC"
        ],
        "failingTests": 19
    },
    {
        "changedFiles": {
            "lib/rules/prefer-const.js": {
                "insert": [
                    94
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 11,
            "linesRem": 0,
            "linesAdd": 11,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/prefer-const.js b/lib/rules/prefer-const.js\nindex 35c59ae0c2..4e6d1686fc 100644\n--- a/lib/rules/prefer-const.js\n+++ b/lib/rules/prefer-const.js\n@@ -91,6 +91,17 @@ function getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign) {\n         return null;\n     }\n \n+    /*\n+     * Due to a bug in acorn, code such as `let foo = 1; let foo = 2;` will not throw a syntax error. As a sanity\n+     * check, make sure that the variable only has one declaration. After the parsing bug is fixed, this check\n+     * will no longer be necessary, because variables declared with `let` or `const` should always have exactly one\n+     * declaration.\n+     * https://github.com/ternjs/acorn/issues/487\n+     */\n+    if (variable.defs.length > 1) {\n+        return null;\n+    }\n+\n     // Finds the unique WriteReference.\n     let writer = null;\n     let isReadBeforeInit = false;\n",
        "bugId": 155,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-extend-native.js": {
                "changes": [
                    71
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-extend-native.js b/lib/rules/no-extend-native.js\nindex dc7b3e30d6..49e139a29b 100644\n--- a/lib/rules/no-extend-native.js\n+++ b/lib/rules/no-extend-native.js\n@@ -68,8 +68,7 @@ module.exports = function(context) {\n \n                 // verify the object being added to is a native prototype\n                 subject = node.arguments[0];\n-                object = subject.object;\n-\n+                object = subject && subject.object;\n                 if (object &&\n                     object.type === \"Identifier\" &&\n                     (modifiedBuiltins.indexOf(object.name) > -1) &&\n",
        "bugId": 154,
        "tax": "G-VI-IncorVI",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 17
    },
    {
        "changedFiles": {
            "lib/rules/max-len.js": {
                "insert": [
                    6
                ],
                "changes": [
                    13,
                    51
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/max-len.js b/lib/rules/max-len.js\nindex acedbad58d..a70a7cddf2 100644\n--- a/lib/rules/max-len.js\n+++ b/lib/rules/max-len.js\n@@ -3,6 +3,7 @@\n  * @author Matt DuVall <http://www.mattduvall.com>\n  */\n \n+\"use strict\";\n \n //------------------------------------------------------------------------------\n // Rule Definition\n@@ -10,8 +11,16 @@\n \n module.exports = function(context) {\n \n-    \"use strict\";\n-\n+    /**\n+     * Creates a string that is made up of repeating a given string a certain\n+     * number of times. This uses exponentiation of squares to achieve significant\n+     * performance gains over the more traditional implementation of such\n+     * functionality.\n+     * @param {string} str The string to repeat.\n+     * @param {int} num The number of times to repeat the string.\n+     * @returns {string} The created string.\n+     * @private\n+     */\n     function stringRepeat(str, num) {\n         var result = \"\";\n         for (num |= 0; num > 0; num >>>= 1, str += str) {\n@@ -48,7 +57,7 @@ module.exports = function(context) {\n             .split(/\\r?\\n/)\n             .forEach(function(line, i){\n                 if (line.length > maxLength) {\n-                    context.report(node, \"Line \" + (i + 1) + \" exceeds the maximum line length of \" + maxLength + \".\");\n+                    context.report(node, { line: i + 1, col: 1 }, \"Line \" + (i + 1) + \" exceeds the maximum line length of \" + maxLength + \".\");\n                 }\n             });\n     }\n",
        "bugId": 153,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 5
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "insert": [
                    70,
                    432
                ],
                "changes": [
                    671
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 34,
            "linesRem": 0,
            "linesAdd": 33,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex f175d1ab24..b9348b61c1 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -67,6 +67,7 @@ module.exports = {\n         const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;\n         const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;\n         const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;\n+        const PRECEDENCE_OF_UPDATE_EXPR = precedence({ type: \"UpdateExpression\" });\n \n         /**\n          * Determines if this rule should be enforced for a node given the current configuration.\n@@ -428,6 +429,38 @@ module.exports = {\n             }\n         }\n \n+        /**\n+         * Check the parentheses around the super class of the given class definition.\n+         * @param {ASTNode} node The node of class declarations to check.\n+         * @returns {void}\n+         */\n+        function dryClass(node) {\n+            if (!node.superClass) {\n+                return;\n+            }\n+\n+            // If `node.superClass` is a LeftHandSideExpression, parentheses are extra.\n+            // Otherwise, parentheses are needed.\n+            const hasExtraParens = precedence(node.superClass) > PRECEDENCE_OF_UPDATE_EXPR\n+                ? hasExcessParens(node.superClass)\n+                : hasDoubleExcessParens(node.superClass);\n+\n+            if (hasExtraParens) {\n+                report(node.superClass);\n+            }\n+        }\n+\n+        /**\n+         * Check the parentheses around the argument of the given spread operator.\n+         * @param {ASTNode} node The node of spread elements/properties to check.\n+         * @returns {void}\n+         */\n+        function drySpreadOperator(node) {\n+            if (node.argument && hasExcessParens(node.argument)) {\n+                report(node.argument);\n+            }\n+        }\n+\n         return {\n             ArrayExpression(node) {\n                 [].forEach.call(node.elements, e => {\n@@ -668,7 +701,14 @@ module.exports = {\n                         report(node.argument);\n                     }\n                 }\n-            }\n+            },\n+\n+            ClassDeclaration: dryClass,\n+            ClassExpression: dryClass,\n+\n+            SpreadElement: drySpreadOperator,\n+            SpreadProperty: drySpreadOperator,\n+            ExperimentalSpreadProperty: drySpreadOperator\n         };\n \n     }\n",
        "bugId": 152,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "MD-ADD",
            "MD-ADD",
            "MD-ADD",
            "MD-ADD",
            "MD-ADD"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/ignored-paths.js": {
                "changes": [
                    127
                ],
                "deletes": [
                    127
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 5,
            "linesAdd": 4,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/ignored-paths.js b/lib/ignored-paths.js\nindex c6a710a9b5..060e9507e5 100644\n--- a/lib/ignored-paths.js\n+++ b/lib/ignored-paths.js\n@@ -124,11 +124,6 @@ function IgnoredPaths(options) {\n     if (options.ignore !== false) {\n         var ignorePath;\n \n-        if (options.ignorePattern) {\n-            addPattern(this.ig.custom, options.ignorePattern);\n-            addPattern(this.ig.default, options.ignorePattern);\n-        }\n-\n         if (options.ignorePath) {\n             debug(\"Using specific ignore file\");\n \n@@ -159,6 +154,10 @@ function IgnoredPaths(options) {\n             addIgnoreFile(this.ig.default, ignorePath);\n         }\n \n+        if (options.ignorePattern) {\n+            addPattern(this.ig.custom, options.ignorePattern);\n+            addPattern(this.ig.default, options.ignorePattern);\n+        }\n     }\n \n     this.options = options;\n",
        "bugId": 151,
        "tax": "IncorFI-CP",
        "pan_cat": [],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-expressions.js": {
                "changes": [
                    104
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-unused-expressions.js b/lib/rules/no-unused-expressions.js\nindex b640895646..cdabca204a 100644\n--- a/lib/rules/no-unused-expressions.js\n+++ b/lib/rules/no-unused-expressions.js\n@@ -101,7 +101,7 @@ module.exports = {\n                 }\n             }\n \n-            return /^(?:Assignment|Call|New|Update|Yield)Expression$/.test(node.type) ||\n+            return /^(?:Assignment|Call|New|Update|Yield|Await)Expression$/.test(node.type) ||\n                 (node.type === \"UnaryExpression\" && [\"delete\", \"void\"].indexOf(node.operator) >= 0);\n         }\n \n",
        "bugId": 150,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/config/config-initializer.js": {
                "changes": [
                    270
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/config/config-initializer.js b/lib/config/config-initializer.js\nindex ec2acae3cd..36b641147e 100644\n--- a/lib/config/config-initializer.js\n+++ b/lib/config/config-initializer.js\n@@ -267,7 +267,7 @@ function processAnswers(answers) {\n function getConfigForStyleGuide(guide) {\n     const guides = {\n         google: {extends: \"google\"},\n-        airbnb: {extends: \"airbnb\", plugins: [\"react\"]},\n+        airbnb: {extends: \"airbnb\", plugins: [\"react\", \"jsx-a11y\", \"import\"]},\n         standard: {extends: \"standard\", plugins: [\"standard\", \"promise\"]}\n     };\n \n",
        "bugId": 149,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-escape.js": {
                "changes": [
                    150
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-useless-escape.js b/lib/rules/no-useless-escape.js\nindex 91edfe718e..ffe1199970 100644\n--- a/lib/rules/no-useless-escape.js\n+++ b/lib/rules/no-useless-escape.js\n@@ -147,7 +147,13 @@ module.exports = {\n         function check(node) {\n             const isTemplateElement = node.type === \"TemplateElement\";\n \n-            if (isTemplateElement && node.parent && node.parent.parent && node.parent.parent.type === \"TaggedTemplateExpression\") {\n+            if (\n+                isTemplateElement &&\n+                node.parent &&\n+                node.parent.parent &&\n+                node.parent.parent.type === \"TaggedTemplateExpression\" &&\n+                node.parent === node.parent.parent.quasi\n+            ) {\n \n                 // Don't report tagged template literals, because the backslash character is accessible to the tag function.\n                 return;\n",
        "bugId": 148,
        "tax": "IncompFI-MIV-MHSC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    304
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/linter.js b/lib/linter.js\nindex e36fa995aa..a9bf2bf25f 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -301,7 +301,7 @@ function modifyConfigsFromComments(filename, ast, config, linterContext) {\n     const problems = [];\n     const disableDirectives = [];\n \n-    ast.comments.forEach(comment => {\n+    ast.comments.filter(token => token.type !== \"Shebang\").forEach(comment => {\n \n         let value = comment.value.trim();\n         const match = /^(eslint(-\\w+){0,3}|exported|globals?)(\\s|$)/.exec(value);\n",
        "bugId": 147,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "SQ-AMO"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/key-spacing.js": {
                "changes": [
                    206
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/key-spacing.js b/lib/rules/key-spacing.js\nindex 6bb03a5b3c..cfdbf11f32 100644\n--- a/lib/rules/key-spacing.js\n+++ b/lib/rules/key-spacing.js\n@@ -203,7 +203,10 @@ module.exports = function(context) {\n             firstTokenAfterColon = context.getTokenAfter(getNextColon(key)),\n             location = side === \"key\" ? key.loc.start : firstTokenAfterColon.loc.start;\n \n-        if ((diff && mode === \"strict\" || diff < 0 && mode === \"minimum\") &&\n+        if ((\n+            diff && mode === \"strict\" ||\n+            diff < 0 && mode === \"minimum\" ||\n+            diff > 0 && !expected && mode === \"minimum\") &&\n             !(expected && containsLineTerminator(whitespace))\n         ) {\n             context.report(property[side], location, messages[side], {\n",
        "bugId": 146,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 71
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    458
                ]
            },
            "conf/default-config-options.js": {
                "changes": [
                    28
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 7
        },
        "diff": "diff --git a/conf/default-config-options.js b/conf/default-config-options.js\nindex 63d28c48b6..96fe25ce6f 100644\n--- a/conf/default-config-options.js\n+++ b/conf/default-config-options.js\n@@ -25,9 +25,5 @@ module.exports = deepFreeze({\n     rules: {},\n     settings: {},\n     parser: \"espree\",\n-    parserOptions: {\n-        ecmaVersion: 5,\n-        sourceType: \"script\",\n-        ecmaFeatures: {}\n-    }\n+    parserOptions: {}\n });\ndiff --git a/lib/linter.js b/lib/linter.js\nindex 0b0d06a866..d2f1f46574 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -455,8 +455,8 @@ function normalizeEcmaVersion(ecmaVersion, isModule) {\n  */\n function prepareConfig(config, envContext) {\n     config.globals = config.globals || {};\n-    const copiedRules = Object.assign({}, defaultConfig.rules);\n-    let parserOptions = Object.assign({}, defaultConfig.parserOptions);\n+    const copiedRules = {};\n+    let parserOptions = {};\n \n     if (typeof config.rules === \"object\") {\n         Object.keys(config.rules).forEach(k => {\n",
        "bugId": 145,
        "tax": "IncorFI-CP",
        "pan_cat": [
            "MD-CHG",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    1181,
                    1185,
                    1187
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 429567ee56..29eba5453e 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1178,14 +1178,15 @@ module.exports = {\n                 }\n             },\n \n-            \"MemberExpression, JSXMemberExpression\"(node) {\n-                const firstNonObjectToken = sourceCode.getFirstTokenBetween(node.object, node.property, astUtils.isNotClosingParenToken);\n+            \"MemberExpression, JSXMemberExpression, MetaProperty\"(node) {\n+                const object = node.type === \"MetaProperty\" ? node.meta : node.object;\n+                const firstNonObjectToken = sourceCode.getFirstTokenBetween(object, node.property, astUtils.isNotClosingParenToken);\n                 const secondNonObjectToken = sourceCode.getTokenAfter(firstNonObjectToken);\n \n-                const objectParenCount = sourceCode.getTokensBetween(node.object, node.property, { filter: astUtils.isClosingParenToken }).length;\n+                const objectParenCount = sourceCode.getTokensBetween(object, node.property, { filter: astUtils.isClosingParenToken }).length;\n                 const firstObjectToken = objectParenCount\n-                    ? sourceCode.getTokenBefore(node.object, { skip: objectParenCount - 1 })\n-                    : sourceCode.getFirstToken(node.object);\n+                    ? sourceCode.getTokenBefore(object, { skip: objectParenCount - 1 })\n+                    : sourceCode.getFirstToken(object);\n                 const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);\n                 const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n \n",
        "bugId": 144,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-CHG",
            "AS-CE"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "insert": [
                    421
                ],
                "changes": [
                    430
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex fd6fd0b78b..879529bf09 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -418,6 +418,7 @@ module.exports = {\n         function checkExpressionOrExportStatement(node) {\n             const firstToken = isParenthesised(node) ? sourceCode.getTokenBefore(node) : sourceCode.getFirstToken(node);\n             const secondToken = sourceCode.getTokenAfter(firstToken, astUtils.isNotOpeningParenToken);\n+            const thirdToken = secondToken ? sourceCode.getTokenAfter(secondToken) : null;\n \n             if (\n                 astUtils.isOpeningParenToken(firstToken) &&\n@@ -427,7 +428,8 @@ module.exports = {\n                         secondToken.value === \"function\" ||\n                         secondToken.value === \"class\" ||\n                         secondToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(secondToken, astUtils.isNotClosingParenToken))\n-                    )\n+                    ) ||\n+                    secondToken && secondToken.type === \"Identifier\" && secondToken.value === \"async\" && thirdToken && thirdToken.type === \"Keyword\" && thirdToken.value === \"function\"\n                 )\n             ) {\n                 tokensToIgnore.add(secondToken);\n",
        "bugId": 143,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/no-cond-assign.js": {
                "changes": [
                    83
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-cond-assign.js b/lib/rules/no-cond-assign.js\nindex d43ecf8908..c83afca0af 100644\n--- a/lib/rules/no-cond-assign.js\n+++ b/lib/rules/no-cond-assign.js\n@@ -80,7 +80,13 @@ module.exports = function(context) {\n      * @returns {void}\n      */\n     function testForAssign(node) {\n-        if (node.test && (node.test.type === \"AssignmentExpression\") && !isParenthesisedTwice(node.test)) {\n+        if (node.test &&\n+            (node.test.type === \"AssignmentExpression\") &&\n+            (node.type === \"ForStatement\" ?\n+                !isParenthesised(node.test) :\n+                !isParenthesisedTwice(node.test)\n+            )\n+        ) {\n             // must match JSHint's error message\n             context.report({\n                 node: node,\n",
        "bugId": 142,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 17
    },
    {
        "changedFiles": {
            "lib/util/npm-util.js": {
                "changes": [
                    14,
                    76
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/util/npm-util.js b/lib/util/npm-util.js\nindex fd081307fd..27120ad817 100644\n--- a/lib/util/npm-util.js\n+++ b/lib/util/npm-util.js\n@@ -11,7 +11,8 @@\n \n var fs = require(\"fs\"),\n     path = require(\"path\"),\n-    shell = require(\"shelljs\");\n+    shell = require(\"shelljs\"),\n+    log = require(\"../logging\");\n \n //------------------------------------------------------------------------------\n // Helpers\n@@ -69,11 +70,18 @@ function installSyncSaveDev(packages) {\n function check(packages, opt) {\n     var deps = [];\n     var pkgJson = (opt) ? findPackageJson(opt.startDir) : findPackageJson();\n+    var fileJson;\n \n     if (!pkgJson) {\n         throw new Error(\"Could not find a package.json file. Run 'npm init' to create one.\");\n     }\n-    var fileJson = JSON.parse(fs.readFileSync(pkgJson, \"utf8\"));\n+\n+    try {\n+        fileJson = JSON.parse(fs.readFileSync(pkgJson, \"utf8\"));\n+    } catch (e) {\n+        log.info(\"Could not read package.json file. Please check that the file contains valid JSON.\");\n+        throw new Error(e);\n+    }\n \n     if (opt.devDependencies && typeof fileJson.devDependencies === \"object\") {\n         deps = deps.concat(Object.keys(fileJson.devDependencies));\n",
        "bugId": 141,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "TY-ARTC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    657
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex f723fbfca7..6fcf3d01c8 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -654,7 +654,8 @@ module.exports = {\n                             parent.type === \"ArrayExpression\" ||\n                             parent.type === \"CallExpression\" ||\n                             parent.type === \"ArrowFunctionExpression\" ||\n-                            parent.type === \"NewExpression\"\n+                            parent.type === \"NewExpression\" ||\n+                            parent.type === \"LogicalExpression\"\n                         ) {\n                             nodeIndent = nodeIndent + indentSize;\n                         }\n",
        "bugId": 140,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/ast-utils.js": {
                "insert": [
                    629,
                    641
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex e65284ff79..47cc71990f 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -626,6 +626,9 @@ module.exports = {\n                 //     // setup...\n                 //     return function foo() { ... };\n                 //   })();\n+                //   obj.foo = (() =>\n+                //     function foo() { ... }\n+                //   )();\n                 case \"ReturnStatement\": {\n                     const func = getUpperFunction(parent);\n \n@@ -635,6 +638,12 @@ module.exports = {\n                     node = func.parent;\n                     break;\n                 }\n+                case \"ArrowFunctionExpression\":\n+                    if (node !== parent.body || !isCallee(parent)) {\n+                        return true;\n+                    }\n+                    node = parent.parent;\n+                    break;\n \n                 // e.g.\n                 //   var obj = { foo() { ... } };\n",
        "bugId": 139,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "SW-ARSB"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    495
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 2a30e9119f..74d4ef388c 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -492,11 +492,9 @@ module.exports = function(context) {\n         // Comma can be placed before declaration\n         checkNodesIndent(elements, elementsIndent, true);\n \n-        if (elements.length > 0) {\n-            // Skip last block line check if last item in same line\n-            if (lastElement.loc.end.line === node.loc.end.line) {\n-                return;\n-            }\n+        // Only check the last line if it is a `Punctuator` token such as `;` or `}`\n+        if (context.getLastToken(node).type !== \"Punctuator\") {\n+            return;\n         }\n \n         var tokenBeforeLastElement = context.getTokenBefore(lastElement);\n",
        "bugId": 138,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC",
            "IF-RMV"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/object-curly-spacing.js": {
                "insert": [
                    183
                ],
                "changes": [
                    194
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 25,
            "linesRem": 0,
            "linesAdd": 24,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/object-curly-spacing.js b/lib/rules/object-curly-spacing.js\nindex 306a58d281..0abf325918 100644\n--- a/lib/rules/object-curly-spacing.js\n+++ b/lib/rules/object-curly-spacing.js\n@@ -180,6 +180,30 @@ module.exports = {\n             }\n         }\n \n+        /**\n+         * Gets '}' token of an object node.\n+         *\n+         * Because the last token of object patterns might be a type annotation,\n+         * this traverses tokens preceded by the last property, then returns the\n+         * first '}' token.\n+         *\n+         * @param {ASTNode} node - The node to get. This node is an\n+         *      ObjectExpression or an ObjectPattern. And this node has one or\n+         *      more properties.\n+         * @returns {Token} '}' token.\n+         */\n+        function getClosingBraceOfObject(node) {\n+            const lastProperty = node.properties[node.properties.length - 1];\n+            let token = sourceCode.getTokenAfter(lastProperty);\n+\n+            // skip ')' and trailing commas.\n+            while (token.type !== \"Punctuator\" || token.value !== \"}\") {\n+                token = sourceCode.getTokenAfter(token);\n+            }\n+\n+            return token;\n+        }\n+\n         /**\n          * Reports a given object node if spacing in curly braces is invalid.\n          * @param {ASTNode} node - An ObjectExpression or ObjectPattern node to check.\n@@ -191,7 +215,7 @@ module.exports = {\n             }\n \n             const first = sourceCode.getFirstToken(node),\n-                last = sourceCode.getLastToken(node),\n+                last = getClosingBraceOfObject(node),\n                 second = sourceCode.getTokenAfter(first),\n                 penultimate = sourceCode.getTokenBefore(last);\n \n",
        "bugId": 137,
        "tax": "IncompFI-MIV-MHS",
        "pan_cat": [
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-multiple-empty-lines.js": {
                "changes": [
                    55,
                    125
                ],
                "deletes": [
                    125
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 2,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-multiple-empty-lines.js b/lib/rules/no-multiple-empty-lines.js\nindex d5485df108..daab826f4c 100644\n--- a/lib/rules/no-multiple-empty-lines.js\n+++ b/lib/rules/no-multiple-empty-lines.js\n@@ -52,8 +52,8 @@ module.exports = {\n \n         if (context.options.length) {\n             max = context.options[0].max;\n-            maxEOF = context.options[0].maxEOF;\n-            maxBOF = context.options[0].maxBOF;\n+            maxEOF = typeof context.options[0].maxEOF !== \"undefined\" ? context.options[0].maxEOF : max;\n+            maxBOF = typeof context.options[0].maxBOF !== \"undefined\" ? context.options[0].maxBOF : max;\n         }\n \n         var sourceCode = context.getSourceCode();\n@@ -122,11 +122,10 @@ module.exports = {\n \n                 // Aggregate and count blank lines\n                 if (firstNonBlankLine > maxBOF) {\n-                    currentLocation = firstNonBlankLine - 1;\n-\n                     context.report(node, 0,\n                             \"Too many blank lines at the beginning of file. Max of \" + maxBOF + \" allowed.\");\n                 }\n+                currentLocation = firstNonBlankLine - 1;\n \n                 lastLocation = currentLocation;\n                 currentLocation = trimmedLines.indexOf(\"\", currentLocation + 1);\n",
        "bugId": 136,
        "tax": "IncompFI-MIV-MHSC",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/complexity.js": {
                "changes": [
                    157
                ],
                "deletes": [
                    129
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 14,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/complexity.js b/lib/rules/complexity.js\nindex e0313fa78f..323fdbff8e 100644\n--- a/lib/rules/complexity.js\n+++ b/lib/rules/complexity.js\n@@ -126,20 +126,6 @@ module.exports = {\n             }\n         }\n \n-        /**\n-         * Increase the logical path complexity in context\n-         * @param {ASTNode} node node to evaluate\n-         * @returns {void}\n-         * @private\n-         */\n-        function increaseLogicalComplexity(node) {\n-\n-            // Avoiding &&\n-            if (node.operator === \"||\") {\n-                increaseComplexity();\n-            }\n-        }\n-\n         //--------------------------------------------------------------------------\n         // Public API\n         //--------------------------------------------------------------------------\n@@ -154,7 +140,7 @@ module.exports = {\n \n             CatchClause: increaseComplexity,\n             ConditionalExpression: increaseComplexity,\n-            LogicalExpression: increaseLogicalComplexity,\n+            LogicalExpression: increaseComplexity,\n             ForStatement: increaseComplexity,\n             ForInStatement: increaseComplexity,\n             ForOfStatement: increaseComplexity,\n",
        "bugId": 135,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MD-CHG"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-escape.js": {
                "insert": [
                    135
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-useless-escape.js b/lib/rules/no-useless-escape.js\nindex 629a52a7ec..eaa8f4a90f 100644\n--- a/lib/rules/no-useless-escape.js\n+++ b/lib/rules/no-useless-escape.js\n@@ -132,6 +132,12 @@ module.exports = {\n             let nodeEscapes,\n                 match;\n \n+            if (isTemplateElement && node.parent && node.parent.parent && node.parent.parent.type === \"TaggedTemplateExpression\") {\n+\n+                // Don't report tagged template literals, because the backslash character is accessible to the tag function.\n+                return;\n+            }\n+\n             if (typeof node.value === \"string\" || isTemplateElement) {\n \n                 /*\n",
        "bugId": 134,
        "tax": "PM",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/token-store/index.js": {
                "changes": [
                    48
                ]
            },
            "lib/token-store/utils.js": {
                "changes": [
                    64,
                    84
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/token-store/index.js b/lib/token-store/index.js\nindex b74126b905..bd523fdaac 100644\n--- a/lib/token-store/index.js\n+++ b/lib/token-store/index.js\n@@ -45,7 +45,7 @@ const PUBLIC_METHODS = Object.freeze([\n  * Creates the map from locations to indices in `tokens`.\n  *\n  * The first/last location of tokens is mapped to the index of the token.\n- * The first/last location of comments is mapped to the index of the previous token of each comment.\n+ * The first/last location of comments is mapped to the index of the next token of each comment.\n  *\n  * @param {Token[]} tokens - The array of tokens.\n  * @param {Comment[]} comments - The array of comments.\ndiff --git a/lib/token-store/utils.js b/lib/token-store/utils.js\nindex 2dea7636fb..2f6cff1c78 100644\n--- a/lib/token-store/utils.js\n+++ b/lib/token-store/utils.js\n@@ -61,7 +61,15 @@ exports.getFirstIndex = function getFirstIndex(tokens, indexMap, startLoc) {\n         return indexMap[startLoc];\n     }\n     if ((startLoc - 1) in indexMap) {\n-        return indexMap[startLoc - 1] + 1;\n+        const index = indexMap[startLoc - 1];\n+        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;\n+\n+        // For the map of \"comment's location -> token's index\", it points the next token of a comment.\n+        // In that case, +1 is unnecessary.\n+        if (token && token.range[0] >= startLoc) {\n+            return index;\n+        }\n+        return index + 1;\n     }\n     return 0;\n };\n@@ -81,7 +89,15 @@ exports.getLastIndex = function getLastIndex(tokens, indexMap, endLoc) {\n         return indexMap[endLoc] - 1;\n     }\n     if ((endLoc - 1) in indexMap) {\n-        return indexMap[endLoc - 1];\n+        const index = indexMap[endLoc - 1];\n+        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;\n+\n+        // For the map of \"comment's location -> token's index\", it points the next token of a comment.\n+        // In that case, -1 is necessary.\n+        if (token && token.range[1] > endLoc) {\n+            return index - 1;\n+        }\n+        return index;\n     }\n     return tokens.length - 1;\n };\n",
        "bugId": 133,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "Return",
            "IF-APCJ"
        ],
        "failingTests": 32
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "insert": [
                    590
                ]
            },
            "lib/ast-utils.js": {
                "insert": [
                    563
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex 66b39d922a..9e171ea316 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -560,6 +560,7 @@ module.exports = {\n                 /* falls through */\n \n             case \"UnaryExpression\":\n+            case \"AwaitExpression\":\n                 return 14;\n \n             case \"UpdateExpression\":\ndiff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex 1d355cf0a3..dc42e74892 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -587,6 +587,7 @@ module.exports = {\n \n             UnaryExpression: dryUnaryUpdate,\n             UpdateExpression: dryUnaryUpdate,\n+            AwaitExpression: dryUnaryUpdate,\n \n             VariableDeclarator(node) {\n                 if (node.init && hasExcessParens(node.init) &&\n",
        "bugId": 132,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "SW-ARSB",
            "MD-ADD"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-empty.js": {
                "insert": [
                    5
                ],
                "changes": [
                    12,
                    19
                ],
                "deletes": [
                    12
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 2,
            "linesAdd": 2,
            "chunks": 4,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-empty.js b/lib/rules/no-empty.js\nindex d0bc6e11b4..2180c6dec4 100644\n--- a/lib/rules/no-empty.js\n+++ b/lib/rules/no-empty.js\n@@ -2,6 +2,7 @@\n  * @fileoverview Rule to flag use of an empty block statement\n  * @author Nicholas C. Zakas\n  */\n+\"use strict\";\n \n //------------------------------------------------------------------------------\n // Rule Definition\n@@ -9,14 +10,13 @@\n \n module.exports = function(context) {\n \n-    \"use strict\";\n-\n     return {\n+\n         \"BlockStatement\": function(node) {\n             var ancestors = context.getAncestors(),\n                 parentType = ancestors[ancestors.length - 1].type;\n \n-            if (parentType === \"FunctionExpression\" || parentType === \"FunctionDeclaration\") {\n+            if (/FunctionExpression|FunctionDeclaration|TryStatement|CatchClause/.test(parentType)) {\n                 return;\n             }\n \n",
        "bugId": 131,
        "tax": "PM",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 23
    },
    {
        "changedFiles": {
            "lib/rules/no-multiple-empty-lines.js": {
                "changes": [
                    116
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-multiple-empty-lines.js b/lib/rules/no-multiple-empty-lines.js\nindex 679c4f69c7..0be8f333cb 100644\n--- a/lib/rules/no-multiple-empty-lines.js\n+++ b/lib/rules/no-multiple-empty-lines.js\n@@ -113,8 +113,10 @@ module.exports = {\n                 });\n \n                 // add the notEmpty lines in there with a placeholder\n-                notEmpty.forEach(function(x, i) {\n-                    trimmedLines[i] = x;\n+                notEmpty.forEach(function(nonEmptyLineNumber) {\n+\n+                    // FIXME: (not-an-aardvark) Use a better strategy after refactoring this rule\n+                    trimmedLines[nonEmptyLineNumber] = \"non-empty placeholder string\";\n                 });\n \n                 if (typeof maxEOF === \"undefined\") {\n",
        "bugId": 130,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-var.js": {
                "insert": [
                    212,
                    274
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 12,
            "linesRem": 0,
            "linesAdd": 12,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-var.js b/lib/rules/no-var.js\nindex 73aaecdd83..53a1b28578 100644\n--- a/lib/rules/no-var.js\n+++ b/lib/rules/no-var.js\n@@ -209,6 +209,7 @@ module.exports = {\n          * - A variable is used from a closure within a loop.\n          * - A variable might be used before it is assigned within a loop.\n          * - A variable might be used in TDZ.\n+         * - A variable is declared in statement position (e.g. a single-line `IfStatement`)\n          *\n          * ## A variable is declared on a SwitchCase node.\n          *\n@@ -270,6 +271,17 @@ module.exports = {\n                 }\n             }\n \n+            if (\n+                !isLoopAssignee(node) &&\n+                node.parent.type !== \"BlockStatement\" &&\n+                node.parent.type !== \"Program\" &&\n+                node.parent.type !== \"SwitchCase\"\n+            ) {\n+\n+                // If the declaration is not in a block, e.g. `if (foo) var bar = 1;`, then it can't be fixed.\n+                return false;\n+            }\n+\n             return true;\n         }\n \n",
        "bugId": 129,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    782,
                    852
                ],
                "changes": [
                    840
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 15,
            "linesRem": 0,
            "linesAdd": 14,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex acc5246307..faa42481b7 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -779,6 +779,19 @@ module.exports = {\n             return (statement.type === \"ExpressionStatement\" || statement.type === \"VariableDeclaration\") && statement.parent.type === \"Program\";\n         }\n \n+        /**\n+         * Counts the number of linebreaks that follow the last non-whitespace character in a string\n+         * @param {string} string The string to check\n+         * @returns {number} The number of JavaScript linebreaks that follow the last non-whitespace character,\n+         * or the total number of linebreaks if the string is all whitespace.\n+         */\n+        function countTrailingLinebreaks(string) {\n+            const trailingWhitespace = string.match(/\\s*$/)[0];\n+            const linebreakMatches = trailingWhitespace.match(astUtils.createGlobalLinebreakMatcher());\n+\n+            return linebreakMatches === null ? 0 : linebreakMatches.length;\n+        }\n+\n         /**\n          * Check indentation for lists of elements (arrays, objects, function params)\n          * @param {ASTNode[]} elements List of elements that should be offset\n@@ -836,8 +849,12 @@ module.exports = {\n                 } else {\n                     const previousElement = elements[index - 1];\n                     const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);\n+                    const previousElementLastToken = previousElement && sourceCode.getLastToken(previousElement);\n \n-                    if (previousElement && sourceCode.getLastToken(previousElement).loc.end.line > startToken.loc.end.line) {\n+                    if (\n+                        previousElement &&\n+                        previousElementLastToken.loc.end.line - countTrailingLinebreaks(previousElementLastToken.value) > startToken.loc.end.line\n+                    ) {\n                         offsets.setDesiredOffsets(element.range, firstTokenOfPreviousElement, 0);\n                     }\n                 }\n",
        "bugId": 128,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-ADD",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    963,
                    967
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 0d4c7188b0..5baf4788b2 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -960,11 +960,20 @@ module.exports = {\n \n         return {\n             \"ArrayExpression, ArrayPattern\"(node) {\n-                addElementListIndent(node.elements, sourceCode.getFirstToken(node), sourceCode.getLastToken(node), options.ArrayExpression);\n+                const openingBracket = sourceCode.getFirstToken(node);\n+                const closingBracket = sourceCode.getTokenAfter(lodash.findLast(node.elements) || openingBracket, astUtils.isClosingBracketToken);\n+\n+                addElementListIndent(node.elements, openingBracket, closingBracket, options.ArrayExpression);\n             },\n \n             \"ObjectExpression, ObjectPattern\"(node) {\n-                addElementListIndent(node.properties, sourceCode.getFirstToken(node), sourceCode.getLastToken(node), options.ObjectExpression);\n+                const openingCurly = sourceCode.getFirstToken(node);\n+                const closingCurly = sourceCode.getTokenAfter(\n+                    node.properties.length ? node.properties[node.properties.length - 1] : openingCurly,\n+                    astUtils.isClosingBraceToken\n+                );\n+\n+                addElementListIndent(node.properties, openingCurly, closingCurly, options.ObjectExpression);\n             },\n \n             ArrowFunctionExpression(node) {\n",
        "bugId": 127,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/valid-typeof.js": {
                "changes": [
                    61
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/valid-typeof.js b/lib/rules/valid-typeof.js\nindex cfb7f69336..ed0a7c0179 100644\n--- a/lib/rules/valid-typeof.js\n+++ b/lib/rules/valid-typeof.js\n@@ -58,8 +58,10 @@ module.exports = {\n                     if (parent.type === \"BinaryExpression\" && OPERATORS.indexOf(parent.operator) !== -1) {\n                         const sibling = parent.left === node ? parent.right : parent.left;\n \n-                        if (sibling.type === \"Literal\") {\n-                            if (VALID_TYPES.indexOf(sibling.value) === -1) {\n+                        if (sibling.type === \"Literal\" || sibling.type === \"TemplateLiteral\" && !sibling.expressions.length) {\n+                            const value = sibling.type === \"Literal\" ? sibling.value : sibling.quasis[0].value.cooked;\n+\n+                            if (VALID_TYPES.indexOf(value) === -1) {\n                                 context.report(sibling, \"Invalid typeof comparison value.\");\n                             }\n                         } else if (requireStringLiterals && !isTypeofExpression(sibling)) {\n",
        "bugId": 126,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/space-before-blocks.js": {
                "insert": [
                    18
                ],
                "changes": [
                    27
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 11,
            "linesRem": 0,
            "linesAdd": 10,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/space-before-blocks.js b/lib/rules/space-before-blocks.js\nindex 58db668c52..89215493e9 100644\n--- a/lib/rules/space-before-blocks.js\n+++ b/lib/rules/space-before-blocks.js\n@@ -15,6 +15,16 @@ var astUtils = require(\"../ast-utils\");\n module.exports = function(context) {\n     var requireSpace = context.options[0] !== \"never\";\n \n+    /**\n+     * Checks whether or not a given token is an arrow operator (=>).\n+     *\n+     * @param {Token} token - A token to check.\n+     * @returns {boolean} `true` if the token is an arrow operator.\n+     */\n+    function isArrow(token) {\n+        return token.type === \"Punctuator\" && token.value === \"=>\";\n+    }\n+\n     /**\n      * Checks the given BlockStatement node has a preceding space if it doesn\u2019t start on a new line.\n      * @param {ASTNode|Token} node The AST node of a BlockStatement.\n@@ -24,7 +34,7 @@ module.exports = function(context) {\n         var precedingToken = context.getTokenBefore(node),\n             hasSpace;\n \n-        if (precedingToken && astUtils.isTokenOnSameLine(precedingToken, node)) {\n+        if (precedingToken && !isArrow(precedingToken) && astUtils.isTokenOnSameLine(precedingToken, node)) {\n             hasSpace = astUtils.isTokenSpaced(precedingToken, node);\n \n             if (requireSpace) {\n",
        "bugId": 125,
        "tax": "IncompFI-MIV-MHS",
        "pan_cat": [
            "MD-CHG",
            "IF-CC"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    650
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 8585745f1d..a9cbd51779 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -647,9 +647,13 @@ module.exports = {\n                 return elem !== null;\n             });\n \n-            // Skip if first element is in same line with this node\n-            if (elements.length > 0 && elements[0].loc.start.line === node.loc.start.line) {\n-                return;\n+            // Skip if element is in same line with this node\n+            if (elements.length > 0 && node.type === \"ArrayExpression\") {\n+                elements.forEach(el => {\n+                    if (el.loc.start.line === node.loc.start.line) {\n+                        return;\n+                    }\n+                });\n             }\n \n             let nodeIndent;\n",
        "bugId": 124,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/semi.js": {
                "changes": [
                    56,
                    130
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/semi.js b/lib/rules/semi.js\nindex 3b6a23a862..ee37ab018c 100644\n--- a/lib/rules/semi.js\n+++ b/lib/rules/semi.js\n@@ -53,7 +53,7 @@ module.exports = {\n \n     create(context) {\n \n-        const OPT_OUT_PATTERN = /^[-[(/+]$/; // One of [(/+-, but not ++ or --\n+        const OPT_OUT_PATTERN = /^[-[(/+`]/; // One of [(/+-`\n         const options = context.options[1];\n         const never = context.options[0] === \"never\",\n             exceptOneLine = options && options.omitLastInOneLineBlock === true,\n@@ -127,7 +127,7 @@ module.exports = {\n \n             const lastTokenLine = lastToken.loc.end.line;\n             const nextTokenLine = nextToken.loc.start.line;\n-            const isOptOutToken = OPT_OUT_PATTERN.test(nextToken.value);\n+            const isOptOutToken = OPT_OUT_PATTERN.test(nextToken.value) && nextToken.value !== \"++\" && nextToken.value !== \"--\";\n             const isDivider = (nextToken.value === \"}\" || nextToken.value === \";\");\n \n             return (lastTokenLine !== nextTokenLine && !isOptOutToken) || isDivider;\n",
        "bugId": 123,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/id-length.js": {
                "changes": [
                    28,
                    33
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/id-length.js b/lib/rules/id-length.js\nindex a0a1019e30..0ea42e14ef 100644\n--- a/lib/rules/id-length.js\n+++ b/lib/rules/id-length.js\n@@ -25,12 +25,12 @@ module.exports = function(context) {\n         }, {});\n \n     var SUPPORTED_EXPRESSIONS = {\n-        \"MemberExpression\": function(parent) {\n+        \"MemberExpression\": properties && function(parent) {\n             return !parent.computed && (\n                 // regular property assignment\n                 parent.parent.left === parent || (\n                     // or the last identifier in an ObjectPattern destructuring\n-                    parent.parent.type === \"Property\" && properties && parent.parent.value === parent &&\n+                    parent.parent.type === \"Property\" && parent.parent.value === parent &&\n                     parent.parent.parent.type === \"ObjectPattern\" && parent.parent.parent.parent.left === parent.parent.parent\n                 )\n             );\n",
        "bugId": 122,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-CHG"
        ],
        "failingTests": 17
    },
    {
        "changedFiles": {
            "lib/rules/dot-notation.js": {
                "insert": [
                    7
                ],
                "changes": [
                    67,
                    72
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 11,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 3,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/dot-notation.js b/lib/rules/dot-notation.js\nindex d55b098b25..3f5eae0bbe 100644\n--- a/lib/rules/dot-notation.js\n+++ b/lib/rules/dot-notation.js\n@@ -4,6 +4,12 @@\n  */\n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+const astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -64,12 +70,10 @@ module.exports = {\n                                 propertyValue: JSON.stringify(node.property.value)\n                             },\n                             fix(fixer) {\n-                                const leftBracket = sourceCode.getTokenBefore(node.property);\n-                                const rightBracket = sourceCode.getTokenAfter(node.property);\n-                                const textBeforeProperty = sourceCode.text.slice(leftBracket.range[1], node.property.range[0]);\n-                                const textAfterProperty = sourceCode.text.slice(node.property.range[1], rightBracket.range[0]);\n+                                const leftBracket = sourceCode.getTokenAfter(node.object, astUtils.isOpeningBracketToken);\n+                                const rightBracket = sourceCode.getLastToken(node);\n \n-                                if (textBeforeProperty.trim() || textAfterProperty.trim()) {\n+                                if (sourceCode.getFirstTokenBetween(leftBracket, rightBracket, { includeComments: true, filter: astUtils.isCommentToken })) {\n \n                                     // Don't perform any fixes if there are comments inside the brackets.\n                                     return null;\n",
        "bugId": 121,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/valid-typeof.js": {
                "insert": [
                    37
                ],
                "changes": [
                    44,
                    54
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 11,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/valid-typeof.js b/lib/rules/valid-typeof.js\nindex b13e2aefdd..cfb7f69336 100644\n--- a/lib/rules/valid-typeof.js\n+++ b/lib/rules/valid-typeof.js\n@@ -34,6 +34,17 @@ module.exports = {\n         const VALID_TYPES = [\"symbol\", \"undefined\", \"object\", \"boolean\", \"number\", \"string\", \"function\"],\n             OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];\n \n+        const requireStringLiterals = context.options[0] && context.options[0].requireStringLiterals;\n+\n+        /**\n+        * Determines whether a node is a typeof expression.\n+        * @param {ASTNode} node The node\n+        * @returns {boolean} `true` if the node is a typeof expression\n+        */\n+        function isTypeofExpression(node) {\n+            return node.type === \"UnaryExpression\" && node.operator === \"typeof\";\n+        }\n+\n         //--------------------------------------------------------------------------\n         // Public\n         //--------------------------------------------------------------------------\n@@ -41,7 +52,7 @@ module.exports = {\n         return {\n \n             UnaryExpression(node) {\n-                if (node.operator === \"typeof\") {\n+                if (isTypeofExpression(node)) {\n                     const parent = context.getAncestors().pop();\n \n                     if (parent.type === \"BinaryExpression\" && OPERATORS.indexOf(parent.operator) !== -1) {\n@@ -51,7 +62,7 @@ module.exports = {\n                             if (VALID_TYPES.indexOf(sibling.value) === -1) {\n                                 context.report(sibling, \"Invalid typeof comparison value.\");\n                             }\n-                        } else if (context.options[0] && context.options[0].requireStringLiterals) {\n+                        } else if (requireStringLiterals && !isTypeofExpression(sibling)) {\n                             context.report(sibling, \"Typeof comparisons should be to string literals.\");\n                         }\n                     }\n",
        "bugId": 120,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD",
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/prefer-destructuring.js": {
                "changes": [
                    168
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/prefer-destructuring.js b/lib/rules/prefer-destructuring.js\nindex e9d02da3a1..112ea64613 100644\n--- a/lib/rules/prefer-destructuring.js\n+++ b/lib/rules/prefer-destructuring.js\n@@ -165,8 +165,10 @@ module.exports = {\n             if (shouldCheck(reportNode.type, \"object\")) {\n                 const property = rightNode.property;\n \n-                if ((property.type === \"Literal\" && leftNode.name === property.value) || (property.type === \"Identifier\" &&\n-                    leftNode.name === property.name)) {\n+                if (\n+                    (property.type === \"Literal\" && leftNode.name === property.value) ||\n+                    (property.type === \"Identifier\" && leftNode.name === property.name && !rightNode.computed)\n+                ) {\n                     report(reportNode, \"object\");\n                 }\n             }\n",
        "bugId": 119,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/space-in-parens.js": {
                "changes": [
                    40,
                    101
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/space-in-parens.js b/lib/rules/space-in-parens.js\nindex c7f7f5c12f..ff124c1298 100644\n--- a/lib/rules/space-in-parens.js\n+++ b/lib/rules/space-in-parens.js\n@@ -37,8 +37,8 @@ module.exports = function(context) {\n     function getNeverChecks(opts) {\n         var missingSpaceOpeners = [],\n             missingSpaceClosers = [],\n-            rejectedSpaceOpeners = [\" \", \"\\\\n\", \"\\\\r\"],\n-            rejectedSpaceClosers = [\" \", \"\\\\n\", \"\\\\r\"],\n+            rejectedSpaceOpeners = [\"\\\\s\"],\n+            rejectedSpaceClosers = [\"\\\\s\"],\n             missingSpaceCheck,\n             rejectedSpaceCheck;\n \n@@ -98,8 +98,8 @@ module.exports = function(context) {\n      * @private\n      */\n     function getAlwaysChecks(opts) {\n-        var missingSpaceOpeners = [\" \", \"\\\\)\", \"\\\\r\", \"\\\\n\"],\n-            missingSpaceClosers = [\" \", \"\\\\(\", \"\\\\r\", \"\\\\n\"],\n+        var missingSpaceOpeners = [\"\\\\s\", \"\\\\)\"],\n+            missingSpaceClosers = [\"\\\\s\", \"\\\\(\"],\n             rejectedSpaceOpeners = [],\n             rejectedSpaceClosers = [],\n             missingSpaceCheck,\n",
        "bugId": 118,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/rules/quote-props.js": {
                "insert": [
                    44
                ],
                "changes": [
                    49,
                    86,
                    142
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 4,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/quote-props.js b/lib/rules/quote-props.js\nindex 7f3e293f69..f3453adb06 100644\n--- a/lib/rules/quote-props.js\n+++ b/lib/rules/quote-props.js\n@@ -41,13 +41,14 @@ module.exports = function(context) {\n \n     /**\n      * Checks if an espree-tokenized key has redundant quotes (i.e. whether quotes are unnecessary)\n+     * @param   {string} rawKey The raw key value from the source\n      * @param   {espreeTokens} tokens The espree-tokenized node key\n      * @param   {boolean} [skipNumberLiterals=false] Indicates whether number literals should be checked\n      * @returns {boolean} Whether or not a key has redundant quotes.\n      * @private\n      */\n-    function areQuotesRedundant(tokens, skipNumberLiterals) {\n-        return tokens.length === 1 &&\n+    function areQuotesRedundant(rawKey, tokens, skipNumberLiterals) {\n+        return tokens.length === 1 && tokens[0].start === 0 && tokens[0].end === rawKey.length &&\n             ([\"Identifier\", \"Keyword\", \"Null\", \"Boolean\"].indexOf(tokens[0].type) >= 0 ||\n             (tokens[0].type === \"Numeric\" && !skipNumberLiterals && \"\" + +tokens[0].value === tokens[0].value));\n     }\n@@ -83,7 +84,7 @@ module.exports = function(context) {\n                 return;\n             }\n \n-            if (CHECK_UNNECESSARY && areQuotesRedundant(tokens, NUMBERS)) {\n+            if (CHECK_UNNECESSARY && areQuotesRedundant(key.value, tokens, NUMBERS)) {\n                 context.report(node, MESSAGE_UNNECESSARY, {property: key.value});\n             }\n         } else if (KEYWORDS && key.type === \"Identifier\" && isKeyword(key.name)) {\n@@ -139,7 +140,7 @@ module.exports = function(context) {\n                         return;\n                     }\n \n-                    necessaryQuotes = necessaryQuotes || !areQuotesRedundant(tokens) || KEYWORDS && isKeyword(tokens[0].value);\n+                    necessaryQuotes = necessaryQuotes || !areQuotesRedundant(key.value, tokens) || KEYWORDS && isKeyword(tokens[0].value);\n                 }\n             } else if (KEYWORDS && checkQuotesRedundancy && key.type === \"Identifier\" && isKeyword(key.name)) {\n                 necessaryQuotes = true;\n",
        "bugId": 117,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-CHG",
            "Return",
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 69
    },
    {
        "changedFiles": {
            "lib/rules/no-loop-func.js": {
                "changes": [
                    76
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-loop-func.js b/lib/rules/no-loop-func.js\nindex 2b76093cce..247dc52cd4 100644\n--- a/lib/rules/no-loop-func.js\n+++ b/lib/rules/no-loop-func.js\n@@ -73,7 +73,7 @@ function getContainingLoopNode(node) {\n  * @returns {ASTNode} The most outer loop node.\n  */\n function getTopLoopNode(node, excludedNode) {\n-    var retv = null;\n+    var retv = node;\n     var border = excludedNode ? excludedNode.range[1] : 0;\n \n     while (node && node.range[0] >= border) {\n",
        "bugId": 116,
        "tax": "IncorFI-IncorDP-IncorI",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    1378,
                    1380
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 6babe29c9d..78c8bb9afe 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1375,13 +1375,14 @@ module.exports = {\n \n             JSXExpressionContainer(node) {\n                 const openingCurly = sourceCode.getFirstToken(node);\n-                const firstExpressionToken = sourceCode.getFirstToken(node.expression);\n+                const closingCurly = sourceCode.getLastToken(node);\n \n-                if (firstExpressionToken) {\n-                    offsets.setDesiredOffset(firstExpressionToken, openingCurly, 1);\n-                }\n-\n-                offsets.matchIndentOf(openingCurly, sourceCode.getLastToken(node));\n+                offsets.setDesiredOffsets(\n+                    sourceCode.getTokensBetween(openingCurly, closingCurly, { includeComments: true }),\n+                    openingCurly,\n+                    1\n+                );\n+                offsets.matchIndentOf(openingCurly, closingCurly);\n             },\n \n             \"Program:exit\"() {\n",
        "bugId": 115,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "MC-DM",
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-boolean-cast.js": {
                "insert": [
                    8
                ],
                "changes": [
                    94
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-boolean-cast.js b/lib/rules/no-extra-boolean-cast.js\nindex 123a7cacc5..e7368b07b4 100644\n--- a/lib/rules/no-extra-boolean-cast.js\n+++ b/lib/rules/no-extra-boolean-cast.js\n@@ -5,6 +5,12 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+const astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -91,7 +97,14 @@ module.exports = {\n                     context.report({\n                         node,\n                         message: \"Redundant Boolean call.\",\n-                        fix: fixer => fixer.replaceText(node, sourceCode.getText(node.arguments[0]))\n+                        fix: fixer => {\n+                            const argument = node.arguments[0];\n+\n+                            if (astUtils.getPrecedence(argument) < astUtils.getPrecedence(node.parent)) {\n+                                return fixer.replaceText(node, `(${sourceCode.getText(argument)})`);\n+                            }\n+                            return fixer.replaceText(node, sourceCode.getText(argument));\n+                        }\n                     });\n                 }\n             }\n",
        "bugId": 114,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-APCJ",
            "MC-DAP"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "insert": [
                    6
                ],
                "changes": [
                    18,
                    27
                ],
                "deletes": [
                    12
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 2,
            "linesAdd": 2,
            "chunks": 4,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex b8a5dab053..709711b724 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -3,20 +3,26 @@\n  * @author Ilya Volodin\n  */\n \n+\"use strict\";\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n \n module.exports = function(context) {\n \n-    \"use strict\";\n-\n     var allowUnusedGlobals = context.options[0] === \"all\" ? false : true;\n \n     var variables = [];\n \n-    function populateVariables() {\n-        var scope = context.getScope();\n+    function populateVariables(node) {\n+        var scope = context.getScope(),\n+            functionName = node && node.id && node.id.name,\n+            parent = context.getAncestors().pop(),\n+\n+            // check for function foo(){}.bind(this)\n+            functionNameUsed = parent && parent.type === \"MemberExpression\" && parent.property.name === \"bind\";\n+\n         scope.variables.forEach(function(variable) {\n             //filter out global variables that we add as part of eslint or arguments variable\n             if (variable.identifiers.length > 0) {\n@@ -24,7 +30,12 @@ module.exports = function(context) {\n                 if (!variables.some(function(storedVariable) {\n                     return storedVariable.name === variable.name && storedVariable.node === variable.identifiers[0];\n                 })) {\n-                    variables.push({name: variable.name, node: variable.identifiers[0]});\n+\n+                    variables.push({\n+                        name: variable.name,\n+                        node: variable.identifiers[0],\n+                        used: (variable.name === functionName) && functionNameUsed\n+                    });\n                 }\n             }\n         });\n",
        "bugId": 113,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 23
    },
    {
        "changedFiles": {
            "lib/rules/dot-notation.js": {
                "insert": [
                    119
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/dot-notation.js b/lib/rules/dot-notation.js\nindex 55225b8cc4..142f0f24a0 100644\n--- a/lib/rules/dot-notation.js\n+++ b/lib/rules/dot-notation.js\n@@ -116,6 +116,15 @@ module.exports = {\n                                 return null;\n                             }\n \n+                            if (node.object.type === \"Identifier\" && node.object.name === \"let\") {\n+\n+                                /*\n+                                 * A statement that starts with `let[` is parsed as a destructuring variable declaration, not\n+                                 * a MemberExpression.\n+                                 */\n+                                return null;\n+                            }\n+\n                             return fixer.replaceTextRange(\n                                 [dot.range[0], node.property.range[1]],\n                                 `[${textAfterDot}\"${node.property.name}\"]`\n",
        "bugId": 112,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/eol-last.js": {
                "changes": [
                    42
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/eol-last.js b/lib/rules/eol-last.js\nindex 03691c6903..a8fac6ac4f 100644\n--- a/lib/rules/eol-last.js\n+++ b/lib/rules/eol-last.js\n@@ -39,7 +39,7 @@ module.exports = {\n                 const sourceCode = context.getSourceCode(),\n                     src = sourceCode.getText(),\n                     location = {\n-                        column: 1,\n+                        column: lodash.last(sourceCode.lines).length,\n                         line: sourceCode.lines.length\n                     },\n                     LF = \"\\n\",\n",
        "bugId": 111,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/ast-utils.js": {
                "insert": [
                    107
                ]
            },
            "lib/rules/no-warning-comments.js": {
                "insert": [
                    8,
                    19,
                    75
                ]
            },
            "lib/rules/no-inline-comments.js": {
                "insert": [
                    8
                ],
                "changes": [
                    32
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 3,
            "sizeInLines": 27,
            "linesRem": 0,
            "linesAdd": 26,
            "chunks": 6,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex 0f06ee93f2..c410d37e01 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -104,5 +104,22 @@ module.exports = {\n      */\n     isSurroundedBy: function(val, character) {\n         return val[0] === character && val[val.length - 1] === character;\n+    },\n+\n+    /**\n+     * Returns whether the provided node is an ESLint directive comment or not\n+     * @param {LineComment|BlockComment} node The node to be checked\n+     * @returns {boolean} `true` if the node is an ESLint directive comment\n+     */\n+    isDirectiveComment: function(node) {\n+        var comment = node.value.trim();\n+        return (\n+            node.type === \"Line\" && comment.indexOf(\"eslint-\") === 0 ||\n+            node.type === \"Block\" && (\n+                comment.indexOf(\"global \") === 0 ||\n+                comment.indexOf(\"eslint \") === 0 ||\n+                comment.indexOf(\"eslint-\") === 0\n+            )\n+        );\n     }\n };\ndiff --git a/lib/rules/no-inline-comments.js b/lib/rules/no-inline-comments.js\nindex 4574a05ffc..4048802bc8 100644\n--- a/lib/rules/no-inline-comments.js\n+++ b/lib/rules/no-inline-comments.js\n@@ -5,6 +5,8 @@\n  */\n \"use strict\";\n \n+var astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -29,7 +31,7 @@ module.exports = function(context) {\n         var postamble = endLine.slice(node.loc.end.column).trim();\n \n         // Check that this comment isn't an ESLint directive\n-        var isDirective = node.value.trim().indexOf(\"eslint-\") === 0;\n+        var isDirective = astUtils.isDirectiveComment(node);\n \n         // Should be empty if there was only whitespace around the comment\n         if (!isDirective && (preamble || postamble)) {\ndiff --git a/lib/rules/no-warning-comments.js b/lib/rules/no-warning-comments.js\nindex a842c3d7b7..19140c380f 100644\n--- a/lib/rules/no-warning-comments.js\n+++ b/lib/rules/no-warning-comments.js\n@@ -5,6 +5,8 @@\n \n \"use strict\";\n \n+var astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -14,6 +16,7 @@ module.exports = function(context) {\n     var configuration = context.options[0] || {},\n         warningTerms = configuration.terms || [\"todo\", \"fixme\", \"xxx\"],\n         location = configuration.location || \"start\",\n+        selfConfigRegEx = /\\bno-warning-comments\\b/,\n         warningRegExps;\n \n     /**\n@@ -69,6 +72,10 @@ module.exports = function(context) {\n      * @returns {void} undefined.\n      */\n     function checkComment(node) {\n+        if (astUtils.isDirectiveComment(node) && selfConfigRegEx.test(node.value)) {\n+            return;\n+        }\n+\n         var matches = commentContainsWarningTerm(node.value);\n \n         matches.forEach(function(matchedTerm) {\n",
        "bugId": 110,
        "tax": "IncompFI-CP",
        "pan_cat": [
            "MD-ADD"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/object-curly-spacing.js": {
                "insert": [
                    31,
                    115,
                    215
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 20,
            "linesRem": 0,
            "linesAdd": 20,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/object-curly-spacing.js b/lib/rules/object-curly-spacing.js\nindex 3323c99e3f..1f37e1cb83 100644\n--- a/lib/rules/object-curly-spacing.js\n+++ b/lib/rules/object-curly-spacing.js\n@@ -28,6 +28,7 @@ module.exports = function(context) {\n \n     var options = {\n         spaced: spaced,\n+        arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n         objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n     };\n \n@@ -111,6 +112,7 @@ module.exports = function(context) {\n      */\n     function validateBraceSpacing(node, first, second, penultimate, last) {\n         var closingCurlyBraceMustBeSpaced =\n+            options.arraysInObjectsException && penultimate.value === \"]\" ||\n             options.objectsInObjectsException && penultimate.value === \"}\"\n             ? !options.spaced : options.spaced;\n \n@@ -210,3 +212,21 @@ module.exports = function(context) {\n     };\n \n };\n+\n+module.exports.schema = [\n+    {\n+        \"enum\": [\"always\", \"never\"]\n+    },\n+    {\n+        \"type\": \"object\",\n+        \"properties\": {\n+            \"arraysInObjects\": {\n+                \"type\": \"boolean\"\n+            },\n+            \"objectsInObjects\": {\n+                \"type\": \"boolean\"\n+            }\n+        },\n+        \"additionalProperties\": false\n+    }\n+];\n",
        "bugId": 109,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "CF-ADD",
            "AS-CE",
            "https://github.com/BugsJS/eslint/commit/c566801e1ec4d112ebc88d75d1461b23af2b791a"
        ],
        "failingTests": 3
    },
    {
        "changedFiles": {
            "lib/rules/yoda.js": {
                "changes": [
                    242
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/yoda.js b/lib/rules/yoda.js\nindex aeb2652318..e463a476ab 100644\n--- a/lib/rules/yoda.js\n+++ b/lib/rules/yoda.js\n@@ -239,10 +239,10 @@ module.exports = {\n         */\n         function getFlippedString(node) {\n             const operatorToken = sourceCode.getTokensBetween(node.left, node.right).find(token => token.value === node.operator);\n-            const textBeforeOperator = sourceCode.getText().slice(node.left.range[1], operatorToken.range[0]);\n-            const textAfterOperator = sourceCode.getText().slice(operatorToken.range[1], node.right.range[0]);\n-            const leftText = sourceCode.getText(node.left);\n-            const rightText = sourceCode.getText(node.right);\n+            const textBeforeOperator = sourceCode.getText().slice(sourceCode.getTokenBefore(operatorToken).range[1], operatorToken.range[0]);\n+            const textAfterOperator = sourceCode.getText().slice(operatorToken.range[1], sourceCode.getTokenAfter(operatorToken).range[0]);\n+            const leftText = sourceCode.getText().slice(sourceCode.getFirstToken(node).range[0], sourceCode.getTokenBefore(operatorToken).range[1]);\n+            const rightText = sourceCode.getText().slice(sourceCode.getTokenAfter(operatorToken).range[0], sourceCode.getLastToken(node).range[1]);\n \n             return rightText + textBeforeOperator + OPERATOR_FLIP_MAP[operatorToken.value] + textAfterOperator + leftText;\n         }\n",
        "bugId": 108,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP",
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/util/source-code.js": {
                "insert": [
                    241
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/util/source-code.js b/lib/util/source-code.js\nindex c88937fde6..9423dc69c3 100644\n--- a/lib/util/source-code.js\n+++ b/lib/util/source-code.js\n@@ -238,6 +238,8 @@ SourceCode.prototype = {\n                     }\n \n                     return parent && (parent.type !== \"FunctionDeclaration\") ? findJSDocComment(parent.leadingComments, parent.loc.start.line) : null;\n+                } else if (node.leadingComments) {\n+                    return findJSDocComment(node.leadingComments, node.loc.start.line);\n                 }\n \n             // falls through\n",
        "bugId": 107,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-ABR"
        ],
        "failingTests": 6
    },
    {
        "changedFiles": {
            "lib/rules/quotes.js": {
                "insert": [
                    271
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 9,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/quotes.js b/lib/rules/quotes.js\nindex 61e581f0f6..6dd0ed996c 100644\n--- a/lib/rules/quotes.js\n+++ b/lib/rules/quotes.js\n@@ -268,6 +268,15 @@ module.exports = {\n                             description: settings.description,\n                         },\n                         fix(fixer) {\n+                            if (isPartOfDirectivePrologue(node)) {\n+\n+                                /*\n+                                 * TemplateLiterals in a directive prologue aren't actually directives, but if they're\n+                                 * in the directive prologue, then fixing them might turn them into directives and change\n+                                 * the behavior of the code.\n+                                 */\n+                                return null;\n+                            }\n                             return fixer.replaceText(node, settings.convert(sourceCode.getText(node)));\n                         }\n                     });\n",
        "bugId": 106,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/config/config-file.js": {
                "insert": [
                    186,
                    218,
                    362
                ],
                "changes": [
                    363,
                    465,
                    474,
                    478,
                    481
                ],
                "deletes": [
                    363,
                    393
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 97,
            "linesRem": 33,
            "linesAdd": 59,
            "chunks": 10,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/config/config-file.js b/lib/config/config-file.js\nindex 2c4dde64cc..4e886b8af2 100644\n--- a/lib/config/config-file.js\n+++ b/lib/config/config-file.js\n@@ -183,6 +183,22 @@ function loadPackageJSONConfigFile(filePath) {\n     }\n }\n \n+/**\n+ * Creates an error to notify about a missing config to extend from.\n+ * @param {string} configName The name of the missing config.\n+ * @returns {Error} The error object to throw\n+ * @private\n+ */\n+function configMissingError(configName) {\n+    const error = new Error(`Failed to load config \"${configName}\" to extend from.`);\n+\n+    error.messageTemplate = \"extend-config-missing\";\n+    error.messageData = {\n+        configName\n+    };\n+    return error;\n+}\n+\n /**\n  * Loads a configuration file regardless of the source. Inspects the file path\n  * to determine the correctly way to load the config file.\n@@ -199,6 +215,9 @@ function loadConfigFile(file) {\n             config = loadJSConfigFile(filePath);\n             if (file.configName) {\n                 config = config.configs[file.configName];\n+                if (!config) {\n+                    throw configMissingError(file.configFullName);\n+                }\n             }\n             break;\n \n@@ -340,6 +359,33 @@ function getLookupPath(configFilePath) {\n     return path.join(basedir, \"node_modules\");\n }\n \n+/**\n+ * Resolves a eslint core config path\n+ * @param {string} name The eslint config name.\n+ * @returns {string} The resolved path of the config.\n+ * @private\n+ */\n+function getEslintCoreConfigPath(name) {\n+    if (name === \"eslint:recommended\") {\n+\n+       /*\n+        * Add an explicit substitution for eslint:recommended to\n+        * conf/eslint-recommended.js.\n+        */\n+        return path.resolve(__dirname, \"../../conf/eslint-recommended.js\");\n+    }\n+\n+    if (name === \"eslint:all\") {\n+\n+       /*\n+        * Add an explicit substitution for eslint:all to conf/eslint-all.js\n+        */\n+        return path.resolve(__dirname, \"../../conf/eslint-all.js\");\n+    }\n+\n+    throw configMissingError(name);\n+}\n+\n /**\n  * Applies values from the \"extends\" field in a configuration file.\n  * @param {Object} config The configuration information.\n@@ -360,43 +406,23 @@ function applyExtends(config, filePath, relativeTo) {\n \n     // Make the last element in an array take the highest precedence\n     config = configExtends.reduceRight((previousValue, parentPath) => {\n-\n-        if (parentPath === \"eslint:recommended\") {\n-\n-            /*\n-             * Add an explicit substitution for eslint:recommended to\n-             * conf/eslint-recommended.js.\n-             */\n-            parentPath = path.resolve(__dirname, \"../../conf/eslint-recommended.js\");\n-        } else if (parentPath === \"eslint:all\") {\n-\n-            /*\n-             * Add an explicit substitution for eslint:all to conf/eslint-all.js\n-             */\n-            parentPath = path.resolve(__dirname, \"../../conf/eslint-all.js\");\n-        } else if (isFilePath(parentPath)) {\n-\n-            /*\n-             * If the `extends` path is relative, use the directory of the current configuration\n-             * file as the reference point. Otherwise, use as-is.\n-             */\n-            parentPath = (!path.isAbsolute(parentPath)\n-                ? path.join(relativeTo || path.dirname(filePath), parentPath)\n-                : parentPath\n-            );\n-        }\n-\n         try {\n+            if (parentPath.startsWith(\"eslint:\")) {\n+                parentPath = getEslintCoreConfigPath(parentPath);\n+            } else if (isFilePath(parentPath)) {\n+\n+                /*\n+                 * If the `extends` path is relative, use the directory of the current configuration\n+                 * file as the reference point. Otherwise, use as-is.\n+                 */\n+                parentPath = (path.isAbsolute(parentPath)\n+                    ? parentPath\n+                    : path.join(relativeTo || path.dirname(filePath), parentPath)\n+                );\n+            }\n             debug(`Loading ${parentPath}`);\n             return ConfigOps.merge(load(parentPath, false, relativeTo), previousValue);\n         } catch (e) {\n-            if (parentPath.indexOf(\"plugin:\") === 0 || parentPath.indexOf(\"eslint:\") === 0) {\n-                e.message = `Failed to load config \"${parentPath}\" to extend from.`;\n-                e.messageTemplate = \"extend-config-missing\";\n-                e.messageData = {\n-                    configName: parentPath\n-                };\n-            }\n \n             /*\n              * If the file referenced by `extends` failed to load, add the path\n@@ -462,7 +488,10 @@ function normalizePackageName(name, prefix) {\n  * or package name.\n  * @param {string} filePath The filepath to resolve.\n  * @param {string} [relativeTo] The path to resolve relative to.\n- * @returns {Object} A path that can be used directly to load the configuration.\n+ * @returns {Object} An object containing 3 properties:\n+ * - 'filePath' (required) the resolved path that can be used directly to load the configuration.\n+ * - 'configName' the name of the configuration inside the plugin.\n+ * - 'configFullName' the name of the configuration as used in the eslint config (e.g. 'plugin:node/recommended').\n  * @private\n  */\n function resolve(filePath, relativeTo) {\n@@ -471,14 +500,15 @@ function resolve(filePath, relativeTo) {\n     }\n     let normalizedPackageName;\n \n-    if (filePath.indexOf(\"plugin:\") === 0) {\n-        const packagePath = filePath.substr(7, filePath.lastIndexOf(\"/\") - 7);\n+    if (filePath.startsWith(\"plugin:\")) {\n+        const configFullName = filePath;\n+        const pluginName = filePath.substr(7, filePath.lastIndexOf(\"/\") - 7);\n         const configName = filePath.substr(filePath.lastIndexOf(\"/\") + 1, filePath.length - filePath.lastIndexOf(\"/\") - 1);\n \n-        normalizedPackageName = normalizePackageName(packagePath, \"eslint-plugin\");\n+        normalizedPackageName = normalizePackageName(pluginName, \"eslint-plugin\");\n         debug(`Attempting to resolve ${normalizedPackageName}`);\n         filePath = resolver.resolve(normalizedPackageName, getLookupPath(relativeTo));\n-        return { filePath, configName };\n+        return { filePath, configName, configFullName };\n     }\n     normalizedPackageName = normalizePackageName(filePath, \"eslint-config\");\n     debug(`Attempting to resolve ${normalizedPackageName}`);\n",
        "bugId": 105,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MD-ADD",
            "IF-APCJ",
            "Return",
            "MC-DAP",
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "bin/eslint.js": {
                "insert": [
                    50
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/bin/eslint.js b/bin/eslint.js\nindex 7c05ad3b6e..10a7f73dae 100755\n--- a/bin/eslint.js\n+++ b/bin/eslint.js\n@@ -47,6 +47,8 @@ process.once(\"uncaughtException\", err => {\n         console.error(\"\\nOops! Something went wrong! :(\");\n         console.error(`\\n${template(err.messageData || {})}`);\n     } else {\n+\n+        console.error(err.message);\n         console.error(err.stack);\n     }\n \n",
        "bugId": 104,
        "tax": "IncorFI-IncorO",
        "pan_cat": [],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    805,
                    811
                ],
                "changes": [
                    808
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 8872836f4a..27ee2d4089 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -802,10 +802,18 @@ module.exports = {\n                 return;\n             }\n             elements.forEach((element, index) => {\n+                if (!element) {\n+\n+                    // Skip holes in arrays\n+                    return;\n+                }\n                 if (offset === \"off\") {\n+\n                     offsets.ignoreToken(getFirstToken(element));\n                 }\n-                if (index === 0 || !element) {\n+\n+                // Offset the following elements correctly relative to the first element\n+                if (index === 0) {\n                     return;\n                 }\n                 if (offset === \"first\" && tokenInfo.isFirstTokenOfLine(getFirstToken(element))) {\n",
        "bugId": 103,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-APCJ",
            "IF-CC",
            "IF-APCJ"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/config/plugins.js": {
                "insert": [
                    159,
                    162
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 12,
            "linesRem": 0,
            "linesAdd": 12,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/config/plugins.js b/lib/config/plugins.js\nindex 11852df5c9..adfd8a1bbe 100644\n--- a/lib/config/plugins.js\n+++ b/lib/config/plugins.js\n@@ -156,8 +156,20 @@ class Plugins {\n      * @param {string[]} pluginNames An array of plugins names.\n      * @returns {void}\n      * @throws {Error} If a plugin cannot be loaded.\n+     * @throws {Error} If \"plugins\" in config is not an array\n      */\n     loadAll(pluginNames) {\n+\n+        // if \"plugins\" in config is not an array, throw an error so user can fix their config.\n+        if (!Array.isArray(pluginNames)) {\n+            const pluginNotArrayMessage = \"ESLint configuration error: \\\"plugins\\\" value must be an array\";\n+\n+            debug(`${pluginNotArrayMessage}: ${JSON.stringify(pluginNames)}`);\n+\n+            throw new Error(pluginNotArrayMessage);\n+        }\n+\n+        // load each plugin by name\n         pluginNames.forEach(this.load, this);\n     }\n }\n",
        "bugId": 102,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-escape.js": {
                "changes": [
                    25,
                    158,
                    161,
                    218
                ],
                "deletes": [
                    153
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 53,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 5,
            "linesMod": 52
        },
        "diff": "diff --git a/lib/rules/no-useless-escape.js b/lib/rules/no-useless-escape.js\nindex f47f2b73d3..be5fae207a 100644\n--- a/lib/rules/no-useless-escape.js\n+++ b/lib/rules/no-useless-escape.js\n@@ -22,55 +22,10 @@ function union(setA, setB) {\n     }());\n }\n \n-const VALID_STRING_ESCAPES = [\n-    \"\\\\\",\n-    \"n\",\n-    \"r\",\n-    \"v\",\n-    \"t\",\n-    \"b\",\n-    \"f\",\n-    \"u\",\n-    \"x\",\n-    \"\\n\",\n-    \"\\r\"\n-];\n-\n-const REGEX_GENERAL_ESCAPES = new Set([\n-    \"\\\\\",\n-    \"b\",\n-    \"c\",\n-    \"d\",\n-    \"D\",\n-    \"f\",\n-    \"n\",\n-    \"r\",\n-    \"s\",\n-    \"S\",\n-    \"t\",\n-    \"v\",\n-    \"w\",\n-    \"W\",\n-    \"x\",\n-    \"u\"\n-]);\n-const REGEX_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set([\"]\"]));\n-const REGEX_NON_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set([\n-    \"^\",\n-    \"/\",\n-    \".\",\n-    \"$\",\n-    \"*\",\n-    \"+\",\n-    \"?\",\n-    \"[\",\n-    \"{\",\n-    \"}\",\n-    \"|\",\n-    \"(\",\n-    \")\",\n-    \"B\"\n-]));\n+const VALID_STRING_ESCAPES = new Set(\"\\\\nrvtbfux\\n\\r\");\n+const REGEX_GENERAL_ESCAPES = new Set(\"\\\\bcdDfnrsStvwWxu0123456789\");\n+const REGEX_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set(\"]\"));\n+const REGEX_NON_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set(\"^/.$*+?[{}|()B\"));\n \n /**\n * Parses a regular expression into a list of characters with character class info.\n@@ -150,15 +105,14 @@ module.exports = {\n          * Checks if the escape character in given string slice is unnecessary.\n          *\n          * @private\n-         * @param {string[]} escapes - list of valid escapes\n          * @param {ASTNode} node - node to validate.\n          * @param {string} match - string slice to validate.\n          * @returns {void}\n          */\n-        function validateString(escapes, node, match) {\n+        function validateString(node, match) {\n             const isTemplateElement = node.type === \"TemplateElement\";\n             const escapedChar = match[0][1];\n-            let isUnnecessaryEscape = escapes.indexOf(escapedChar) === -1;\n+            let isUnnecessaryEscape = !VALID_STRING_ESCAPES.has(escapedChar);\n             let isQuoteEscape;\n \n             if (isTemplateElement) {\n@@ -215,7 +169,7 @@ module.exports = {\n                 let match;\n \n                 while ((match = pattern.exec(value))) {\n-                    validateString(VALID_STRING_ESCAPES, node, match);\n+                    validateString(node, match);\n                 }\n             } else if (node.regex) {\n                 parseRegExp(node.regex.pattern)\n",
        "bugId": 101,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-CHG",
            "MC-DNP",
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/object-curly-spacing.js": {
                "changes": [
                    174
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/object-curly-spacing.js b/lib/rules/object-curly-spacing.js\nindex 11224bbdd1..e5dfb8d036 100644\n--- a/lib/rules/object-curly-spacing.js\n+++ b/lib/rules/object-curly-spacing.js\n@@ -171,7 +171,7 @@ module.exports = {\n \n                 closingCurlyBraceMustBeSpaced = (\n                     options.arraysInObjectsException && penultimateType === \"ArrayExpression\" ||\n-                    options.objectsInObjectsException && penultimateType === \"ObjectExpression\"\n+                    options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\")\n                 ) ? !options.spaced : options.spaced;\n \n                 lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n",
        "bugId": 100,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/testers/rule-tester.js": {
                "changes": [
                    361,
                    365
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/testers/rule-tester.js b/lib/testers/rule-tester.js\nindex 857e290c99..0053080de2 100644\n--- a/lib/testers/rule-tester.js\n+++ b/lib/testers/rule-tester.js\n@@ -358,12 +358,12 @@ RuleTester.prototype = {\n \n \n             if (typeof item.errors === \"number\") {\n-                assert.equal(messages.length, item.errors, util.format(\"Should have %d errors but had %d: %s\",\n-                    item.errors, messages.length, util.inspect(messages)));\n+                assert.equal(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\",\n+                    item.errors, item.errors === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n             } else {\n                 assert.equal(messages.length, item.errors.length,\n-                    util.format(\"Should have %d errors but had %d: %s\",\n-                    item.errors.length, messages.length, util.inspect(messages)));\n+                    util.format(\"Should have %d error%s but had %d: %s\",\n+                    item.errors.length, item.errors.length === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n \n                 for (var i = 0, l = item.errors.length; i < l; i++) {\n                     assert.ok(!(\"fatal\" in messages[i]), \"A fatal parsing error occurred: \" + messages[i].message);\n",
        "bugId": 99,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 71
    },
    {
        "changedFiles": {
            "lib/rules/no-use-before-define.js": {
                "insert": [
                    13,
                    91,
                    116
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 14,
            "linesRem": 0,
            "linesAdd": 14,
            "chunks": 3,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-use-before-define.js b/lib/rules/no-use-before-define.js\nindex a785bee05b..08c7f9fb12 100644\n--- a/lib/rules/no-use-before-define.js\n+++ b/lib/rules/no-use-before-define.js\n@@ -10,6 +10,7 @@\n //------------------------------------------------------------------------------\n \n var SENTINEL_TYPE = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/;\n+var FOR_IN_OF_TYPE = /^For(?:In|Of)Statement$/;\n \n /**\n  * Parses a given value as options.\n@@ -87,6 +88,14 @@ function isInRange(node, location) {\n /**\n  * Checks whether or not a given reference is inside of the initializers of a given variable.\n  *\n+ * This returns `true` in the following cases:\n+ *\n+ *     var a = a\n+ *     var [a = a] = list\n+ *     var {a = a} = obj\n+ *     for (var a in a) {}\n+ *     for (var a of a) {}\n+ *\n  * @param {Variable} variable - A variable to check.\n  * @param {Reference} reference - A reference to check.\n  * @returns {boolean} `true` if the reference is inside of the initializers.\n@@ -104,6 +113,11 @@ function isInInitializer(variable, reference) {\n             if (isInRange(node.init, location)) {\n                 return true;\n             }\n+            if (FOR_IN_OF_TYPE.test(node.parent.parent.type) &&\n+                isInRange(node.parent.parent.right, location)\n+            ) {\n+                return true;\n+            }\n             break;\n         } else if (node.type === \"AssignmentPattern\") {\n             if (isInRange(node.right, location)) {\n",
        "bugId": 98,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-multiple-empty-lines.js": {
                "insert": [
                    125
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-multiple-empty-lines.js b/lib/rules/no-multiple-empty-lines.js\nindex 39f325d340..d5485df108 100644\n--- a/lib/rules/no-multiple-empty-lines.js\n+++ b/lib/rules/no-multiple-empty-lines.js\n@@ -122,6 +122,8 @@ module.exports = {\n \n                 // Aggregate and count blank lines\n                 if (firstNonBlankLine > maxBOF) {\n+                    currentLocation = firstNonBlankLine - 1;\n+\n                     context.report(node, 0,\n                             \"Too many blank lines at the beginning of file. Max of \" + maxBOF + \" allowed.\");\n                 }\n",
        "bugId": 97,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/comma-dangle.js": {
                "changes": [
                    16,
                    23
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/comma-dangle.js b/lib/rules/comma-dangle.js\nindex 6a737227ba..2c145a1876 100644\n--- a/lib/rules/comma-dangle.js\n+++ b/lib/rules/comma-dangle.js\n@@ -13,14 +13,17 @@ const lodash = require(\"lodash\");\n \n /**\n  * Checks whether or not a trailing comma is allowed in a given node.\n- * `ArrayPattern` which has `RestElement` disallows it.\n+ * `ArrayPattern` which has `RestElement` or `ObjectPattern` which has `RestProperty` disallows it.\n  *\n  * @param {ASTNode} node - A node to check.\n  * @param {ASTNode} lastItem - The node of the last element in the given node.\n  * @returns {boolean} `true` if a trailing comma is allowed.\n  */\n function isTrailingCommaAllowed(node, lastItem) {\n-    return node.type !== \"ArrayPattern\" || lastItem.type !== \"RestElement\";\n+    return !(\n+        (node.type === \"ArrayPattern\" && lastItem.type === \"RestElement\") ||\n+        (node.type === \"ObjectPattern\" && (lastItem.type === \"RestProperty\" || lastItem.type === \"ExperimentalRestProperty\"))\n+    );\n }\n \n //------------------------------------------------------------------------------\n",
        "bugId": 96,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/formatters/stylish.js": {
                "changes": [
                    68
                ]
            },
            "lib/formatters/codeframe.js": {
                "changes": [
                    50
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/formatters/codeframe.js b/lib/formatters/codeframe.js\nindex ed50ae608d..0b97a0d818 100644\n--- a/lib/formatters/codeframe.js\n+++ b/lib/formatters/codeframe.js\n@@ -47,7 +47,7 @@ function formatFilePath(filePath, line, column) {\n  */\n function formatMessage(message, parentResult) {\n     const type = (message.fatal || message.severity === 2) ? chalk.red(\"error\") : chalk.yellow(\"warning\");\n-    const msg = `${chalk.bold(message.message.replace(/\\.$/, \"\"))}`;\n+    const msg = `${chalk.bold(message.message.replace(/([^ ])\\.$/, \"$1\"))}`;\n     const ruleId = message.fatal ? \"\" : chalk.dim(`(${message.ruleId})`);\n     const filePath = formatFilePath(parentResult.filePath, message.line, message.column);\n     const sourceCode = parentResult.output ? parentResult.output : parentResult.source;\ndiff --git a/lib/formatters/stylish.js b/lib/formatters/stylish.js\nindex 023ebc1dc0..e586fe857c 100644\n--- a/lib/formatters/stylish.js\n+++ b/lib/formatters/stylish.js\n@@ -65,7 +65,7 @@ module.exports = function(results) {\n                     message.line || 0,\n                     message.column || 0,\n                     messageType,\n-                    message.message.replace(/\\.$/, \"\"),\n+                    message.message.replace(/([^ ])\\.$/, \"$1\"),\n                     chalk.dim(message.ruleId || \"\")\n                 ];\n             }),\n",
        "bugId": 95,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MC-DAP",
            "AS-CE"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/space-infix-ops.js": {
                "changes": [
                    60
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/space-infix-ops.js b/lib/rules/space-infix-ops.js\nindex 9831e8e2af..d919a1225a 100644\n--- a/lib/rules/space-infix-ops.js\n+++ b/lib/rules/space-infix-ops.js\n@@ -57,7 +57,7 @@ module.exports = {\n                 const op = tokens[i];\n \n                 if (\n-                    op.type === \"Punctuator\" &&\n+                    (op.type === \"Punctuator\" || op.type === \"Keyword\") &&\n                     OPERATORS.indexOf(op.value) >= 0 &&\n                     (tokens[i - 1].range[1] >= op.range[0] || op.range[1] >= tokens[i + 1].range[0])\n                 ) {\n",
        "bugId": 94,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/object-curly-newline.js": {
                "changes": [
                    131
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 11,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/object-curly-newline.js b/lib/rules/object-curly-newline.js\nindex d4a3a85df1..34e267d654 100644\n--- a/lib/rules/object-curly-newline.js\n+++ b/lib/rules/object-curly-newline.js\n@@ -128,8 +128,8 @@ module.exports = {\n             var options = normalizedOptions[node.type];\n             var openBrace = sourceCode.getFirstToken(node);\n             var closeBrace = sourceCode.getLastToken(node);\n-            var first = sourceCode.getTokenAfter(openBrace);\n-            var last = sourceCode.getTokenBefore(closeBrace);\n+            var first = sourceCode.getTokenOrCommentAfter(openBrace);\n+            var last = sourceCode.getTokenOrCommentBefore(closeBrace);\n             var needsLinebreaks = (\n                 node.properties.length >= options.minProperties ||\n                 (\n@@ -139,6 +139,17 @@ module.exports = {\n                 )\n             );\n \n+            /*\n+             * Use tokens or comments to check multiline or not.\n+             * But use only tokens to check whether line breaks are needed.\n+             * This allows:\n+             *     var obj = { // eslint-disable-line foo\n+             *         a: 1\n+             *     }\n+             */\n+            first = sourceCode.getTokenAfter(openBrace);\n+            last = sourceCode.getTokenBefore(closeBrace);\n+\n             if (needsLinebreaks) {\n                 if (astUtils.isTokenOnSameLine(openBrace, first)) {\n                     context.report({\n",
        "bugId": 93,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MC-DM",
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/keyword-spacing.js": {
                "changes": [
                    362,
                    498
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 3,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/keyword-spacing.js b/lib/rules/keyword-spacing.js\nindex b2d42748f7..218cfd02be 100644\n--- a/lib/rules/keyword-spacing.js\n+++ b/lib/rules/keyword-spacing.js\n@@ -359,7 +359,8 @@ module.exports = {\n             const firstToken = node && sourceCode.getFirstToken(node);\n \n             if (firstToken &&\n-                (firstToken.type === \"Keyword\" || firstToken.value === \"async\")\n+                ((firstToken.type === \"Keyword\" && firstToken.value === \"function\") ||\n+                firstToken.value === \"async\")\n             ) {\n                 checkSpacingBefore(firstToken);\n             }\n@@ -495,11 +496,25 @@ module.exports = {\n                     node.value.async\n                 )\n             ) {\n-                const token = sourceCode.getFirstToken(\n-                    node,\n-                    node.static ? 1 : 0\n+                const token = sourceCode.getTokenBefore(\n+                    node.key,\n+                    tok => {\n+                        switch (tok.value) {\n+                            case \"get\":\n+                            case \"set\":\n+                            case \"async\":\n+                                return true;\n+                            default:\n+                                return false;\n+                        }\n+                    }\n                 );\n \n+                if (!token) {\n+                    throw new Error(\"Failed to find token get, set, or async beside method name\");\n+                }\n+\n+\n                 checkSpacingAround(token);\n             }\n         }\n",
        "bugId": 92,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC",
            "IF-APCJ",
            "MC-DM"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "insert": [
                    108
                ],
                "changes": [
                    111
                ],
                "deletes": [
                    116
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 14,
            "linesRem": 12,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex 05940d5932..04c2bc8799 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -105,26 +105,21 @@ module.exports = {\n          * @returns {string} The warning message to be used with this unused variable.\n          */\n         function getDefinedMessage(unusedVar) {\n+            const defType = unusedVar.defs && unusedVar.defs[0] && unusedVar.defs[0].type;\n             let type;\n             let pattern;\n \n-            if (config.varsIgnorePattern) {\n+            if (defType === \"CatchClause\" && config.caughtErrorsIgnorePattern) {\n+                type = \"args\";\n+                pattern = config.caughtErrorsIgnorePattern.toString();\n+            } else if (defType === \"Parameter\" && config.argsIgnorePattern) {\n+                type = \"args\";\n+                pattern = config.argsIgnorePattern.toString();\n+            } else if (defType !== \"Parameter\" && config.varsIgnorePattern) {\n                 type = \"vars\";\n                 pattern = config.varsIgnorePattern.toString();\n             }\n \n-            if (unusedVar.defs && unusedVar.defs[0] && unusedVar.defs[0].type) {\n-                const defType = unusedVar.defs[0].type;\n-\n-                if (defType === \"CatchClause\" && config.caughtErrorsIgnorePattern) {\n-                    type = \"args\";\n-                    pattern = config.caughtErrorsIgnorePattern.toString();\n-                } else if (defType === \"Parameter\" && config.argsIgnorePattern) {\n-                    type = \"args\";\n-                    pattern = config.argsIgnorePattern.toString();\n-                }\n-            }\n-\n             const additional = type ? ` Allowed unused ${type} must match ${pattern}.` : \"\";\n \n             return `'{{name}}' is defined but never used.${additional}`;\n",
        "bugId": 91,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    911
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex eff30d7070..5980cfa2bf 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -908,7 +908,7 @@ module.exports = (function() {\n             case \"ArrowFunctionExpression\":\n             case \"FunctionExpression\":\n \n-                if (parent.type !== \"CallExpression\" || parent.callee !== node) {\n+                if (parent.type !== \"CallExpression\") {\n                     while (parent && !parent.leadingComments && !/Function/.test(parent.type)) {\n                         parent = parent.parent;\n                     }\n",
        "bugId": 90,
        "tax": "IncorFI-IncorIV-UTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 4637
    },
    {
        "changedFiles": {
            "lib/rules/keyword-spacing.js": {
                "changes": [
                    26,
                    485,
                    525,
                    531
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 34,
            "linesRem": 0,
            "linesAdd": 30,
            "chunks": 7,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/keyword-spacing.js b/lib/rules/keyword-spacing.js\nindex 8e4b774b72..4a6a024552 100644\n--- a/lib/rules/keyword-spacing.js\n+++ b/lib/rules/keyword-spacing.js\n@@ -23,7 +23,7 @@ const NEXT_TOKEN_M = /^[\\{*]$/;\n const TEMPLATE_OPEN_PAREN = /\\$\\{$/;\n const TEMPLATE_CLOSE_PAREN = /^\\}/;\n const CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template)$/;\n-const KEYS = keywords.concat([\"as\", \"await\", \"from\", \"get\", \"let\", \"of\", \"set\", \"yield\"]);\n+const KEYS = keywords.concat([\"as\", \"async\", \"await\", \"from\", \"get\", \"let\", \"of\", \"set\", \"yield\"]);\n \n // check duplications.\n (function() {\n@@ -352,6 +352,23 @@ module.exports = {\n             }\n         }\n \n+        /**\n+         * Reports `async` or `function` keywords of a given node if usage of\n+         * spacing around those keywords is invalid.\n+         *\n+         * @param {ASTNode} node - A node to report.\n+         * @returns {void}\n+         */\n+        function checkSpacingForFunction(node) {\n+            const firstToken = node && sourceCode.getFirstToken(node);\n+\n+            if (firstToken &&\n+                (firstToken.type === \"Keyword\" || firstToken.value === \"async\")\n+            ) {\n+                checkSpacingBefore(firstToken);\n+            }\n+        }\n+\n         /**\n          * Reports `class` and `extends` keywords of a given node if usage of\n          * spacing around those keywords is invalid.\n@@ -482,7 +499,13 @@ module.exports = {\n             if (node.static) {\n                 checkSpacingAroundFirstToken(node);\n             }\n-            if (node.kind === \"get\" || node.kind === \"set\") {\n+            if (node.kind === \"get\" ||\n+                node.kind === \"set\" ||\n+                (\n+                    (node.method || node.type === \"MethodDefinition\") &&\n+                    node.value.async\n+                )\n+            ) {\n                 const token = sourceCode.getFirstToken(\n                     node,\n                     node.static ? 1 : 0\n@@ -492,6 +515,17 @@ module.exports = {\n             }\n         }\n \n+        /**\n+         * Reports `await` keyword of a given node if usage of spacing before\n+         * this keyword is invalid.\n+         *\n+         * @param {ASTNode} node - A node to report.\n+         * @returns {void}\n+         */\n+        function checkSpacingForAwaitExpression(node) {\n+            checkSpacingBefore(sourceCode.getFirstToken(node));\n+        }\n+\n         return {\n \n             // Statements\n@@ -522,13 +556,15 @@ module.exports = {\n             ExportNamedDeclaration: checkSpacingForModuleDeclaration,\n             ExportDefaultDeclaration: checkSpacingAroundFirstToken,\n             ExportAllDeclaration: checkSpacingForModuleDeclaration,\n-            FunctionDeclaration: checkSpacingBeforeFirstToken,\n+            FunctionDeclaration: checkSpacingForFunction,\n             ImportDeclaration: checkSpacingForModuleDeclaration,\n             VariableDeclaration: checkSpacingAroundFirstToken,\n \n             // Expressions\n+            ArrowFunctionExpression: checkSpacingForFunction,\n+            AwaitExpression: checkSpacingForAwaitExpression,\n             ClassExpression: checkSpacingForClass,\n-            FunctionExpression: checkSpacingBeforeFirstToken,\n+            FunctionExpression: checkSpacingForFunction,\n             NewExpression: checkSpacingBeforeFirstToken,\n             Super: checkSpacingBeforeFirstToken,\n             ThisExpression: checkSpacingBeforeFirstToken,\n",
        "bugId": 89,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MC-DAP",
            "MD-ADD",
            "MD-ADD",
            "MD-CHG",
            "MD-CHG",
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/prefer-arrow-callback.js": {
                "insert": [
                    278
                ],
                "changes": [
                    283,
                    287
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/prefer-arrow-callback.js b/lib/rules/prefer-arrow-callback.js\nindex dd2505cb53..80ae2d4a69 100644\n--- a/lib/rules/prefer-arrow-callback.js\n+++ b/lib/rules/prefer-arrow-callback.js\n@@ -275,16 +275,17 @@ module.exports = {\n \n                             const paramsLeftParen = node.params.length ? sourceCode.getTokenBefore(node.params[0]) : sourceCode.getTokenBefore(node.body, 1);\n                             const paramsRightParen = sourceCode.getTokenBefore(node.body);\n+                            const asyncKeyword = node.async ? \"async \" : \"\";\n                             const paramsFullText = sourceCode.text.slice(paramsLeftParen.range[0], paramsRightParen.range[1]);\n \n                             if (callbackInfo.isLexicalThis) {\n \n                                 // If the callback function has `.bind(this)`, replace it with an arrow function and remove the binding.\n-                                return fixer.replaceText(node.parent.parent, paramsFullText + \" => \" + sourceCode.getText(node.body));\n+                                return fixer.replaceText(node.parent.parent, asyncKeyword + paramsFullText + \" => \" + sourceCode.getText(node.body));\n                             }\n \n                             // Otherwise, only replace the `function` keyword and parameters with the arrow function parameters.\n-                            return fixer.replaceTextRange([node.start, node.body.start], paramsFullText + \" => \");\n+                            return fixer.replaceTextRange([node.start, node.body.start], asyncKeyword + paramsFullText + \" => \");\n                         }\n                     });\n                 }\n",
        "bugId": 88,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/config/config-file.js": {
                "changes": [
                    517,
                    531
                ],
                "deletes": [
                    498
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/config/config-file.js b/lib/config/config-file.js\nindex e68591874c..4e25887fd4 100644\n--- a/lib/config/config-file.js\n+++ b/lib/config/config-file.js\n@@ -495,7 +495,6 @@ function resolve(filePath, relativeTo) {\n function load(filePath, applyEnvironments, relativeTo) {\n     var resolvedPath = resolve(filePath, relativeTo),\n         dirname = path.dirname(resolvedPath.filePath),\n-        basedir = getBaseDir(dirname),\n         lookupPath = getLookupPath(dirname),\n         config = loadConfigFile(resolvedPath);\n \n@@ -514,7 +513,7 @@ function load(filePath, applyEnvironments, relativeTo) {\n         // include full path of parser if present\n         if (config.parser) {\n             if (isFilePath(config.parser)) {\n-                config.parser = path.resolve(basedir || \"\", config.parser);\n+                config.parser = path.resolve(dirname || \"\", config.parser);\n             } else {\n                 config.parser = resolver.resolve(config.parser, lookupPath);\n             }\n@@ -528,7 +527,7 @@ function load(filePath, applyEnvironments, relativeTo) {\n          * a \"parent\". Load the referenced file and merge the configuration recursively.\n          */\n         if (config.extends) {\n-            config = applyExtends(config, filePath, basedir);\n+            config = applyExtends(config, filePath, dirname);\n         }\n \n         if (config.env && applyEnvironments) {\n",
        "bugId": 87,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/func-call-spacing.js": {
                "changes": [
                    123
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/func-call-spacing.js b/lib/rules/func-call-spacing.js\nindex 417f2bdf31..5c416f0373 100644\n--- a/lib/rules/func-call-spacing.js\n+++ b/lib/rules/func-call-spacing.js\n@@ -120,7 +120,14 @@ module.exports = {\n                     loc: lastCalleeToken.loc.start,\n                     message: \"Unexpected space between function name and paren.\",\n                     fix(fixer) {\n-                        return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\n+\n+                        // Only autofix if there is no newline\n+                        // https://github.com/eslint/eslint/issues/7787\n+                        if (!hasNewline) {\n+                            return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\n+                        }\n+\n+                        return null;\n                     }\n                 });\n             } else if (!never && !hasWhitespace) {\n",
        "bugId": 86,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/ast-utils.js": {
                "changes": [
                    293
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/ast-utils.js b/lib/ast-utils.js\nindex 38f6cc9617..4f23e5ff68 100644\n--- a/lib/ast-utils.js\n+++ b/lib/ast-utils.js\n@@ -290,8 +290,23 @@ const lineIndexCache = new WeakMap();\n function getLineIndices(sourceCode) {\n \n     if (!lineIndexCache.has(sourceCode)) {\n-        const lineIndices = (sourceCode.text.match(/[^\\r\\n\\u2028\\u2029]*(\\r\\n|\\r|\\n|\\u2028|\\u2029)/g) || [])\n-            .reduce((indices, line) => indices.concat(indices[indices.length - 1] + line.length), [0]);\n+        const lineIndices = [0];\n+        const lineEndingPattern = /\\r\\n|[\\r\\n\\u2028\\u2029]/g;\n+        let match;\n+\n+        /*\n+         * Previously, this function was implemented using a regex that\n+         * matched a sequence of non-linebreak characters followed by a\n+         * linebreak, then adding the lengths of the matches. However,\n+         * this caused a catastrophic backtracking issue when the end\n+         * of a file contained a large number of non-newline characters.\n+         * To avoid this, the current implementation just matches newlines\n+         * and uses match.index to get the correct line start indices.\n+         */\n+\n+        while ((match = lineEndingPattern.exec(sourceCode.text))) {\n+            lineIndices.push(match.index + match[0].length);\n+        }\n \n         // Store the sourceCode object in a WeakMap to avoid iterating over all of the lines every time a sourceCode object is passed in.\n         lineIndexCache.set(sourceCode, lineIndices);\n",
        "bugId": 85,
        "tax": "IncorFI-P",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/space-before-keywords.js": {
                "changes": [
                    75,
                    158,
                    172,
                    182,
                    195,
                    198
                ],
                "deletes": [
                    182
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 26,
            "linesRem": 11,
            "linesAdd": 10,
            "chunks": 7,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/space-before-keywords.js b/lib/rules/space-before-keywords.js\nindex 4322cbb34f..73be7a07da 100644\n--- a/lib/rules/space-before-keywords.js\n+++ b/lib/rules/space-before-keywords.js\n@@ -72,7 +72,7 @@ module.exports = function(context) {\n         }\n \n         options = options || {};\n-        options.allowedPrecedingChars = options.allowedPrecedingChars || [];\n+        options.allowedPrecedingChars = options.allowedPrecedingChars || [ \"{\" ];\n         options.requireSpace = typeof options.requireSpace === \"undefined\" ? SPACE_REQUIRED : options.requireSpace;\n \n         var hasSpace = sourceCode.isSpaceBetweenTokens(left, right);\n@@ -155,7 +155,7 @@ module.exports = function(context) {\n                 check(caseNode);\n             });\n         },\n-        ThrowStatement: check,\n+        \"ThrowStatement\": check,\n         \"TryStatement\": function(node) {\n             // try\n             check(node);\n@@ -169,7 +169,7 @@ module.exports = function(context) {\n         },\n         \"WithStatement\": check,\n         \"VariableDeclaration\": function(node) {\n-            check(node, { allowedPrecedingChars: [ \"(\" ] });\n+            check(node, { allowedPrecedingChars: [ \"(\", \"{\" ] });\n         },\n         \"ReturnStatement\": check,\n         \"BreakStatement\": check,\n@@ -179,23 +179,22 @@ module.exports = function(context) {\n         \"FunctionExpression\": function(node) {\n \n             var left = context.getTokenBefore(node);\n-\n-            // Check to see if the function expression is a class method\n-            if (node.parent && node.parent.type === \"MethodDefinition\") {\n-                return;\n-            }\n-\n-            // Check to see if the function expression is an object literal shorthand method\n-            if (node.parent && node.parent.method && node.parent.type === \"Property\") {\n-                return;\n-            }\n-\n             var right = context.getFirstToken(node);\n+            var isClassMethod = node.parent && node.parent.type === \"MethodDefinition\";\n+            var isObjectShorthandMethod = node.parent && node.parent.method && node.parent.type === \"Property\";\n+\n+            // If the function expression is a class method or an object literal shorthand method\n+            // the first token (`right`) will match the function parentheses while `left` will match\n+            // the function identifier. Thus, we want to grab the tokens that are one more to the left.\n+            if (isClassMethod || isObjectShorthandMethod) {\n+                right = left;\n+                left = context.getTokenBefore(left);\n+            }\n \n-            checkTokens(node, left, right, { allowedPrecedingChars: [ \"(\" ] });\n+            checkTokens(node, left, right, { allowedPrecedingChars: [ \"(\", \"{\" ] });\n         },\n         \"YieldExpression\": function(node) {\n-            check(node, { allowedPrecedingChars: [ \"(\" ] });\n+            check(node, { allowedPrecedingChars: [ \"(\", \"{\" ] });\n         },\n         \"ForOfStatement\": check,\n         \"ClassBody\": function(node) {\n",
        "bugId": 84,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE",
            "CF-CHG",
            "CF-CHG",
            "CF-CHG",
            "IF-APC"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/operator-assignment.js": {
                "changes": [
                    138
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/operator-assignment.js b/lib/rules/operator-assignment.js\nindex a6bbb177a7..43f21abc87 100644\n--- a/lib/rules/operator-assignment.js\n+++ b/lib/rules/operator-assignment.js\n@@ -135,7 +135,7 @@ module.exports = {\n                                 const equalsToken = getOperatorToken(node);\n                                 const operatorToken = getOperatorToken(expr);\n                                 const leftText = sourceCode.getText().slice(node.range[0], equalsToken.range[0]);\n-                                const rightText = sourceCode.getText().slice(operatorToken.range[1], node.range[1]);\n+                                const rightText = sourceCode.getText().slice(operatorToken.range[1], expr.right.range[1]);\n \n                                 return fixer.replaceText(node, `${leftText}${expr.operator}=${rightText}`);\n                             }\n",
        "bugId": 83,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "insert": [
                    348
                ],
                "changes": [
                    484
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex 42c2bda996..42a86484b1 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -345,6 +345,11 @@ module.exports = {\n         function report(node) {\n             const leftParenToken = sourceCode.getTokenBefore(node);\n             const rightParenToken = sourceCode.getTokenAfter(node);\n+            const tokenBeforeLeftParen = sourceCode.getTokenBefore(leftParenToken);\n+\n+            if (tokenBeforeLeftParen && astUtils.isArrowToken(tokenBeforeLeftParen) && astUtils.isOpeningBraceToken(sourceCode.getFirstToken(node))) {\n+                return;\n+            }\n \n             context.report({\n                 node,\n@@ -481,7 +486,7 @@ module.exports = {\n                 }\n \n                 if (node.body.type !== \"BlockStatement\") {\n-                    if (sourceCode.getFirstToken(node.body).value !== \"{\" && hasExcessParens(node.body) && precedence(node.body) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {\n+                    if (hasExcessParens(node.body) && precedence(node.body) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {\n                         report(node.body);\n                         return;\n                     }\n",
        "bugId": 82,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "SQ-AMO",
            "IF-APCJ",
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/quotes.js": {
                "changes": [
                    84,
                    119
                ],
                "deletes": [
                    84
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 35,
            "linesRem": 4,
            "linesAdd": 30,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/quotes.js b/lib/rules/quotes.js\nindex 41b275e27d..aa8b02eafe 100644\n--- a/lib/rules/quotes.js\n+++ b/lib/rules/quotes.js\n@@ -81,10 +81,6 @@ module.exports = function(context) {\n      * @private\n      */\n     function isPartOfDirectivePrologue(node) {\n-        if (!isDirective(node.parent)) {\n-            return false;\n-        }\n-\n         var block = node.parent.parent;\n         if (block.type !== \"Program\" && (block.type !== \"BlockStatement\" || !FUNCTION_TYPE.test(block.parent.type))) {\n             return false;\n@@ -105,6 +101,36 @@ module.exports = function(context) {\n         return false;\n     }\n \n+    /**\n+     * Checks whether or not a given node is allowed as non backtick.\n+     * @param {ASTNode} node - A node to check.\n+     * @returns {boolean} Whether or not the node is allowed as non backtick.\n+     * @private\n+     */\n+    function isAllowedAsNonBacktick(node) {\n+        var parent = node.parent;\n+\n+        switch (parent.type) {\n+            // Directive Prologues.\n+            case \"ExpressionStatement\":\n+                return isPartOfDirectivePrologue(node);\n+\n+            // LiteralPropertyName.\n+            case \"Property\":\n+                return parent.key === node && !parent.computed;\n+\n+            // ModuleSpecifier.\n+            case \"ImportDeclaration\":\n+            case \"ExportNamedDeclaration\":\n+            case \"ExportAllDeclaration\":\n+                return parent.source === node;\n+\n+            // Others don't allow.\n+            default:\n+                return false;\n+        }\n+    }\n+\n     return {\n \n         \"Literal\": function(node) {\n@@ -116,7 +142,7 @@ module.exports = function(context) {\n                 isValid;\n \n             if (settings && typeof val === \"string\") {\n-                isValid = (quoteOption === \"backtick\" && isPartOfDirectivePrologue(node)) || isJSXElement(node.parent) || isSurroundedBy(rawVal, settings.quote);\n+                isValid = (quoteOption === \"backtick\" && isAllowedAsNonBacktick(node)) || isJSXElement(node.parent) || isSurroundedBy(rawVal, settings.quote);\n \n                 if (!isValid && avoidEscape) {\n                     isValid = isSurroundedBy(rawVal, settings.alternateQuote) && rawVal.indexOf(settings.quote) >= 0;\n",
        "bugId": 81,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MD-ADD",
            "AS-CE"
        ],
        "failingTests": 14
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "changes": [
                    980
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex efe1678dbc..14362b2c20 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -977,7 +977,7 @@ module.exports = (function() {\n         }\n \n         if (opts) {\n-            message = message.replace(/\\{\\{\\s*(.+?)\\s*\\}\\}/g, function(fullMatch, term) {\n+            message = message.replace(/\\{\\{\\s*([^{}]+?)\\s*\\}\\}/g, function(fullMatch, term) {\n                 if (term in opts) {\n                     return opts[term];\n                 }\n",
        "bugId": 80,
        "tax": "IncorFI-IncorHRE",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-invalid-regexp.js": {
                "changes": [
                    101,
                    103,
                    112
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 9
        },
        "diff": "diff --git a/lib/rules/no-invalid-regexp.js b/lib/rules/no-invalid-regexp.js\nindex e57029c9f8..7169e0ca77 100644\n--- a/lib/rules/no-invalid-regexp.js\n+++ b/lib/rules/no-invalid-regexp.js\n@@ -98,20 +98,17 @@ module.exports = {\n                     return;\n                 }\n                 const pattern = node.arguments[0].value;\n-                let flags = \"\";\n+                let flags = isString(node.arguments[1]) ? node.arguments[1].value : \"\";\n \n-                if (node.arguments[1]) {\n-                    flags = isString(node.arguments[1]) ? node.arguments[1].value : null;\n-                    if (allowedFlags) {\n-                        flags = flags.replace(allowedFlags, \"\");\n-                    }\n+                if (allowedFlags) {\n+                    flags = flags.replace(allowedFlags, \"\");\n                 }\n \n                 // If flags are unknown, check both are errored or not.\n                 const message = validateRegExpFlags(flags) || (\n-                    (flags === null)\n-                        ? validateRegExpPattern(pattern, true) && validateRegExpPattern(pattern, false)\n-                        : validateRegExpPattern(pattern, flags.indexOf(\"u\") !== -1)\n+                    flags\n+                        ? validateRegExpPattern(pattern, flags.indexOf(\"u\") !== -1)\n+                        : validateRegExpPattern(pattern, true) && validateRegExpPattern(pattern, false)\n                 );\n \n                 if (message) {\n",
        "bugId": 79,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE",
            "IF-CC",
            "AS-CE",
            "MC-DAP",
            "IF-APTC",
            "AS-CE",
            "MC-DAP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    1192
                ],
                "changes": [
                    1194
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 7d43a1f01a..a238c4ac62 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1189,9 +1189,11 @@ module.exports = {\n             VariableDeclarator(node) {\n                 if (node.init) {\n                     const equalOperator = sourceCode.getTokenBefore(node.init, astUtils.isNotOpeningParenToken);\n+                    const tokenAfterOperator = sourceCode.getTokenAfter(equalOperator);\n \n                     offsets.ignoreToken(equalOperator);\n-                    offsets.ignoreToken(sourceCode.getFirstToken(node.init));\n+                    offsets.ignoreToken(tokenAfterOperator);\n+                    offsets.matchIndentOf(equalOperator, tokenAfterOperator);\n                 }\n             },\n \n",
        "bugId": 78,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DAP",
            "SQ-AMO"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/prefer-destructuring.js": {
                "changes": [
                    161
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/prefer-destructuring.js b/lib/rules/prefer-destructuring.js\nindex c3fbcaa631..38e8e2903a 100644\n--- a/lib/rules/prefer-destructuring.js\n+++ b/lib/rules/prefer-destructuring.js\n@@ -158,7 +158,9 @@ module.exports = {\n          * @returns {void}\n          */\n         function checkAssigmentExpression(node) {\n-            performCheck(node.left, node.right, node);\n+            if (node.operator === \"=\") {\n+                performCheck(node.left, node.right, node);\n+            }\n         }\n \n         //--------------------------------------------------------------------------\n",
        "bugId": 77,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/spaced-comment.js": {
                "changes": [
                    345,
                    357
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/spaced-comment.js b/lib/rules/spaced-comment.js\nindex 9b3670d32d..3548da6b82 100644\n--- a/lib/rules/spaced-comment.js\n+++ b/lib/rules/spaced-comment.js\n@@ -342,7 +342,7 @@ module.exports = {\n                     }\n                 }\n \n-                if (balanced && !endMatch) {\n+                if (balanced && type === \"block\" && !endMatch) {\n                     reportEnd(node, \"Expected space or tab before '*/' in comment\");\n                 }\n             } else {\n@@ -354,7 +354,7 @@ module.exports = {\n                     }\n                 }\n \n-                if (endMatch && balanced) {\n+                if (balanced && type === \"block\" && endMatch) {\n                     reportEnd(node, \"Unexpected space or tab before '*/' in comment\", endMatch);\n                 }\n             }\n",
        "bugId": 76,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    407,
                    417
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/linter.js b/lib/linter.js\nindex 7b3117d926..0b9c6e0d86 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -404,7 +404,7 @@ function modifyConfigsFromComments(filename, ast, config, linterContext) {\n  * Check if message of rule with ruleId should be ignored in location\n  * @param  {Object[]} reportingConfig  Collection of ignore records\n  * @param  {string} ruleId   Id of rule\n- * @param  {Object} location Location of message\n+ * @param  {Object} location 1-indexed location of message\n  * @returns {boolean}          True if message should be ignored, false otherwise\n  */\n function isDisabledByReportingConfig(reportingConfig, ruleId, location) {\n@@ -414,8 +414,8 @@ function isDisabledByReportingConfig(reportingConfig, ruleId, location) {\n         const ignore = reportingConfig[i];\n \n         if ((!ignore.rule || ignore.rule === ruleId) &&\n-            (location.line > ignore.start.line || (location.line === ignore.start.line && location.column >= ignore.start.column)) &&\n-            (!ignore.end || (location.line < ignore.end.line || (location.line === ignore.end.line && location.column <= ignore.end.column)))) {\n+            (location.line > ignore.start.line || (location.line === ignore.start.line && location.column > ignore.start.column)) &&\n+            (!ignore.end || (location.line < ignore.end.line || (location.line === ignore.end.line && location.column - 1 <= ignore.end.column)))) {\n             return true;\n         }\n     }\n",
        "bugId": 75,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/util/npm-util.js": {
                "insert": [
                    127
                ],
                "changes": [
                    134
                ]
            },
            "lib/config/config-initializer.js": {
                "changes": [
                    321,
                    345
                ],
                "deletes": [
                    49
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 19,
            "linesRem": 1,
            "linesAdd": 15,
            "chunks": 6,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/config/config-initializer.js b/lib/config/config-initializer.js\nindex 3d0e78fefe..91d2454a8a 100644\n--- a/lib/config/config-initializer.js\n+++ b/lib/config/config-initializer.js\n@@ -46,7 +46,6 @@ function writeFile(config, format) {\n         extname = \".json\";\n     }\n \n-\n     ConfigFile.write(config, \"./.eslintrc\" + extname);\n     log.info(\"Successfully created .eslintrc\" + extname + \" file in \" + process.cwd());\n \n@@ -318,7 +317,8 @@ function promptUser(callback) {\n             message: \"Which style guide do you want to follow?\",\n             choices: [{name: \"Google\", value: \"google\"}, {name: \"AirBnB\", value: \"airbnb\"}, {name: \"Standard\", value: \"standard\"}],\n             when: function(answers) {\n-                return answers.source === \"guide\";\n+                answers.packageJsonExists = npmUtil.checkPackageJson();\n+                return answers.source === \"guide\" && answers.packageJsonExists;\n             }\n         },\n         {\n@@ -342,13 +342,18 @@ function promptUser(callback) {\n             default: \"JavaScript\",\n             choices: [\"JavaScript\", \"YAML\", \"JSON\"],\n             when: function(answers) {\n-                return (answers.source === \"guide\" || answers.source === \"auto\");\n+                return ((answers.source === \"guide\" && answers.packageJsonExists) || answers.source === \"auto\");\n             }\n         }\n     ], function(earlyAnswers) {\n \n         // early exit if you are using a style guide\n         if (earlyAnswers.source === \"guide\") {\n+            if (!earlyAnswers.packageJsonExists) {\n+                log.info(\"A package.json is necessary to install plugins such as style guides. Run `npm init` to create a package.json file and try again.\");\n+                return;\n+            }\n+\n             try {\n                 config = getConfigForStyleGuide(earlyAnswers.styleguide);\n                 writeFile(config, earlyAnswers.format);\ndiff --git a/lib/util/npm-util.js b/lib/util/npm-util.js\nindex 27120ad817..9f28dc2b7e 100644\n--- a/lib/util/npm-util.js\n+++ b/lib/util/npm-util.js\n@@ -124,6 +124,16 @@ function checkDevDeps(packages) {\n     return check(packages, {devDependencies: true});\n }\n \n+/**\n+ * Check whether package.json is found in current path.\n+ *\n+ * @param   {string=} startDir Starting directory\n+ * @returns {boolean} Whether a package.json is found in current path.\n+ */\n+function checkPackageJson(startDir) {\n+    return !!findPackageJson(startDir);\n+}\n+\n //------------------------------------------------------------------------------\n // Public Interface\n //------------------------------------------------------------------------------\n@@ -131,5 +141,6 @@ function checkDevDeps(packages) {\n module.exports = {\n     installSyncSaveDev: installSyncSaveDev,\n     checkDeps: checkDeps,\n-    checkDevDeps: checkDevDeps\n+    checkDevDeps: checkDevDeps,\n+    checkPackageJson: checkPackageJson\n };\n",
        "bugId": 74,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "F-APCJ",
            "MD-ADD",
            "MD-ADD"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    271
                ],
                "changes": [
                    281
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 18,
            "linesRem": 0,
            "linesAdd": 10,
            "chunks": 2,
            "linesMod": 8
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 9b8a60aebe..f2acda4496 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -268,6 +268,16 @@ module.exports = {\n             ) {\n                 report(node, indent, nodeIndent);\n             }\n+\n+            if (node.type === \"IfStatement\" && node.alternate) {\n+                const elseToken = sourceCode.getTokenBefore(node.alternate);\n+\n+                checkNodeIndent(elseToken, indent, excludeCommas);\n+\n+                if (!isNodeFirstInLine(node.alternate)) {\n+                    checkNodeIndent(node.alternate, indent, excludeCommas);\n+                }\n+            }\n         }\n \n         /**\n@@ -278,14 +288,7 @@ module.exports = {\n          * @returns {void}\n          */\n         function checkNodesIndent(nodes, indent, excludeCommas) {\n-            nodes.forEach(function(node) {\n-                if (node.type === \"IfStatement\" && node.alternate) {\n-                    const elseToken = sourceCode.getTokenBefore(node.alternate);\n-\n-                    checkNodeIndent(elseToken, indent, excludeCommas);\n-                }\n-                checkNodeIndent(node, indent, excludeCommas);\n-            });\n+            nodes.forEach(node => checkNodeIndent(node, indent, excludeCommas));\n         }\n \n         /**\n",
        "bugId": 73,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/comma-dangle.js": {
                "changes": [
                    158
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/comma-dangle.js b/lib/rules/comma-dangle.js\nindex 621bc2f63e..6a737227ba 100644\n--- a/lib/rules/comma-dangle.js\n+++ b/lib/rules/comma-dangle.js\n@@ -155,7 +155,7 @@ module.exports = {\n             if (trailingToken.value !== \",\") {\n                 context.report({\n                     node: lastItem,\n-                    loc: lastItem.loc.end,\n+                    loc: penultimateToken.loc.end,\n                     message: MISSING_MESSAGE,\n                     fix(fixer) {\n                         return fixer.insertTextAfter(penultimateToken, \",\");\n",
        "bugId": 72,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/semi-style.js": {
                "changes": [
                    82
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/semi-style.js b/lib/rules/semi-style.js\nindex fa258754dc..97fcc3ac82 100644\n--- a/lib/rules/semi-style.js\n+++ b/lib/rules/semi-style.js\n@@ -79,7 +79,7 @@ module.exports = {\n                             : \"the beginning of the next line\"\n                     },\n                     fix(fixer) {\n-                        if (commentsExistBetween(prevToken, nextToken)) {\n+                        if (prevToken && nextToken && commentsExistBetween(prevToken, nextToken)) {\n                             return null;\n                         }\n \n",
        "bugId": 71,
        "tax": "IncompFI-MIV-MNC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/padded-blocks.js": {
                "changes": [
                    193,
                    207
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/padded-blocks.js b/lib/rules/padded-blocks.js\nindex 7c378d9202..7ec24c65d7 100644\n--- a/lib/rules/padded-blocks.js\n+++ b/lib/rules/padded-blocks.js\n@@ -190,7 +190,7 @@ module.exports = {\n                         node: node,\n                         loc: { line: openBrace.loc.start.line, column: openBrace.loc.start.column },\n                         fix: function(fixer) {\n-                            return fixer.replaceTextRange([openBrace.end, nextToken.start], \"\\n\");\n+                            return fixer.replaceTextRange([openBrace.end, nextToken.start - nextToken.loc.start.column], \"\\n\");\n                         },\n                         message: NEVER_MESSAGE\n                     });\n@@ -204,7 +204,7 @@ module.exports = {\n                         loc: {line: closeBrace.loc.end.line, column: closeBrace.loc.end.column - 1 },\n                         message: NEVER_MESSAGE,\n                         fix: function(fixer) {\n-                            return fixer.replaceTextRange([previousToken.end, closeBrace.start], \"\\n\");\n+                            return fixer.replaceTextRange([previousToken.end, closeBrace.start - closeBrace.loc.start.column], \"\\n\");\n                         }\n                     });\n                 }\n",
        "bugId": 70,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-multi-spaces.js": {
                "changes": [
                    146
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-multi-spaces.js b/lib/rules/no-multi-spaces.js\nindex f39b578beb..30d650c3a0 100644\n--- a/lib/rules/no-multi-spaces.js\n+++ b/lib/rules/no-multi-spaces.js\n@@ -143,8 +143,7 @@ module.exports = {\n \n                 const source = sourceCode.getText(),\n                     allComments = sourceCode.getAllComments(),\n-                    JOINED_LINEBEAKS = Array.from(astUtils.LINEBREAKS).join(\"\"),\n-                    pattern = new RegExp(String.raw`[^ \\t${JOINED_LINEBEAKS}].? {2,}`, \"g\"); // note: repeating space\n+                    pattern = /[^\\s].*? {2,}/g;\n                 let parent;\n \n                 while (pattern.test(source)) {\n",
        "bugId": 69,
        "tax": "IncorFI-IncorHRE",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/spaced-comment.js": {
                "insert": [
                    21,
                    53,
                    75
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 17,
            "linesRem": 0,
            "linesAdd": 17,
            "chunks": 3,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/spaced-comment.js b/lib/rules/spaced-comment.js\nindex 1a8dd77cdd..a57cd8699d 100644\n--- a/lib/rules/spaced-comment.js\n+++ b/lib/rules/spaced-comment.js\n@@ -18,6 +18,7 @@ module.exports = function(context) {\n     // Default to match anything, so all will fail if there are no exceptions\n     var exceptionMatcher = new RegExp(\" \");\n     var markerMatcher = new RegExp(\" \");\n+    var jsDocMatcher = new RegExp(\"((^(\\\\*)))[ \\\\n]\");\n \n     // Fetch the options dict\n     var hasOptions = context.options.length === 2;\n@@ -49,6 +50,17 @@ module.exports = function(context) {\n         markerMatcher = new RegExp(\"((^(\" + markers.join(\"))|(^(\") + \")))[ \\\\t\\\\n]\");\n     }\n \n+    /**\n+     * Check to see if the block comment is jsDoc comment\n+     * @param {ASTNode} node comment node\n+     * @returns {boolean} True if its jsdoc comment\n+     * @private\n+     */\n+    function isJsdoc(node) {\n+        // make sure comment type is block and it start with /**\\n\n+        return node.type === \"Block\" && jsDocMatcher.test(node.value);\n+    }\n+\n \n     function checkCommentForSpace(node) {\n         var commentIdentifier = node.type === \"Block\" ? \"/*\" : \"//\";\n@@ -60,6 +72,11 @@ module.exports = function(context) {\n                 return;\n             }\n \n+            // if comment is jsdoc style then ignore it\n+            if (isJsdoc(node)) {\n+                return;\n+            }\n+\n             // Check for markers now, and short-circuit if found\n             if (hasMarkers && markerMatcher.test(node.value)) {\n                 return;\n",
        "bugId": 68,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-ACPJ",
            "MD-ADD"
        ],
        "failingTests": 3
    },
    {
        "changedFiles": {
            "lib/rules/quote-props.js": {
                "insert": [
                    144
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/quote-props.js b/lib/rules/quote-props.js\nindex 13c24d8131..29ce237041 100644\n--- a/lib/rules/quote-props.js\n+++ b/lib/rules/quote-props.js\n@@ -141,6 +141,9 @@ module.exports = function(context) {\n \n                     necessaryQuotes = necessaryQuotes || !areQuotesRedundant(tokens) || KEYWORDS && isKeyword(tokens[0].value);\n                 }\n+            } else if (KEYWORDS && checkQuotesRedundancy && key.type === \"Identifier\" && isKeyword(key.name)) {\n+                necessaryQuotes = true;\n+                context.report(node, \"Properties should be quoted as `{{property}}` is a reserved word.\", {property: key.name});\n             } else {\n                 lackOfQuotes = true;\n             }\n",
        "bugId": 67,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-ABR"
        ],
        "failingTests": 19
    },
    {
        "changedFiles": {
            "lib/rules/no-sequences.js": {
                "changes": [
                    34
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-sequences.js b/lib/rules/no-sequences.js\nindex bf5ba673d8..b0d318c7d0 100644\n--- a/lib/rules/no-sequences.js\n+++ b/lib/rules/no-sequences.js\n@@ -31,7 +31,8 @@ module.exports = {\n             IfStatement: \"test\",\n             SwitchStatement: \"discriminant\",\n             WhileStatement: \"test\",\n-            WithStatement: \"object\"\n+            WithStatement: \"object\",\n+            ArrowFunctionExpression: \"body\"\n \n             // Omitting CallExpression - commas are parsed as argument separators\n             // Omitting NewExpression - commas are parsed as argument separators\n",
        "bugId": 66,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "CF-ADD"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "changes": [
                    512
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex efa3d53bbd..8c41c18d01 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -509,7 +509,7 @@ module.exports = {\n                         !(\n                             (node.object.type === \"Literal\" &&\n                             typeof node.object.value === \"number\" &&\n-                            /^[0-9]+$/.test(sourceCode.getFirstToken(node.object).value))\n+                            astUtils.isDecimalInteger(node.object))\n                             ||\n \n                             // RegExp literal is allowed to have parens (#1589)\n",
        "bugId": 65,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-parens.js": {
                "insert": [
                    258
                ],
                "changes": [
                    282
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 24,
            "linesRem": 0,
            "linesAdd": 23,
            "chunks": 4,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-extra-parens.js b/lib/rules/no-extra-parens.js\nindex 0a6a0d0f1d..d0d79c6a32 100644\n--- a/lib/rules/no-extra-parens.js\n+++ b/lib/rules/no-extra-parens.js\n@@ -255,6 +255,23 @@ module.exports = {\n                 !astUtils.canTokensBeAdjacent(tokenBeforeLeftParen, firstToken);\n         }\n \n+        /**\n+         * Determines whether a node should be followed by an additional space when removing parens\n+         * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n+         * @returns {boolean} `true` if a space should be inserted after the node\n+         * @private\n+         */\n+        function requiresTrailingSpace(node) {\n+            const nextTwoTokens = sourceCode.getTokensAfter(node, { count: 2 });\n+            const rightParenToken = nextTwoTokens[0];\n+            const tokenAfterRightParen = nextTwoTokens[1];\n+            const tokenBeforeRightParen = sourceCode.getLastToken(node);\n+\n+            return rightParenToken && tokenAfterRightParen &&\n+                !sourceCode.isSpaceBetweenTokens(rightParenToken, tokenAfterRightParen) &&\n+                !astUtils.canTokensBeAdjacent(tokenBeforeRightParen, tokenAfterRightParen);\n+        }\n+\n         /**\n          * Report the node\n          * @param {ASTNode} node node to evaluate\n@@ -279,7 +296,7 @@ module.exports = {\n                     return fixer.replaceTextRange([\n                         leftParenToken.range[0],\n                         rightParenToken.range[1]\n-                    ], (requiresLeadingSpace(node) ? \" \" : \"\") + parenthesizedSource);\n+                    ], (requiresLeadingSpace(node) ? \" \" : \"\") + parenthesizedSource + (requiresTrailingSpace(node) ? \" \" : \"\"));\n                 }\n             });\n         }\n@@ -488,12 +505,18 @@ module.exports = {\n                 if (hasExcessParens(node.right)) {\n                     report(node.right);\n                 }\n+                if (hasExcessParens(node.left)) {\n+                    report(node.left);\n+                }\n             },\n \n             ForOfStatement(node) {\n                 if (hasExcessParens(node.right)) {\n                     report(node.right);\n                 }\n+                if (hasExcessParens(node.left)) {\n+                    report(node.left);\n+                }\n             },\n \n             ForStatement(node) {\n",
        "bugId": 64,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MC-DAP",
            "MD-ADD",
            "IF-APTC",
            "IF-APTC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    927
                ],
                "changes": [
                    970
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 18,
            "linesRem": 0,
            "linesAdd": 17,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex db9b574bf8..7d43a1f01a 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -924,6 +924,23 @@ module.exports = {\n             }\n         }\n \n+        /**\n+         * Check whether the given token is the first token of a statement.\n+         * @param {Token} token The token to check.\n+         * @param {ASTNode} leafNode The expression node that the token belongs directly.\n+         * @returns {boolean} `true` if the token is the first token of a statement.\n+         */\n+        function isFirstTokenOfStatement(token, leafNode) {\n+            let node = leafNode;\n+\n+            while (node.parent && !node.parent.type.endsWith(\"Statement\") && !node.parent.type.endsWith(\"Declaration\")) {\n+                node = node.parent;\n+            }\n+            node = node.parent;\n+\n+            return !node || node.range[0] === token.range[0];\n+        }\n+\n         return {\n             ArrayExpression: addArrayOrObjectIndent,\n             ArrayPattern: addArrayOrObjectIndent,\n@@ -967,7 +984,15 @@ module.exports = {\n             ConditionalExpression(node) {\n                 const tokens = getTokensAndComments(node);\n \n-                if (!(node.parent.type === \"ConditionalExpression\" && options.flatTernaryExpressions)) {\n+                // `flatTernaryExpressions` option is for the following style:\n+                // var a =\n+                //     foo > 0 ? bar :\n+                //     foo < 0 ? baz :\n+                //     /*else*/ qiz ;\n+                if (!options.flatTernaryExpressions ||\n+                    !astUtils.isTokenOnSameLine(node.test, node.consequent) ||\n+                    isFirstTokenOfStatement(tokens[0], node)\n+                ) {\n                     offsets.setDesiredOffsets(tokens, tokens[0], 1);\n                 }\n             },\n",
        "bugId": 63,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-ADD",
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    522
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/linter.js b/lib/linter.js\nindex a49453e069..bb17ac2164 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -519,8 +519,11 @@ function createStubRule(message) {\n      */\n     function createRuleModule(context) {\n         return {\n-            Program(node) {\n-                context.report(node, message);\n+            Program() {\n+                context.report({\n+                    loc: { line: 1, column: 0 },\n+                    message\n+                });\n             }\n         };\n     }\n",
        "bugId": 62,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MC-DNP",
            "MD-CHG"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/operator-assignment.js": {
                "insert": [
                    7
                ],
                "changes": [
                    174,
                    176
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 3,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/operator-assignment.js b/lib/rules/operator-assignment.js\nindex 1c40eed151..99cca356f2 100644\n--- a/lib/rules/operator-assignment.js\n+++ b/lib/rules/operator-assignment.js\n@@ -4,6 +4,12 @@\n  */\n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+const astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Helpers\n //------------------------------------------------------------------------------\n@@ -171,9 +177,20 @@ module.exports = {\n                         if (canBeFixed(node.left)) {\n                             const operatorToken = getOperatorToken(node);\n                             const leftText = sourceCode.getText().slice(node.range[0], operatorToken.range[0]);\n-                            const rightText = sourceCode.getText().slice(operatorToken.range[1], node.range[1]);\n+                            const newOperator = node.operator.slice(0, -1);\n+                            let rightText;\n+\n+                            // If this change would modify precedence (e.g. `foo *= bar + 1` => `foo = foo * (bar + 1)`), parenthesize the right side.\n+                            if (\n+                                astUtils.getPrecedence(node.right) <= astUtils.getPrecedence({ type: \"BinaryExpression\", operator: newOperator }) &&\n+                                !astUtils.isParenthesised(sourceCode, node.right)\n+                            ) {\n+                                rightText = `${sourceCode.text.slice(operatorToken.range[1], node.right.range[0])}(${sourceCode.getText(node.right)})`;\n+                            } else {\n+                                rightText = sourceCode.text.slice(operatorToken.range[1], node.range[1]);\n+                            }\n \n-                            return fixer.replaceText(node, `${leftText}= ${leftText}${node.operator.slice(0, -1)}${rightText}`);\n+                            return fixer.replaceText(node, `${leftText}= ${leftText}${newOperator}${rightText}`);\n                         }\n                         return null;\n                     }\n",
        "bugId": 61,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    942,
                    953
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex bf238dd18d..2b069011f9 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -939,7 +939,7 @@ module.exports = {\n                 if (options.FunctionDeclaration.parameters === \"first\" && node.params.length) {\n                     checkNodesIndent(node.params.slice(1), node.params[0].loc.start.column);\n                 } else if (options.FunctionDeclaration.parameters !== null) {\n-                    checkNodesIndent(node.params, indentSize * options.FunctionDeclaration.parameters);\n+                    checkNodesIndent(node.params, getNodeIndent(node).goodChar + indentSize * options.FunctionDeclaration.parameters);\n                 }\n             },\n \n@@ -950,7 +950,7 @@ module.exports = {\n                 if (options.FunctionExpression.parameters === \"first\" && node.params.length) {\n                     checkNodesIndent(node.params.slice(1), node.params[0].loc.start.column);\n                 } else if (options.FunctionExpression.parameters !== null) {\n-                    checkNodesIndent(node.params, indentSize * options.FunctionExpression.parameters);\n+                    checkNodesIndent(node.params, getNodeIndent(node).goodChar + indentSize * options.FunctionExpression.parameters);\n                 }\n             }\n         };\n",
        "bugId": 60,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/consistent-this.js": {
                "insert": [
                    5
                ],
                "changes": [
                    96
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/consistent-this.js b/lib/rules/consistent-this.js\nindex e940d0f043..bcf7fefb05 100644\n--- a/lib/rules/consistent-this.js\n+++ b/lib/rules/consistent-this.js\n@@ -2,6 +2,7 @@\n  * @fileoverview Rule to enforce consistent naming of \"this\" context variables\n  * @author Raphael Pigulla\n  * @copyright 2015 Timothy Jones. All rights reserved.\n+ * @copyright 2015 David Aurelio. All rights reserved.\n  */\n \"use strict\";\n \n@@ -93,8 +94,12 @@ module.exports = function(context) {\n         \"FunctionDeclaration:exit\": ensureWasAssigned,\n \n         \"VariableDeclarator\": function (node) {\n-            if (node.init !== null) {\n-                checkAssignment(node, node.id.name, node.init);\n+            var id = node.id;\n+            var isDestructuring =\n+                id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\";\n+\n+            if (node.init !== null && !isDestructuring) {\n+                checkAssignment(node, id.name, node.init);\n             }\n         },\n \n",
        "bugId": 59,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 1
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    1232
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex ec3f79170c..0d4c7188b0 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1229,7 +1229,7 @@ module.exports = {\n             },\n \n             Property(node) {\n-                if (!node.computed && !node.shorthand && !node.method && node.kind === \"init\") {\n+                if (!node.shorthand && !node.method && node.kind === \"init\") {\n                     const colon = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isColonToken);\n \n                     offsets.ignoreToken(sourceCode.getTokenAfter(colon));\n",
        "bugId": 58,
        "tax": "IncorFI-IncorIV-UTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/one-var.js": {
                "insert": [
                    289
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/one-var.js b/lib/rules/one-var.js\nindex 805cec3654..2bd49f511f 100644\n--- a/lib/rules/one-var.js\n+++ b/lib/rules/one-var.js\n@@ -286,6 +286,9 @@ module.exports = {\n                             context.report(node, \"Combine this with the previous '\" + type + \"' statement with initialized variables.\");\n                         }\n                         if (options[type].uninitialized === MODE_ALWAYS) {\n+                            if (node.parent.left === node && (node.parent.type === \"ForInStatement\" || node.parent.type === \"ForOfStatement\")) {\n+                                return;\n+                            }\n                             context.report(node, \"Combine this with the previous '\" + type + \"' statement with uninitialized variables.\");\n                         }\n                     }\n",
        "bugId": 57,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/eslint.js": {
                "insert": [
                    781
                ],
                "changes": [
                    782,
                    791
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 0,
            "linesAdd": 4,
            "chunks": 4,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/eslint.js b/lib/eslint.js\nindex 3c23a74952..a9066c4c8b 100755\n--- a/lib/eslint.js\n+++ b/lib/eslint.js\n@@ -778,17 +778,18 @@ module.exports = (function() {\n         // search and apply \"eslint-env *\".\n         const envInFile = findEslintEnv(text || textOrSourceCode.text);\n \n+        config = Object.assign({}, config);\n+\n         if (envInFile) {\n-            if (!config || !config.env) {\n-                config = Object.assign({}, config || {}, { env: envInFile });\n-            } else {\n-                config = Object.assign({}, config);\n+            if (config.env) {\n                 config.env = Object.assign({}, config.env, envInFile);\n+            } else {\n+                config.env = envInFile;\n             }\n         }\n \n         // process initial config to make it safe to extend\n-        config = prepareConfig(config || {});\n+        config = prepareConfig(config);\n \n         // only do this for text\n         if (text !== null) {\n",
        "bugId": 56,
        "tax": "IncorFI-IncorCP",
        "pan_cat": [
            "IF-CC",
            "MC-DAP",
            "AS-CE"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/consistent-return.js": {
                "insert": [
                    36
                ],
                "changes": [
                    80
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 12,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/consistent-return.js b/lib/rules/consistent-return.js\nindex 78485ba4da..0c1a6a7493 100644\n--- a/lib/rules/consistent-return.js\n+++ b/lib/rules/consistent-return.js\n@@ -33,6 +33,18 @@ function isUnreachable(segment) {\n     return !segment.reachable;\n }\n \n+/**\n+* Checks whether a given node is a `constructor` method in an ES6 class\n+* @param {ASTNode} node A node to check\n+* @returns {boolean} `true` if the node is a `constructor` method\n+*/\n+function isClassConstructor(node) {\n+    return node.type === \"FunctionExpression\" &&\n+        node.parent &&\n+        node.parent.type === \"MethodDefinition\" &&\n+        node.parent.kind === \"constructor\";\n+}\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -77,7 +89,8 @@ module.exports = {\n              */\n             if (!funcInfo.hasReturnValue ||\n                 funcInfo.codePath.currentSegments.every(isUnreachable) ||\n-                astUtils.isES5Constructor(node)\n+                astUtils.isES5Constructor(node) ||\n+                isClassConstructor(node)\n             ) {\n                 return;\n             }\n",
        "bugId": 55,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC",
            "MD-ADD"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/config/plugins.js": {
                "deletes": [
                    78
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 6,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/config/plugins.js b/lib/config/plugins.js\nindex e28a77929c..aebb3669f8 100644\n--- a/lib/config/plugins.js\n+++ b/lib/config/plugins.js\n@@ -75,12 +75,6 @@ module.exports = {\n         plugins[shortName] = plugin;\n         Environments.importPlugin(plugin, shortName);\n         Rules.importPlugin(plugin, shortName);\n-\n-        // load up environments and rules for the name that '@scope/' was omitted\n-        // 3 lines below will be removed by 4.0.0\n-        plugins[pluginNameWithoutPrefix] = plugin;\n-        Environments.importPlugin(plugin, pluginNameWithoutPrefix);\n-        Rules.importPlugin(plugin, pluginNameWithoutPrefix);\n     },\n \n     /**\n",
        "bugId": 54,
        "tax": "IncorFI-IncorCP",
        "pan_cat": [],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/multiline-comment-style.js": {
                "insert": [
                    274
                ],
                "changes": [
                    277
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/multiline-comment-style.js b/lib/rules/multiline-comment-style.js\nindex 302a7d858a..db4f768443 100644\n--- a/lib/rules/multiline-comment-style.js\n+++ b/lib/rules/multiline-comment-style.js\n@@ -271,10 +271,13 @@ module.exports = {\n                         return !tokenBefore || tokenBefore.loc.end.line < comment.loc.start.line;\n                     })\n                     .reduce((commentGroups, comment, index, commentList) => {\n+                        const tokenBefore = sourceCode.getTokenBefore(comment, { includeComments: true });\n+\n                         if (\n                             comment.type === \"Line\" &&\n                             index && commentList[index - 1].type === \"Line\" &&\n-                            sourceCode.getTokenBefore(comment, { includeComments: true }) === commentList[index - 1]\n+                            tokenBefore && tokenBefore.loc.end.line === comment.loc.start.line - 1 &&\n+                            tokenBefore === commentList[index - 1]\n                         ) {\n                             commentGroups[commentGroups.length - 1].push(comment);\n                         } else {\n",
        "bugId": 53,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/func-style.js": {
                "changes": [
                    15,
                    25,
                    28,
                    34,
                    36,
                    39
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 25,
            "linesRem": 0,
            "linesAdd": 16,
            "chunks": 11,
            "linesMod": 9
        },
        "diff": "diff --git a/lib/rules/func-style.js b/lib/rules/func-style.js\nindex c9d64b6d00..ad7f41e13e 100644\n--- a/lib/rules/func-style.js\n+++ b/lib/rules/func-style.js\n@@ -12,32 +12,52 @@\n module.exports = function(context) {\n \n     var style = context.options[0],\n-        enforceDeclarations = (style === \"declaration\");\n+        enforceDeclarations = (style === \"declaration\"),\n+        stack = [];\n \n     return {\n+        \"Program\": function() {\n+            stack = [];\n+        },\n \n         \"FunctionDeclaration\": function(node) {\n+            stack.push(false);\n+\n             if (!enforceDeclarations) {\n                 context.report(node, \"Expected a function expression.\");\n             }\n         },\n+        \"FunctionDeclaration:exit\": function() {\n+            stack.pop();\n+        },\n \n-        \"FunctionExpression\": function() {\n-            var parent = context.getAncestors().pop();\n+        \"FunctionExpression\": function(node) {\n+            stack.push(false);\n \n-            if (enforceDeclarations && parent.type === \"VariableDeclarator\") {\n-                context.report(parent, \"Expected a function declaration.\");\n+            if (enforceDeclarations && node.parent.type === \"VariableDeclarator\") {\n+                context.report(node.parent, \"Expected a function declaration.\");\n             }\n         },\n+        \"FunctionExpression:exit\": function() {\n+            stack.pop();\n+        },\n \n         \"ArrowFunctionExpression\": function() {\n-            var parent = context.getAncestors().pop();\n+            stack.push(false);\n+        },\n+        \"ArrowFunctionExpression:exit\": function(node) {\n+            var hasThisExpr = stack.pop();\n \n-            if (enforceDeclarations && parent.type === \"VariableDeclarator\") {\n-                context.report(parent, \"Expected a function declaration.\");\n+            if (enforceDeclarations && !hasThisExpr && node.parent.type === \"VariableDeclarator\") {\n+                context.report(node.parent, \"Expected a function declaration.\");\n             }\n-        }\n+        },\n \n+        \"ThisExpression\": function() {\n+            if (stack.length > 0) {\n+                stack[stack.length - 1] = true;\n+            }\n+        }\n     };\n \n };\n",
        "bugId": 52,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MD-ADD",
            "MD-ADD",
            "MD-ADD",
            "MD-ADD",
            "MD-ADD",
            "MD-CHG",
            "IF-CC",
            "MC-DAP"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/no-unsafe-finally.js": {
                "changes": [
                    12,
                    44,
                    61
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 4,
            "chunks": 5,
            "linesMod": 4
        },
        "diff": "diff --git a/lib/rules/no-unsafe-finally.js b/lib/rules/no-unsafe-finally.js\nindex 55ea2971f8..c868f8579d 100644\n--- a/lib/rules/no-unsafe-finally.js\n+++ b/lib/rules/no-unsafe-finally.js\n@@ -9,7 +9,10 @@\n // Helpers\n //------------------------------------------------------------------------------\n \n-var SENTINEL_NODE_TYPE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/;\n+var SENTINEL_NODE_TYPE_RETURN_THROW = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/;\n+var SENTINEL_NODE_TYPE_BREAK = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/;\n+var SENTINEL_NODE_TYPE_CONTINUE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/;\n+\n \n //------------------------------------------------------------------------------\n // Rule Definition\n@@ -39,11 +42,29 @@ module.exports = {\n          * Climbs up the tree if the node is not a sentinel node\n          *\n          * @param {ASTNode} node - node to check.\n+         * @param {String} label - label of the break or continue statement\n          * @returns {Boolean} - return whether the node is a finally block or a sentinel node\n          */\n-        function isInFinallyBlock(node) {\n-            while (node && !SENTINEL_NODE_TYPE.test(node.type)) {\n+        function isInFinallyBlock(node, label) {\n+            var labelInside = false;\n+            var sentinelNodeType;\n+\n+            if (node.type === \"BreakStatement\" && !node.label) {\n+                sentinelNodeType = SENTINEL_NODE_TYPE_BREAK;\n+            } else if (node.type === \"ContinueStatement\") {\n+                sentinelNodeType = SENTINEL_NODE_TYPE_CONTINUE;\n+            } else {\n+                sentinelNodeType = SENTINEL_NODE_TYPE_RETURN_THROW;\n+            }\n+\n+            while (node && !sentinelNodeType.test(node.type)) {\n+                if (node.parent.label && label && (node.parent.label.name === label.name)) {\n+                    labelInside = true;\n+                }\n                 if (isFinallyBlock(node)) {\n+                    if (label && labelInside) {\n+                        return false;\n+                    }\n                     return true;\n                 }\n                 node = node.parent;\n@@ -58,7 +79,7 @@ module.exports = {\n          * @returns {void}\n          */\n         function check(node) {\n-            if (isInFinallyBlock(node)) {\n+            if (isInFinallyBlock(node, node.label)) {\n                 context.report({\n                     message: \"Unsafe usage of \" + node.type,\n                     node: node,\n",
        "bugId": 51,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "MD-DNP",
            "MD-CHG",
            "MC-DAP",
            "IF-APCJ"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/operator-assignment.js": {
                "changes": [
                    138
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/operator-assignment.js b/lib/rules/operator-assignment.js\nindex 43f21abc87..1c40eed151 100644\n--- a/lib/rules/operator-assignment.js\n+++ b/lib/rules/operator-assignment.js\n@@ -135,7 +135,7 @@ module.exports = {\n                                 const equalsToken = getOperatorToken(node);\n                                 const operatorToken = getOperatorToken(expr);\n                                 const leftText = sourceCode.getText().slice(node.range[0], equalsToken.range[0]);\n-                                const rightText = sourceCode.getText().slice(operatorToken.range[1], expr.right.range[1]);\n+                                const rightText = sourceCode.getText().slice(operatorToken.range[1], node.right.range[1]);\n \n                                 return fixer.replaceText(node, `${leftText}${expr.operator}=${rightText}`);\n                             }\n",
        "bugId": 50,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/object-shorthand.js": {
                "changes": [
                    233,
                    241
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/object-shorthand.js b/lib/rules/object-shorthand.js\nindex 1d32d17222..1d3d9dae19 100644\n--- a/lib/rules/object-shorthand.js\n+++ b/lib/rules/object-shorthand.js\n@@ -230,7 +230,10 @@ module.exports = {\n                 const functionToken = sourceCode.getTokens(node.value).find(token => token.type === \"Keyword\" && token.value === \"function\");\n                 const tokenBeforeParams = node.value.generator ? sourceCode.getTokenAfter(functionToken) : functionToken;\n \n-                return fixer.replaceTextRange([firstKeyToken.range[0], tokenBeforeParams.range[1]], keyPrefix + keyText);\n+                return fixer.replaceTextRange(\n+                    [firstKeyToken.range[0], node.range[1]],\n+                    keyPrefix + keyText + sourceCode.text.slice(tokenBeforeParams.range[1], node.value.range[1])\n+                );\n             }\n             const arrowToken = sourceCode.getTokens(node.value).find(token => token.value === \"=>\");\n             const tokenBeforeArrow = sourceCode.getTokenBefore(arrowToken);\n@@ -238,7 +241,10 @@ module.exports = {\n             const oldParamText = sourceCode.text.slice(sourceCode.getFirstToken(node.value, node.value.async ? 1 : 0).range[0], tokenBeforeArrow.range[1]);\n             const newParamText = hasParensAroundParameters ? oldParamText : `(${oldParamText})`;\n \n-            return fixer.replaceTextRange([firstKeyToken.range[0], arrowToken.range[1]], keyPrefix + keyText + newParamText);\n+            return fixer.replaceTextRange(\n+                [firstKeyToken.range[0], node.range[1]],\n+                keyPrefix + keyText + newParamText + sourceCode.text.slice(arrowToken.range[1], node.value.range[1])\n+            );\n \n         }\n \n",
        "bugId": 49,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "MC-DAP",
            "MC-DAP"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/max-len.js": {
                "changes": [
                    160,
                    163
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/max-len.js b/lib/rules/max-len.js\nindex faff093d71..b379835792 100644\n--- a/lib/rules/max-len.js\n+++ b/lib/rules/max-len.js\n@@ -157,10 +157,11 @@ module.exports = {\n          */\n         function isFullLineComment(line, lineNumber, comment) {\n             var start = comment.loc.start,\n-                end = comment.loc.end;\n+                end = comment.loc.end,\n+                isFirstTokenOnLine = !line.slice(0, comment.loc.start.column).trim();\n \n             return comment &&\n-                (start.line < lineNumber || (start.line === lineNumber && start.column === 0)) &&\n+                (start.line < lineNumber || (start.line === lineNumber && isFirstTokenOnLine)) &&\n                 (end.line > lineNumber || end.column === line.length);\n         }\n \n",
        "bugId": 48,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-multiple-empty-lines.js": {
                "changes": [
                    168
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-multiple-empty-lines.js b/lib/rules/no-multiple-empty-lines.js\nindex c7f6978436..679c4f69c7 100644\n--- a/lib/rules/no-multiple-empty-lines.js\n+++ b/lib/rules/no-multiple-empty-lines.js\n@@ -165,7 +165,7 @@ module.exports = {\n                     } else {\n                         const location = {\n                             line: lastLocation + 1,\n-                            column: 1\n+                            column: 0\n                         };\n \n                         if (lastLocation < firstOfEndingBlankLines) {\n",
        "bugId": 47,
        "tax": "G-VI-IncorVI",
        "pan_cat": [
            "CF-CHG"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-computed-key.js": {
                "insert": [
                    12
                ],
                "changes": [
                    58
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-useless-computed-key.js b/lib/rules/no-useless-computed-key.js\nindex 573fe21c0b..fd5ec2c92b 100644\n--- a/lib/rules/no-useless-computed-key.js\n+++ b/lib/rules/no-useless-computed-key.js\n@@ -9,6 +9,7 @@\n //------------------------------------------------------------------------------\n \n const astUtils = require(\"../ast-utils\");\n+const esUtils = require(\"esutils\");\n \n //------------------------------------------------------------------------------\n // Rule Definition\n@@ -55,7 +56,17 @@ module.exports = {\n                                 // If there are comments between the brackets and the property name, don't do a fix.\n                                 return null;\n                             }\n-                            return fixer.replaceTextRange([leftSquareBracket.range[0], rightSquareBracket.range[1]], key.raw);\n+\n+                            const tokenBeforeLeftBracket = sourceCode.getTokenBefore(leftSquareBracket);\n+\n+                            // Insert a space before the key to avoid changing identifiers, e.g. ({ get[2]() {} }) to ({ get2() {} })\n+                            const needsSpaceBeforeKey = tokenBeforeLeftBracket.range[1] === leftSquareBracket.range[0] &&\n+                                esUtils.code.isIdentifierPartES6(tokenBeforeLeftBracket.value.slice(-1).charCodeAt(0)) &&\n+                                esUtils.code.isIdentifierPartES6(key.raw.charCodeAt(0));\n+\n+                            const replacementKey = (needsSpaceBeforeKey ? \" \" : \"\") + key.raw;\n+\n+                            return fixer.replaceTextRange([leftSquareBracket.range[0], rightSquareBracket.range[1]], replacementKey);\n                         }\n                     });\n                 }\n",
        "bugId": 46,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/max-len.js": {
                "changes": [
                    238
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/max-len.js b/lib/rules/max-len.js\nindex 8ef12b4cd8..45cc36e2c8 100644\n--- a/lib/rules/max-len.js\n+++ b/lib/rules/max-len.js\n@@ -235,8 +235,9 @@ module.exports = {\n          * @private\n          */\n         function groupByLineNumber(acc, node) {\n-            ensureArrayAndPush(acc, node.loc.start.line, node);\n-            ensureArrayAndPush(acc, node.loc.end.line, node);\n+            for (let i = node.loc.start.line; i <= node.loc.end.line; ++i) {\n+                ensureArrayAndPush(acc, i, node);\n+            }\n             return acc;\n         }\n \n",
        "bugId": 45,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/prefer-const.js": {
                "changes": [
                    12
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/prefer-const.js b/lib/rules/prefer-const.js\nindex 07d8da82a1..53bdc2ab7b 100644\n--- a/lib/rules/prefer-const.js\n+++ b/lib/rules/prefer-const.js\n@@ -9,7 +9,7 @@\n // Helpers\n //------------------------------------------------------------------------------\n \n-const PATTERN_TYPE = /^(?:.+?Pattern|RestElement|Property)$/;\n+const PATTERN_TYPE = /^(?:.+?Pattern|RestElement|SpreadProperty|ExperimentalRestProperty|Property)$/;\n const DECLARATION_HOST_TYPE = /^(?:Program|BlockStatement|SwitchCase)$/;\n const DESTRUCTURING_HOST_TYPE = /^(?:VariableDeclarator|AssignmentExpression)$/;\n \n",
        "bugId": 44,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-unused-vars.js": {
                "changes": [
                    497
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-unused-vars.js b/lib/rules/no-unused-vars.js\nindex 966dd648b2..683176e944 100644\n--- a/lib/rules/no-unused-vars.js\n+++ b/lib/rules/no-unused-vars.js\n@@ -494,7 +494,7 @@ module.exports = {\n                         if (type === \"Parameter\") {\n \n                             // skip any setter argument\n-                            if (def.node.parent.type === \"Property\" && def.node.parent.kind === \"set\") {\n+                            if ((def.node.parent.type === \"Property\" || def.node.parent.type === \"MethodDefinition\") && def.node.parent.kind === \"set\") {\n                                 continue;\n                             }\n \n",
        "bugId": 43,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/ignored-paths.js": {
                "insert": [
                    113,
                    122
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 6,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/ignored-paths.js b/lib/ignored-paths.js\nindex 98d1f30205..3d2bd9b44c 100644\n--- a/lib/ignored-paths.js\n+++ b/lib/ignored-paths.js\n@@ -110,6 +110,7 @@ IgnoredPaths.prototype.contains = function (filepath) {\n     }\n \n     filepath = filepath.replace(\"\\\\\", \"/\");\n+    filepath = filepath.replace(/^\\.\\//, \"\");\n     return this.patterns.reduce(function(ignored, pattern) {\n         var negated = pattern[0] === \"!\",\n             matches;\n@@ -118,6 +119,11 @@ IgnoredPaths.prototype.contains = function (filepath) {\n             pattern = pattern.slice(1);\n         }\n \n+        // Remove leading \"current folder\" prefix\n+        if (pattern.indexOf(\"./\") === 0) {\n+            pattern = pattern.slice(2);\n+        }\n+\n         matches = minimatch(filepath, pattern) || minimatch(filepath, pattern + \"/**\");\n \n         return matches ? !negated : ignored;\n",
        "bugId": 42,
        "tax": "IncorFI-IncorFP",
        "pan_cat": [
            "SQ-AMO"
        ],
        "failingTests": 37
    },
    {
        "changedFiles": {
            "lib/rules/max-len.js": {
                "changes": [
                    165
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/max-len.js b/lib/rules/max-len.js\nindex b379835792..b5813bbfaa 100644\n--- a/lib/rules/max-len.js\n+++ b/lib/rules/max-len.js\n@@ -162,7 +162,7 @@ module.exports = {\n \n             return comment &&\n                 (start.line < lineNumber || (start.line === lineNumber && isFirstTokenOnLine)) &&\n-                (end.line > lineNumber || end.column === line.length);\n+                (end.line > lineNumber || (end.line === lineNumber && end.column === line.length));\n         }\n \n         /**\n",
        "bugId": 41,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "Return"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/space-unary-ops.js": {
                "insert": [
                    71
                ],
                "changes": [
                    247
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 16,
            "linesRem": 0,
            "linesAdd": 15,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/space-unary-ops.js b/lib/rules/space-unary-ops.js\nindex 11c59c8274..5b156fac22 100644\n--- a/lib/rules/space-unary-ops.js\n+++ b/lib/rules/space-unary-ops.js\n@@ -68,6 +68,21 @@ module.exports = {\n             return node.argument && node.argument.type && node.argument.type === \"ObjectExpression\";\n         }\n \n+        /**\n+         * Check if it is safe to remove the spaces between the two tokens in\n+         * the context of a non-word prefix unary operator. For example, `+ +1`\n+         * cannot safely be changed to `++1`.\n+         * @param {Token} firstToken The operator for a non-word prefix unary operator\n+         * @param {Token} secondToken The first token of its operand\n+         * @returns {boolean} Whether or not the spacing between the tokens can be removed\n+         */\n+        function canRemoveSpacesBetween(firstToken, secondToken) {\n+            return !(\n+                (firstToken.value === \"+\" && secondToken.value[0] === \"+\") ||\n+                (firstToken.value === \"-\" && secondToken.value[0] === \"-\")\n+            );\n+        }\n+\n         /**\n         * Checks if an override exists for a given operator.\n         * @param {ASTnode} node AST node\n@@ -244,7 +259,10 @@ module.exports = {\n                             operator: firstToken.value\n                         },\n                         fix(fixer) {\n-                            return fixer.removeRange([firstToken.range[1], secondToken.range[0]]);\n+                            if (canRemoveSpacesBetween(firstToken, secondToken)) {\n+                                return fixer.removeRange([firstToken.range[1], secondToken.range[0]]);\n+                            }\n+                            return null;\n                         }\n                     });\n                 }\n",
        "bugId": 40,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-APC",
            "MD-ADD"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/key-spacing.js": {
                "changes": [
                    139
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/key-spacing.js b/lib/rules/key-spacing.js\nindex 0b39f7429a..b195d31d32 100644\n--- a/lib/rules/key-spacing.js\n+++ b/lib/rules/key-spacing.js\n@@ -136,7 +136,7 @@ function initOptions(toOptions, fromOptions) {\n         if (toOptions.multiLine.align) {\n             toOptions.align = {\n                 on: toOptions.multiLine.align.on,\n-                mode: toOptions.multiLine.mode,\n+                mode: toOptions.multiLine.align.mode || toOptions.multiLine.mode,\n                 beforeColon: toOptions.multiLine.align.beforeColon,\n                 afterColon: toOptions.multiLine.align.afterColon\n             };\n@@ -289,6 +289,9 @@ module.exports = {\n                         multiLine: {\n                             type: \"object\",\n                             properties: {\n+                                mode: {\n+                                    enum: [\"strict\", \"minimum\"]\n+                                },\n                                 beforeColon: {\n                                     type: \"boolean\"\n                                 },\n",
        "bugId": 39,
        "tax": "G-VI-IncorVI",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/camelcase.js": {
                "changes": [
                    109,
                    112,
                    117,
                    122
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 8
        },
        "diff": "diff --git a/lib/rules/camelcase.js b/lib/rules/camelcase.js\nindex 6fb1475b21..60e006a3dc 100644\n--- a/lib/rules/camelcase.js\n+++ b/lib/rules/camelcase.js\n@@ -106,20 +106,37 @@ module.exports = {\n                         report(node);\n                     }\n \n-                // Properties have their own rules\n-                } else if (node.parent.type === \"Property\") {\n+                /*\n+                 * Properties have their own rules, and\n+                 * AssignmentPattern nodes can be treated like Properties:\n+                 * e.g.: const { no_camelcased = false } = bar;\n+                 */\n+                } else if (node.parent.type === \"Property\" || node.parent.type === \"AssignmentPattern\") {\n \n-                    // \"never\" check properties\n-                    if (properties === \"never\") {\n-                        return;\n+                    if (node.parent.parent && node.parent.parent.type === \"ObjectPattern\") {\n+\n+                        if (node.parent.shorthand && node.parent.value.left && isUnderscored(node.parent.value.left.name)) {\n+\n+                            report(node);\n+                        }\n+\n+                        // prevent checking righthand side of destructured object\n+                        if (node.parent.key === node && node.parent.value !== node) {\n+                            return;\n+                        }\n+\n+                        if (node.parent.value.name && isUnderscored(node.parent.value.name)) {\n+                            report(node);\n+                        }\n                     }\n \n-                    if (node.parent.parent && node.parent.parent.type === \"ObjectPattern\" &&\n-                            node.parent.key === node && node.parent.value !== node) {\n+                    // \"never\" check properties\n+                    if (properties === \"never\") {\n                         return;\n                     }\n \n-                    if (isUnderscored(name) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {\n+                    // don't check right hand side of AssignmentExpression to prevent duplicate warnings\n+                    if (isUnderscored(name) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && !(node.parent.right === node)) {\n                         report(node);\n                     }\n \n",
        "bugId": 38,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC",
            "IF-CC",
            "IF-APC",
            "IF-APC",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/testers/rule-tester.js": {
                "insert": [
                    255,
                    259
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 18,
            "linesRem": 0,
            "linesAdd": 18,
            "chunks": 2,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/testers/rule-tester.js b/lib/testers/rule-tester.js\nindex feed1730b2..5d327ad28b 100644\n--- a/lib/testers/rule-tester.js\n+++ b/lib/testers/rule-tester.js\n@@ -252,8 +252,26 @@ RuleTester.prototype = {\n     run(ruleName, rule, test) {\n \n         const testerConfig = this.testerConfig,\n+            requiredScenarios = [\"valid\", \"invalid\"],\n+            scenarioErrors = [],\n             result = {};\n \n+        if (lodash.isNil(test) || typeof test !== \"object\") {\n+            throw new Error(`Test Scenarios for rule ${ruleName} : Could not find test scenario object`);\n+        }\n+\n+        requiredScenarios.forEach(scenarioType => {\n+            if (lodash.isNil(test[scenarioType])) {\n+                scenarioErrors.push(`Could not find any ${scenarioType} test scenarios`);\n+            }\n+        });\n+\n+        if (scenarioErrors.length > 0) {\n+            throw new Error([\n+                `Test Scenarios for rule ${ruleName} is invalid:`\n+            ].concat(scenarioErrors).join(\"\\n\"));\n+        }\n+\n         /* eslint-disable no-shadow */\n \n         /**\n",
        "bugId": 37,
        "tax": "IncompFI-EH",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/no-magic-numbers.js": {
                "changes": [
                    134
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-magic-numbers.js b/lib/rules/no-magic-numbers.js\nindex 4e68190e72..796ecff0f8 100644\n--- a/lib/rules/no-magic-numbers.js\n+++ b/lib/rules/no-magic-numbers.js\n@@ -131,8 +131,10 @@ module.exports = {\n                             message: \"Number constants declarations must use 'const'.\"\n                         });\n                     }\n-                } else if (okTypes.indexOf(parent.type) === -1 ||\n-                    (parent.type === \"AssignmentExpression\" && parent.operator !== \"=\")) {\n+                } else if (\n+                    okTypes.indexOf(parent.type) === -1 ||\n+                    (parent.type === \"AssignmentExpression\" && parent.left.type === \"Identifier\")\n+                ) {\n                     context.report({\n                         node,\n                         message: \"No magic number: {{raw}}.\",\n",
        "bugId": 36,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/cli-engine.js": {
                "insert": [
                    71
                ],
                "changes": [
                    526
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/cli-engine.js b/lib/cli-engine.js\nindex c0cfd8d464..b19eec44b9 100644\n--- a/lib/cli-engine.js\n+++ b/lib/cli-engine.js\n@@ -68,6 +68,8 @@ var fs = require(\"fs\"),\n  * @typedef {Object} LintResult\n  * @property {string} filePath The path to the file that was linted.\n  * @property {LintMessage[]} messages All of the messages for the result.\n+ * @property {number} errorCount Number or errors for the result.\n+ * @property {number} warningCount Number or warnings for the result.\n  */\n \n //------------------------------------------------------------------------------\n@@ -523,7 +525,9 @@ CLIEngine.getErrorResults = function(results) {\n         if (filteredMessages.length > 0) {\n             filtered.push({\n                 filePath: result.filePath,\n-                messages: filteredMessages\n+                messages: filteredMessages,\n+                errorCount: filteredMessages.length,\n+                warningCount: 0\n             });\n         }\n     });\n",
        "bugId": 35,
        "tax": "IncompFI-IncompOM",
        "pan_cat": [
            "MC-DAP",
            "MC-DNP"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-sequences.js": {
                "changes": [
                    88
                ]
            },
            "lib/rules/space-after-keywords.js": {
                "insert": [
                    36,
                    53
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 2,
            "chunks": 3,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-sequences.js b/lib/rules/no-sequences.js\nindex c0a458e053..538e36a12f 100644\n--- a/lib/rules/no-sequences.js\n+++ b/lib/rules/no-sequences.js\n@@ -85,7 +85,8 @@ module.exports = function(context) {\n                 }\n             }\n \n-            context.report(node, \"Unexpected use of comma operator.\");\n+            var child = context.getTokenAfter(node.expressions[0]);\n+            context.report(node, child.loc.start, \"Unexpected use of comma operator.\");\n         }\n     };\n \ndiff --git a/lib/rules/space-after-keywords.js b/lib/rules/space-after-keywords.js\nindex c00244a24b..eeed6d2a60 100644\n--- a/lib/rules/space-after-keywords.js\n+++ b/lib/rules/space-after-keywords.js\n@@ -33,6 +33,7 @@ module.exports = function(context) {\n         if (hasSpace !== requiresSpace) {\n             context.report({\n                 node: node,\n+                loc: left.loc.end,\n                 message: \"Keyword \\\"{{value}}\\\" must {{not}}be followed by whitespace.\",\n                 data: {\n                     value: value,\n@@ -49,6 +50,7 @@ module.exports = function(context) {\n         } else if (left.loc.end.line !== right.loc.start.line) {\n             context.report({\n                 node: node,\n+                loc: left.loc.end,\n                 message: \"Keyword \\\"{{value}}\\\" must not be followed by a newline.\",\n                 data: {\n                     value: value\n",
        "bugId": 34,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [],
        "failingTests": 19
    },
    {
        "changedFiles": {
            "lib/testers/rule-tester.js": {
                "changes": [
                    537
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/testers/rule-tester.js b/lib/testers/rule-tester.js\nindex 5c926a7c2f..78c3107d22 100644\n--- a/lib/testers/rule-tester.js\n+++ b/lib/testers/rule-tester.js\n@@ -534,7 +534,7 @@ RuleTester.prototype = {\n         RuleTester.describe(ruleName, () => {\n             RuleTester.describe(\"valid\", () => {\n                 test.valid.forEach(valid => {\n-                    RuleTester.it(valid.code || valid, () => {\n+                    RuleTester.it(typeof valid === \"object\" ? valid.code : valid, () => {\n                         eslint.defineRules(this.rules);\n                         testValidTemplate(ruleName, valid);\n                     });\n",
        "bugId": 33,
        "tax": "IncorFI-IncorO-IncorOM",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    1212
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex ce21e6d54a..2ebb6dcb8c 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1209,8 +1209,10 @@ module.exports = {\n                 const firstNonObjectToken = sourceCode.getFirstTokenBetween(node.object, node.property, astUtils.isNotClosingParenToken);\n                 const secondNonObjectToken = sourceCode.getTokenAfter(firstNonObjectToken);\n \n-                const tokenBeforeObject = sourceCode.getTokenBefore(node.object, token => astUtils.isNotOpeningParenToken(token) || parameterParens.has(token));\n-                const firstObjectToken = tokenBeforeObject ? sourceCode.getTokenAfter(tokenBeforeObject) : sourceCode.ast.tokens[0];\n+                const objectParenCount = sourceCode.getTokensBetween(node.object, node.property, { filter: astUtils.isClosingParenToken }).length;\n+                const firstObjectToken = objectParenCount\n+                    ? sourceCode.getTokenBefore(node.object, { skip: objectParenCount - 1 })\n+                    : sourceCode.getFirstToken(node.object);\n                 const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);\n                 const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n \n",
        "bugId": 32,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/id-match.js": {
                "changes": [
                    45,
                    91,
                    93,
                    102,
                    108,
                    112,
                    118,
                    121
                ],
                "deletes": [
                    48,
                    96,
                    130
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 17,
            "linesRem": 5,
            "linesAdd": 0,
            "chunks": 11,
            "linesMod": 12
        },
        "diff": "diff --git a/lib/rules/id-match.js b/lib/rules/id-match.js\nindex b924a8e81c..4c9f435108 100644\n--- a/lib/rules/id-match.js\n+++ b/lib/rules/id-match.js\n@@ -42,12 +42,9 @@ module.exports = {\n             regexp = new RegExp(pattern);\n \n         var options = context.options[1] || {},\n-            properties = options.properties,\n+            properties = !!options.properties,\n             onlyDeclarations = !!options.onlyDeclarations;\n \n-        // cast to boolean and default to false\n-        properties = !!properties;\n-\n         /**\n          * Checks if a string matches the provided pattern\n          * @param {String} name The string to check.\n@@ -88,38 +85,35 @@ module.exports = {\n \n             Identifier: function(node) {\n                 var name = node.name,\n-                    effectiveParent = (node.parent.type === \"MemberExpression\") ? node.parent.parent : node.parent;\n+                    parent = node.parent,\n+                    effectiveParent = (parent.type === \"MemberExpression\") ? parent.parent : parent;\n \n-                // MemberExpressions get special rules\n-                if (node.parent.type === \"MemberExpression\") {\n+                if (parent.type === \"MemberExpression\") {\n \n-                    // return early if properties is false\n                     if (!properties) {\n                         return;\n                     }\n \n                     // Always check object names\n-                    if (node.parent.object.type === \"Identifier\" &&\n-                        node.parent.object.name === node.name) {\n+                    if (parent.object.type === \"Identifier\" &&\n+                        parent.object.name === name) {\n                         if (isInvalid(name)) {\n                             report(node);\n                         }\n \n-                        // Report AssignmentExpressions only if they are the left side of the assignment\n+                    // Report AssignmentExpressions only if they are the left side of the assignment\n                     } else if (effectiveParent.type === \"AssignmentExpression\" &&\n                         (effectiveParent.right.type !== \"MemberExpression\" ||\n                         effectiveParent.left.type === \"MemberExpression\" &&\n-                        effectiveParent.left.property.name === node.name)) {\n+                        effectiveParent.left.property.name === name)) {\n                         if (isInvalid(name)) {\n                             report(node);\n                         }\n                     }\n \n-                // Properties have their own rules\n-                } else if (node.parent.type === \"Property\") {\n+                } else if (parent.type === \"Property\") {\n \n-                    // return early if properties is false\n-                    if (!properties) {\n+                    if (!properties || parent.key.name !== name) {\n                         return;\n                     }\n \n@@ -127,7 +121,6 @@ module.exports = {\n                         report(node);\n                     }\n \n-                // Report anything that is a match and not a CallExpression\n                 } else {\n                     var isDeclaration = effectiveParent.type === \"FunctionDeclaration\" || effectiveParent.type === \"VariableDeclarator\";\n \n",
        "bugId": 31,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE",
            "IF-CC",
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-multiple-empty-lines.js": {
                "changes": [
                    81
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-multiple-empty-lines.js b/lib/rules/no-multiple-empty-lines.js\nindex 96b0439189..7508164d38 100644\n--- a/lib/rules/no-multiple-empty-lines.js\n+++ b/lib/rules/no-multiple-empty-lines.js\n@@ -78,7 +78,7 @@ module.exports = {\n \n             \"Program:exit\": function checkBlankLines(node) {\n                 var lines = sourceCode.lines,\n-                    fullLines = sourceCode.text.match(/.*(\\r\\n|\\r|\\n|\\u2028|\\u2029)/g),\n+                    fullLines = sourceCode.text.match(/.*(\\r\\n|\\r|\\n|\\u2028|\\u2029)/g) || [],\n                     firstNonBlankLine = -1,\n                     trimmedLines = [],\n                     linesRangeStart = [],\n",
        "bugId": 30,
        "tax": "IncompFI-MIV-MHSC",
        "pan_cat": [
            "AS-CE",
            "Undefined"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/linter.js": {
                "changes": [
                    893
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 19,
            "linesRem": 0,
            "linesAdd": 18,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/linter.js b/lib/linter.js\nindex 0b9c6e0d86..94d3d05b36 100755\n--- a/lib/linter.js\n+++ b/lib/linter.js\n@@ -890,7 +890,20 @@ class Linter {\n                     parserOptions: config.parserOptions,\n                     parserPath: config.parser,\n                     parserServices,\n-                    settings: config.settings\n+                    settings: config.settings,\n+\n+                    /**\n+                     * This is used to avoid breaking rules that used to monkeypatch the `Linter#report` method\n+                     * by using the `_linter` property on rule contexts.\n+                     *\n+                     * This should be removed in a major release after we create a better way to\n+                     * lint for unused disable comments.\n+                     * https://github.com/eslint/eslint/issues/9193\n+                     */\n+                    _linter: {\n+                        report() {},\n+                        on: emitter.on.bind(emitter)\n+                    }\n                 }\n             )\n         );\n@@ -926,6 +939,24 @@ class Linter {\n                                 if (!isDisabledByReportingConfig(this.reportingConfig, ruleId, problem)) {\n                                     this.messages.push(problem);\n                                 }\n+\n+                                /*\n+                                 * This is used to avoid breaking rules that used monkeypatch Linter, and relied on\n+                                 * `linter.report` getting called with report info every time a rule reports a problem.\n+                                 * To continue to support this, make sure that `context._linter.report` is called every\n+                                 * time a problem is reported by a rule, even though `context._linter` is no longer a\n+                                 * `Linter` instance.\n+                                 *\n+                                 * This should be removed in a major release after we create a better way to\n+                                 * lint for unused disable comments.\n+                                 * https://github.com/eslint/eslint/issues/9193\n+                                 */\n+                                sharedTraversalContext._linter.report( // eslint-disable-line no-underscore-dangle\n+                                    ruleId,\n+                                    severity,\n+                                    { loc: { start: { line: problem.line, column: problem.column - 1 } } },\n+                                    problem.message\n+                                );\n                             }\n                         ])\n                     }\n",
        "bugId": 29,
        "tax": "IncompFI-IncompDP",
        "pan_cat": [
            "MD-ADD",
            "Return"
        ],
        "failingTests": 26
    },
    {
        "changedFiles": {
            "lib/rules/no-duplicate-case.js": {
                "insert": [
                    15
                ],
                "changes": [
                    22
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 31,
            "linesRem": 0,
            "linesAdd": 18,
            "chunks": 2,
            "linesMod": 13
        },
        "diff": "diff --git a/lib/rules/no-duplicate-case.js b/lib/rules/no-duplicate-case.js\nindex 46df4defd3..e1df7eab0d 100644\n--- a/lib/rules/no-duplicate-case.js\n+++ b/lib/rules/no-duplicate-case.js\n@@ -12,6 +12,24 @@\n \n module.exports = function(context) {\n \n+    /**\n+     * Strips source code position informations from the node\n+     * @param {ASTNode} node The node.\n+     * @returns {ASTNode} a copy of the node with the position stripped away\n+     * @private\n+     */\n+    function stripsPosition(node) {\n+        var result = {};\n+        for (var prop in node) {\n+            if (!~[\"loc\", \"start\", \"end\", \"range\"].indexOf(prop)) {\n+                result[prop] = node[prop];\n+                if (typeof result[prop] === \"object\") {\n+                    result[prop] = stripsPosition(result[prop]);\n+                }\n+            }\n+        }\n+        return result;\n+    }\n     /**\n      * Get a hash value for the node\n      * @param {ASTNode} node The node.\n@@ -19,19 +37,7 @@ module.exports = function(context) {\n      * @private\n      */\n     function getHash(node) {\n-        if (node.type === \"Literal\") {\n-            return node.type + typeof node.value + node.value;\n-        } else if (node.type === \"Identifier\") {\n-            return node.type + typeof node.name + node.name;\n-        } else if (node.type === \"MemberExpression\") {\n-            return node.type + getHash(node.object) + getHash(node.property);\n-        } else if (node.type === \"CallExpression\") {\n-            return node.type + getHash(node.callee) + node.arguments.map(getHash).join(\"\");\n-        } else if (node.type === \"BinaryExpression\") {\n-            return node.type + getHash(node.left) + node.operator + getHash(node.right);\n-        } else if (node.type === \"ConditionalExpression\") {\n-            return node.type + getHash(node.test) + getHash(node.consequent) + getHash(node.alternate);\n-        }\n+        return JSON.stringify(stripsPosition(node));\n     }\n \n     var switchStatement = [];\n",
        "bugId": 28,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-rename.js": {
                "changes": [
                    87,
                    97
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-useless-rename.js b/lib/rules/no-useless-rename.js\nindex feb7628fa1..ec2282784b 100644\n--- a/lib/rules/no-useless-rename.js\n+++ b/lib/rules/no-useless-rename.js\n@@ -84,7 +84,7 @@ module.exports = {\n \n             for (i = 0; i < properties.length; i++) {\n                 if (properties[i].shorthand) {\n-                    return;\n+                    continue;\n                 }\n \n                 /**\n@@ -94,7 +94,7 @@ module.exports = {\n                  * so there is no \"renaming\" occurring here.\n                  */\n                 if (properties[i].computed || !properties[i].key) {\n-                    return;\n+                    continue;\n                 }\n \n                 if (properties[i].key.type === \"Identifier\" && properties[i].key.name === properties[i].value.name ||\n",
        "bugId": 27,
        "tax": "G-RS-WRS",
        "pan_cat": [
            "MC-DNP"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/arrow-parens.js": {
                "changes": [
                    54
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/arrow-parens.js b/lib/rules/arrow-parens.js\nindex d9b72b81fe..67bfdf541c 100644\n--- a/lib/rules/arrow-parens.js\n+++ b/lib/rules/arrow-parens.js\n@@ -51,7 +51,7 @@ module.exports = {\n          * @returns {void}\n          */\n         function parens(node) {\n-            const token = sourceCode.getFirstToken(node);\n+            const token = sourceCode.getFirstToken(node, node.async ? 1 : 0);\n \n             // \"as-needed\", { \"requireForBlockBody\": true }: x => x\n             if (\n",
        "bugId": 26,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "MC-DNP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/brace-style.js": {
                "changes": [
                    60,
                    70,
                    74,
                    78,
                    84
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 5,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/brace-style.js b/lib/rules/brace-style.js\nindex 04ef0188dd..2732720c49 100644\n--- a/lib/rules/brace-style.js\n+++ b/lib/rules/brace-style.js\n@@ -57,8 +57,8 @@ module.exports = function(context) {\n         var blockProperties = arguments;\n \n         return function(node) {\n-            [].forEach.call(blockProperties, function(blockProp) {\n-                var block = node[blockProp], previousToken, curlyToken, curlyTokenEnd, curlyTokensOnSameLine;\n+            Array.prototype.forEach.call(blockProperties, function(blockProp) {\n+                var block = node[blockProp], previousToken, curlyToken, curlyTokenEnd, allOnSameLine;\n \n                 if (!isBlock(block)) {\n                     return;\n@@ -67,21 +67,27 @@ module.exports = function(context) {\n                 previousToken = sourceCode.getTokenBefore(block);\n                 curlyToken = sourceCode.getFirstToken(block);\n                 curlyTokenEnd = sourceCode.getLastToken(block);\n-                curlyTokensOnSameLine = curlyToken.loc.start.line === curlyTokenEnd.loc.start.line;\n+                allOnSameLine = previousToken.loc.start.line === curlyTokenEnd.loc.start.line;\n+\n+                if (allOnSameLine && params.allowSingleLine) {\n+                    return;\n+                }\n \n                 if (style !== \"allman\" && previousToken.loc.start.line !== curlyToken.loc.start.line) {\n                     context.report(node, OPEN_MESSAGE);\n-                } else if (style === \"allman\" && previousToken.loc.start.line === curlyToken.loc.start.line && !params.allowSingleLine) {\n+                } else if (style === \"allman\" && previousToken.loc.start.line === curlyToken.loc.start.line) {\n                     context.report(node, OPEN_MESSAGE_ALLMAN);\n                 }\n \n-                if (!block.body.length || curlyTokensOnSameLine && params.allowSingleLine) {\n+                if (!block.body.length) {\n                     return;\n                 }\n \n                 if (curlyToken.loc.start.line === block.body[0].loc.start.line) {\n                     context.report(block.body[0], BODY_MESSAGE);\n-                } else if (curlyTokenEnd.loc.start.line === block.body[block.body.length - 1].loc.start.line) {\n+                }\n+\n+                if (curlyTokenEnd.loc.start.line === block.body[block.body.length - 1].loc.start.line) {\n                     context.report(block.body[block.body.length - 1], CLOSE_MESSAGE_SINGLE);\n                 }\n             });\n",
        "bugId": 25,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-APCJ",
            "IF-CC",
            "IF-CC",
            "IF-RBR",
            "IF-APC",
            "AS-CE",
            "CF-CHG"
        ],
        "failingTests": 69
    },
    {
        "changedFiles": {
            "lib/rules/no-extra-boolean-cast.js": {
                "insert": [
                    101
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 8,
            "linesRem": 0,
            "linesAdd": 8,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-extra-boolean-cast.js b/lib/rules/no-extra-boolean-cast.js\nindex e7368b07b4..47ca7e22fe 100644\n--- a/lib/rules/no-extra-boolean-cast.js\n+++ b/lib/rules/no-extra-boolean-cast.js\n@@ -98,6 +98,14 @@ module.exports = {\n                         node,\n                         message: \"Redundant Boolean call.\",\n                         fix: fixer => {\n+                            if (!node.arguments.length) {\n+                                return fixer.replaceText(parent, \"true\");\n+                            }\n+\n+                            if (node.arguments.length > 1 || node.arguments[0].type === \"SpreadElement\") {\n+                                return null;\n+                            }\n+\n                             const argument = node.arguments[0];\n \n                             if (astUtils.getPrecedence(argument) < astUtils.getPrecedence(node.parent)) {\n",
        "bugId": 24,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APCJ",
            "IF-APCJ"
        ],
        "failingTests": 32
    },
    {
        "changedFiles": {
            "lib/util/glob-util.js": {
                "changes": [
                    89
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/util/glob-util.js b/lib/util/glob-util.js\nindex d414f783f1..4c21fc5510 100644\n--- a/lib/util/glob-util.js\n+++ b/lib/util/glob-util.js\n@@ -86,7 +86,7 @@ function resolveFileGlobPatterns(patterns, options) {\n \n     const processPathExtensions = processPath(options);\n \n-    return patterns.map(processPathExtensions);\n+    return patterns.filter(p => p.length).map(processPathExtensions);\n }\n \n /**\n",
        "bugId": 23,
        "tax": "IncompFI-MIV-EIP",
        "pan_cat": [
            "SQ-AMO"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/config/config-validator.js": {
                "changes": [
                    16,
                    86,
                    100
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/config/config-validator.js b/lib/config/config-validator.js\nindex 5f0072d5a5..5b9d782e66 100644\n--- a/lib/config/config-validator.js\n+++ b/lib/config/config-validator.js\n@@ -13,7 +13,8 @@\n \n var rules = require(\"../rules\"),\n     Environments = require(\"./environments\"),\n-    schemaValidator = require(\"is-my-json-valid\");\n+    schemaValidator = require(\"is-my-json-valid\"),\n+    util = require(\"util\");\n \n var validators = {\n     rules: Object.create(null)\n@@ -83,7 +84,10 @@ function validateRuleOptions(id, options, source) {\n         localOptions = [];\n     }\n \n-    validSeverity = (severity === 0 || severity === 1 || severity === 2 || /^(?:off|warn|error)$/i.test(severity));\n+    validSeverity = (\n+        severity === 0 || severity === 1 || severity === 2 ||\n+        (typeof severity === \"string\" && /^(?:off|warn|error)$/i.test(severity))\n+    );\n \n     if (validateRule) {\n         validateRule(localOptions);\n@@ -97,7 +101,10 @@ function validateRuleOptions(id, options, source) {\n \n         if (!validSeverity) {\n             message.push(\n-                \"\\tSeverity should be one of the following: 0 = off, 1 = warning, 2 = error (you passed \\\"\", severity, \"\\\").\\n\");\n+                \"\\tSeverity should be one of the following: 0 = off, 1 = warning, 2 = error (you passed '\",\n+                util.inspect(severity).replace(/'/g, \"\\\"\").replace(/\\n/g, \"\"),\n+                \"').\\n\"\n+            );\n         }\n \n         if (validateRule && validateRule.errors) {\n",
        "bugId": 22,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 69
    },
    {
        "changedFiles": {
            "lib/rules/semi.js": {
                "changes": [
                    56
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/semi.js b/lib/rules/semi.js\nindex 7fc80ab8da..2f28f1614d 100644\n--- a/lib/rules/semi.js\n+++ b/lib/rules/semi.js\n@@ -53,7 +53,7 @@ module.exports = {\n \n     create(context) {\n \n-        const OPT_OUT_PATTERN = /[\\[\\(\\/\\+\\-]/; // One of [(/+-\n+        const OPT_OUT_PATTERN = /^[-[(\\/+]$/; // One of [(/+-, but not ++ or --\n         const options = context.options[1];\n         const never = context.options[0] === \"never\",\n             exceptOneLine = options && options.omitLastInOneLineBlock === true,\n",
        "bugId": 21,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/sort-vars.js": {
                "changes": [
                    40,
                    59
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 6,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 3,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/sort-vars.js b/lib/rules/sort-vars.js\nindex 6bee221039..1fdfc9ace6 100644\n--- a/lib/rules/sort-vars.js\n+++ b/lib/rules/sort-vars.js\n@@ -37,11 +37,9 @@ module.exports = {\n \n         return {\n             VariableDeclaration(node) {\n-                node.declarations.reduce((memo, decl) => {\n-                    if (decl.id.type === \"ObjectPattern\" || decl.id.type === \"ArrayPattern\") {\n-                        return memo;\n-                    }\n+                const idDeclarations = node.declarations.filter(decl => decl.id.type === \"Identifier\");\n \n+                idDeclarations.slice(1).reduce((memo, decl) => {\n                     let lastVariableName = memo.id.name,\n                         currenVariableName = decl.id.name;\n \n@@ -56,7 +54,7 @@ module.exports = {\n                     }\n                     return decl;\n \n-                }, node.declarations[0]);\n+                }, idDeclarations[0]);\n             }\n         };\n     }\n",
        "bugId": 20,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-invalid-this.js": {
                "insert": [
                    318
                ],
                "changes": [
                    321
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 4,
            "linesRem": 0,
            "linesAdd": 3,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-invalid-this.js b/lib/rules/no-invalid-this.js\nindex d1629c6f5d..37c67de0b5 100644\n--- a/lib/rules/no-invalid-this.js\n+++ b/lib/rules/no-invalid-this.js\n@@ -315,10 +315,17 @@ module.exports = function(context) {\n         // `this` is invalid only under strict mode.\n         // Modules is always strict mode.\n         \"Program\": function(node) {\n+            var scope = context.getScope();\n+            var features = context.ecmaFeatures;\n+\n             stack.push({\n                 init: true,\n                 node: node,\n-                valid: !(context.ecmaFeatures.modules || context.getScope().isStrict)\n+                valid: !(\n+                    scope.isStrict ||\n+                    features.modules ||\n+                    (features.globalReturn && scope.childScopes[0].isStrict)\n+                )\n             });\n         },\n         \"Program:exit\": function() {\n",
        "bugId": 19,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 20
    },
    {
        "changedFiles": {
            "lib/rules/func-name-matching.js": {
                "changes": [
                    151,
                    160
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/func-name-matching.js b/lib/rules/func-name-matching.js\nindex e33efb7aa3..db06d5d468 100644\n--- a/lib/rules/func-name-matching.js\n+++ b/lib/rules/func-name-matching.js\n@@ -148,7 +148,7 @@ module.exports = {\n         return {\n \n             VariableDeclarator(node) {\n-                if (!node.init || node.init.type !== \"FunctionExpression\") {\n+                if (!node.init || node.init.type !== \"FunctionExpression\" || node.id.type !== \"Identifier\") {\n                     return;\n                 }\n                 if (node.init.id && shouldWarn(node.id.name, node.init.id.name)) {\n@@ -157,10 +157,12 @@ module.exports = {\n             },\n \n             AssignmentExpression(node) {\n-                if (node.right.type !== \"FunctionExpression\" ||\n-                   (node.left.computed && node.left.property.type !== \"Literal\") ||\n-                    (!includeModuleExports && isModuleExports(node.left))\n-                   ) {\n+                if (\n+                    node.right.type !== \"FunctionExpression\" ||\n+                    (node.left.computed && node.left.property.type !== \"Literal\") ||\n+                    (!includeModuleExports && isModuleExports(node.left)) ||\n+                    (node.left.type !== \"Identifier\" && node.left.type !== \"MemberExpression\")\n+                ) {\n                     return;\n                 }\n \n",
        "bugId": 18,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-CC",
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    445
                ],
                "changes": [
                    839
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 308306af2d..79a0f25caa 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -442,6 +442,7 @@ class OffsetStorage {\n                 const offset = (\n                     offsetInfo.from &&\n                     offsetInfo.from.loc.start.line === token.loc.start.line &&\n+                    !/^\\s*?\\n/.test(token.value) &&\n                     !offsetInfo.force\n                 ) ? 0 : offsetInfo.offset * this._indentSize;\n \n@@ -836,7 +837,7 @@ module.exports = {\n                     const previousElement = elements[index - 1];\n                     const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);\n \n-                    if (previousElement && sourceCode.getLastToken(previousElement).loc.start.line > startToken.loc.end.line) {\n+                    if (previousElement && sourceCode.getLastToken(previousElement).loc.end.line > startToken.loc.end.line) {\n                         offsets.setDesiredOffsets(element.range, firstTokenOfPreviousElement, 0);\n                     }\n                 }\n",
        "bugId": 17,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE",
            "IF-CC"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/no-regex-spaces.js": {
                "changes": [
                    40,
                    44
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 2,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 2,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/rules/no-regex-spaces.js b/lib/rules/no-regex-spaces.js\nindex 05ac86e87a..09b689e8e6 100644\n--- a/lib/rules/no-regex-spaces.js\n+++ b/lib/rules/no-regex-spaces.js\n@@ -37,11 +37,11 @@ module.exports = {\n          * @private\n          */\n         function checkRegex(node, value, valueStart) {\n-            const multipleSpacesRegex = /( {2,})+?/,\n+            const multipleSpacesRegex = /( {2,})( [+*{?]|[^+*{?]|$)/,\n                 regexResults = multipleSpacesRegex.exec(value);\n \n             if (regexResults !== null) {\n-                const count = regexResults[0].length;\n+                const count = regexResults[1].length;\n \n                 context.report({\n                     node,\n",
        "bugId": 16,
        "tax": "IncorFI-IncorHRE",
        "pan_cat": [
            "AS-CE",
            "AS-CE"
        ],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    453
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex bc0577a06f..1238ee4d68 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -450,7 +450,8 @@ module.exports = function(context) {\n                         parent.type === \"ObjectExpression\" ||\n                         parent.type === \"ArrayExpression\" ||\n                         parent.type === \"CallExpression\" ||\n-                        parent.type === \"ArrowFunctionExpression\"\n+                        parent.type === \"ArrowFunctionExpression\" ||\n+                        parent.type === \"NewExpression\"\n                     ) {\n                         nodeIndent = nodeIndent + indentSize;\n                     }\n",
        "bugId": 15,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 71
    },
    {
        "changedFiles": {
            "lib/rules/max-statements-per-line.js": {
                "changes": [
                    46
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/max-statements-per-line.js b/lib/rules/max-statements-per-line.js\nindex 63e4d67f08..55f09746c3 100644\n--- a/lib/rules/max-statements-per-line.js\n+++ b/lib/rules/max-statements-per-line.js\n@@ -43,7 +43,7 @@ module.exports = {\n         // Helpers\n         //--------------------------------------------------------------------------\n \n-        var SINGLE_CHILD_ALLOWED = /^(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement$/;\n+        var SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/;\n \n         /**\n          * Gets the actual last token of a given node.\n",
        "bugId": 14,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/new-parens.js": {
                "changes": [
                    68,
                    75
                ],
                "deletes": [
                    32
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 20,
            "linesRem": 14,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/new-parens.js b/lib/rules/new-parens.js\nindex 29f4b5c208..b0fc5ba979 100644\n--- a/lib/rules/new-parens.js\n+++ b/lib/rules/new-parens.js\n@@ -29,20 +29,6 @@ function isClosingParen(token) {\n     return token.type === \"Punctuator\" && token.value === \")\";\n }\n \n-/**\n- * Checks whether the given node is inside of another given node.\n- *\n- * @param {ASTNode|Token} inner - The inner node to check.\n- * @param {ASTNode|Token} outer - The outer node to check.\n- * @returns {boolean} `true` if the `inner` is in `outer`.\n- */\n-function isInRange(inner, outer) {\n-    const ir = inner.range;\n-    const or = outer.range;\n-\n-    return or[0] <= ir[0] && ir[1] <= or[1];\n-}\n-\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -65,14 +51,15 @@ module.exports = {\n \n         return {\n             NewExpression(node) {\n-                let token = sourceCode.getTokenAfter(node.callee);\n-\n-                // Skip ')'\n-                while (token && isClosingParen(token)) {\n-                    token = sourceCode.getTokenAfter(token);\n+                if (node.arguments.length !== 0) {\n+                    return;  // shortcut: if there are arguments, there have to be parens\n                 }\n \n-                if (!(token && isOpeningParen(token) && isInRange(token, node))) {\n+                const lastToken = sourceCode.getLastToken(node);\n+                const hasLastParen = lastToken && isClosingParen(lastToken);\n+                const hasParens = hasLastParen && isOpeningParen(sourceCode.getTokenBefore(lastToken));\n+\n+                if (!hasParens) {\n                     context.report({\n                         node,\n                         message: \"Missing '()' invoking a constructor.\",\n",
        "bugId": 13,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "IF-APCJ",
            "AS-CE"
        ],
        "failingTests": 57
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "deletes": [
                    1046
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 79a0f25caa..acc5246307 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -1043,7 +1043,6 @@ module.exports = {\n                 offsets.ignoreToken(operator);\n                 offsets.ignoreToken(tokenAfterOperator);\n                 offsets.setDesiredOffset(tokenAfterOperator, operator, 0);\n-                offsets.setDesiredOffsets([tokenAfterOperator.range[1], node.range[1]], tokenAfterOperator, 1);\n             },\n \n             \"BlockStatement, ClassBody\"(node) {\n",
        "bugId": 12,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "SQ-RMO"
        ],
        "failingTests": 0
    },
    {
        "changedFiles": {
            "lib/rules/curly.js": {
                "changes": [
                    293
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/curly.js b/lib/rules/curly.js\nindex ba4dac34ba..801552d69e 100644\n--- a/lib/rules/curly.js\n+++ b/lib/rules/curly.js\n@@ -290,7 +290,9 @@ module.exports = {\n                 }\n             } else if (multiOrNest) {\n                 if (hasBlock && body.body.length === 1 && isOneLiner(body.body[0])) {\n-                    expected = false;\n+                    const leadingComments = sourceCode.getComments(body.body[0]).leading;\n+\n+                    expected = leadingComments.length > 0;\n                 } else if (!isOneLiner(body)) {\n                     expected = true;\n                 }\n",
        "bugId": 11,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "AS-CE"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/config/config-file.js": {
                "insert": [
                    563
                ],
                "changes": [
                    566
                ]
            },
            "lib/config.js": {
                "insert": [
                    69
                ],
                "deletes": [
                    75
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 2,
            "sizeInLines": 6,
            "linesRem": 1,
            "linesAdd": 3,
            "chunks": 4,
            "linesMod": 2
        },
        "diff": "diff --git a/lib/config.js b/lib/config.js\nindex c69d120ef7..2db87d9426 100644\n--- a/lib/config.js\n+++ b/lib/config.js\n@@ -66,13 +66,14 @@ class Config {\n         this.parser = options.parser;\n         this.parserOptions = options.parserOptions || {};\n \n+        this.configCache = new ConfigCache();\n+\n         this.baseConfig = options.baseConfig\n             ? ConfigOps.merge({}, ConfigFile.loadObject(options.baseConfig, this))\n             : { rules: {} };\n         this.baseConfig.filePath = \"\";\n         this.baseConfig.baseDirectory = this.options.cwd;\n \n-        this.configCache = new ConfigCache();\n         this.configCache.setConfig(this.baseConfig.filePath, this.baseConfig);\n         this.configCache.setMergedVectorConfig(this.baseConfig.filePath, this.baseConfig);\n \ndiff --git a/lib/config/config-file.js b/lib/config/config-file.js\nindex 8325299528..c9b6a432d2 100644\n--- a/lib/config/config-file.js\n+++ b/lib/config/config-file.js\n@@ -560,11 +560,12 @@ function loadFromDisk(resolvedPath, configContext) {\n /**\n  * Loads a config object, applying extends if present.\n  * @param {Object} configObject a config object to load\n+ * @param {Config} configContext Context for the config instance\n  * @returns {Object} the config object with extends applied if present, or the passed config if not\n  * @private\n  */\n-function loadObject(configObject) {\n-    return configObject.extends ? applyExtends(configObject, \"\") : configObject;\n+function loadObject(configObject, configContext) {\n+    return configObject.extends ? applyExtends(configObject, configContext, \"\") : configObject;\n }\n \n /**\n",
        "bugId": 10,
        "tax": "IncompFI-CP",
        "pan_cat": [],
        "failingTests": 25
    },
    {
        "changedFiles": {
            "lib/rules/max-len.js": {
                "insert": [
                    324
                ],
                "changes": [
                    329
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 11,
            "linesRem": 0,
            "linesAdd": 1,
            "chunks": 2,
            "linesMod": 10
        },
        "diff": "diff --git a/lib/rules/max-len.js b/lib/rules/max-len.js\nindex b0fa95814f..137d791354 100644\n--- a/lib/rules/max-len.js\n+++ b/lib/rules/max-len.js\n@@ -321,21 +321,24 @@ module.exports = {\n                 }\n \n                 const lineLength = computeLineLength(line, tabWidth);\n+                const commentLengthApplies = lineIsComment && maxCommentLength;\n \n                 if (lineIsComment && ignoreComments) {\n                     return;\n                 }\n \n-                if (lineIsComment && lineLength > maxCommentLength) {\n-                    context.report({\n-                        node,\n-                        loc: { line: lineNumber, column: 0 },\n-                        message: \"Line {{lineNumber}} exceeds the maximum comment line length of {{maxCommentLength}}.\",\n-                        data: {\n-                            lineNumber: i + 1,\n-                            maxCommentLength\n-                        }\n-                    });\n+                if (commentLengthApplies) {\n+                    if (lineLength > maxCommentLength) {\n+                        context.report({\n+                            node,\n+                            loc: { line: lineNumber, column: 0 },\n+                            message: \"Line {{lineNumber}} exceeds the maximum comment line length of {{maxCommentLength}}.\",\n+                            data: {\n+                                lineNumber: i + 1,\n+                                maxCommentLength\n+                            }\n+                        });\n+                    }\n                 } else if (lineLength > maxLength) {\n                     context.report({\n                         node,\n",
        "bugId": 9,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 24
    },
    {
        "changedFiles": {
            "lib/rules/no-useless-escape.js": {
                "changes": [
                    27
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-useless-escape.js b/lib/rules/no-useless-escape.js\nindex df448cdbdf..7adefb645c 100644\n--- a/lib/rules/no-useless-escape.js\n+++ b/lib/rules/no-useless-escape.js\n@@ -24,7 +24,7 @@ function union(setA, setB) {\n     }());\n }\n \n-const VALID_STRING_ESCAPES = new Set(\"\\\\nrvtbfux\\n\\r\");\n+const VALID_STRING_ESCAPES = new Set(\"\\\\nrvtbfux\\n\\r\\u2028\\u2029\");\n const REGEX_GENERAL_ESCAPES = new Set(\"\\\\bcdDfnrsStvwWxu0123456789\");\n const REGEX_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set(\"]\"));\n const REGEX_NON_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set(\"^/.$*+?[{}|()B\"));\n",
        "bugId": 8,
        "tax": "IncompFI-MIV-MHSC",
        "pan_cat": [
            "MC-DAP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/comma-dangle.js": {
                "changes": [
                    28,
                    42,
                    44
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 3,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 3,
            "linesMod": 3
        },
        "diff": "diff --git a/lib/rules/comma-dangle.js b/lib/rules/comma-dangle.js\nindex 0ab85817cb..1c8f79ea9e 100644\n--- a/lib/rules/comma-dangle.js\n+++ b/lib/rules/comma-dangle.js\n@@ -25,7 +25,7 @@ module.exports = function (context) {\n     function checkForTrailingComma(node) {\n         var items = node.properties || node.elements,\n             length = items.length,\n-            nodeIsMultiLine = node.loc.start.line !== node.loc.end.line,\n+            lastTokenOnNewLine,\n             lastItem,\n             penultimateToken,\n             hasDanglingComma;\n@@ -39,9 +39,10 @@ module.exports = function (context) {\n                 if (forbidDangle && hasDanglingComma) {\n                     context.report(lastItem, penultimateToken.loc.start, UNEXPECTED_MESSAGE);\n                 } else if (allowDangle === \"always-multiline\") {\n-                    if (hasDanglingComma && !nodeIsMultiLine) {\n+                    lastTokenOnNewLine = node.loc.end.line !== penultimateToken.loc.end.line;\n+                    if (hasDanglingComma && !lastTokenOnNewLine) {\n                         context.report(lastItem, penultimateToken.loc.start, UNEXPECTED_MESSAGE);\n-                    } else if (!hasDanglingComma && nodeIsMultiLine) {\n+                    } else if (!hasDanglingComma && lastTokenOnNewLine) {\n                         context.report(lastItem, penultimateToken.loc.end, MISSING_MESSAGE);\n                     }\n                 } else if (allowDangle === \"always\" && !hasDanglingComma) {\n",
        "bugId": 7,
        "tax": "IncorFI-IncorIV",
        "pan_cat": [
            "AS-CE",
            "IF-CC"
        ],
        "failingTests": 3
    },
    {
        "changedFiles": {
            "lib/rules/arrow-spacing.js": {
                "changes": [
                    54,
                    57,
                    63
                ],
                "deletes": [
                    61
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 7,
            "linesRem": 1,
            "linesAdd": 0,
            "chunks": 4,
            "linesMod": 6
        },
        "diff": "diff --git a/lib/rules/arrow-spacing.js b/lib/rules/arrow-spacing.js\nindex fb2fbbfa35..3bc9017630 100644\n--- a/lib/rules/arrow-spacing.js\n+++ b/lib/rules/arrow-spacing.js\n@@ -51,16 +51,18 @@ module.exports = {\n          * @returns {Object} Tokens of arrow and before/after arrow.\n          */\n         function getTokens(node) {\n-            let t = sourceCode.getFirstToken(node);\n-            let before;\n+            let arrow = sourceCode.getTokenBefore(node.body);\n \n-            while (t.type !== \"Punctuator\" || t.value !== \"=>\") {\n-                before = t;\n-                t = sourceCode.getTokenAfter(t);\n+            // skip '(' tokens.\n+            while (arrow.value !== \"=>\") {\n+                arrow = sourceCode.getTokenBefore(arrow);\n             }\n-            const after = sourceCode.getTokenAfter(t);\n \n-            return { before, arrow: t, after };\n+            return {\n+                before: sourceCode.getTokenBefore(arrow),\n+                arrow,\n+                after: sourceCode.getTokenAfter(arrow)\n+            };\n         }\n \n         /**\n",
        "bugId": 6,
        "tax": "IncorFI-IncorIV-IncorHSC",
        "pan_cat": [
            "LP-CC",
            "AS-CE"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "changes": [
                    258,
                    270,
                    436
                ],
                "deletes": [
                    265,
                    409,
                    415
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 9,
            "linesRem": 4,
            "linesAdd": 0,
            "chunks": 6,
            "linesMod": 5
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex e0ad2005ac..7e60a8d00f 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -255,20 +255,18 @@ module.exports = {\n          * @param {int} lastNodeCheckEndOffset Number of charecters to skip from the end\n          * @returns {void}\n          */\n-        function report(node, needed, gottenSpaces, gottenTabs, loc, isLastNodeCheck, lastNodeCheckEndOffset) {\n+        function report(node, needed, gottenSpaces, gottenTabs, loc, isLastNodeCheck) {\n             if (gottenSpaces && gottenTabs) {\n \n                 // To avoid conflicts with `no-mixed-spaces-and-tabs`, don't report lines that have both spaces and tabs.\n                 return;\n             }\n \n-            lastNodeCheckEndOffset = lastNodeCheckEndOffset || 0;\n-\n             const desiredIndent = (indentType === \"space\" ? \" \" : \"\\t\").repeat(needed);\n \n             const textRange = isLastNodeCheck\n-                ? [node.range[1] - gottenSpaces - gottenTabs - 1 - lastNodeCheckEndOffset, node.range[1] - 1 - lastNodeCheckEndOffset]\n-                : [node.range[0] - gottenSpaces - gottenTabs, node.range[0]];\n+                ? [node.range[1] - node.loc.end.column, node.range[1] - node.loc.end.column + gottenSpaces + gottenTabs]\n+                : [node.range[0] - node.loc.start.column, node.range[0] - node.loc.start.column + gottenSpaces + gottenTabs];\n \n             context.report({\n                 node,\n@@ -406,13 +404,11 @@ module.exports = {\n          */\n         function checkLastReturnStatementLineIndent(node, firstLineIndent) {\n             const nodeLastToken = sourceCode.getLastToken(node);\n-            let lastNodeCheckEndOffset = 0;\n             let lastToken = nodeLastToken;\n \n             // in case if return statement ends with ');' we have traverse back to ')'\n             // otherwise we'll measure indent for ';' and replace ')'\n             while (lastToken.value !== \")\") {\n-                lastNodeCheckEndOffset++;\n                 lastToken = sourceCode.getTokenBefore(lastToken);\n             }\n \n@@ -433,8 +429,7 @@ module.exports = {\n                     endIndent.space,\n                     endIndent.tab,\n                     { line: lastToken.loc.start.line, column: lastToken.loc.start.column },\n-                    true,\n-                    lastNodeCheckEndOffset\n+                    true\n                 );\n             }\n         }\n",
        "bugId": 5,
        "tax": "IncorFI-IncorDP",
        "pan_cat": [
            "AS-CE",
            "MC-DNP"
        ],
        "failingTests": 56
    },
    {
        "changedFiles": {
            "lib/rules/no-dupe-keys.js": {
                "insert": [
                    110
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 5,
            "linesRem": 0,
            "linesAdd": 5,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/no-dupe-keys.js b/lib/rules/no-dupe-keys.js\nindex 75b233b500..f34c323f1e 100644\n--- a/lib/rules/no-dupe-keys.js\n+++ b/lib/rules/no-dupe-keys.js\n@@ -107,6 +107,11 @@ module.exports = {\n             Property(node) {\n                 const name = astUtils.getStaticPropertyName(node);\n \n+                // Skip destructuring.\n+                if (node.parent.type !== \"ObjectExpression\") {\n+                    return;\n+                }\n+\n                 // Skip if the name is not static.\n                 if (!name) {\n                     return;\n",
        "bugId": 4,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 62
    },
    {
        "changedFiles": {
            "lib/rules/prefer-template.js": {
                "changes": [
                    34
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/prefer-template.js b/lib/rules/prefer-template.js\nindex b86f21d547..6b9fb4c474 100644\n--- a/lib/rules/prefer-template.js\n+++ b/lib/rules/prefer-template.js\n@@ -31,7 +31,10 @@ function hasNonLiteral(node) {\n     if (node.type === \"BinaryExpression\") {\n         return hasNonLiteral(node.left) || hasNonLiteral(node.right);\n     }\n-    return node.type !== \"Literal\";\n+    if (node.type === \"UnaryExpression\") {\n+        return hasNonLiteral(node.argument);\n+    }\n+    return node.type !== \"Literal\" && node.type !== \"TemplateLiteral\";\n }\n \n //------------------------------------------------------------------------------\n",
        "bugId": 3,
        "tax": "IncompFI-MIV-MTC",
        "pan_cat": [
            "IF-APCJ"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/indent.js": {
                "insert": [
                    241
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 13,
            "linesRem": 0,
            "linesAdd": 13,
            "chunks": 1,
            "linesMod": 0
        },
        "diff": "diff --git a/lib/rules/indent.js b/lib/rules/indent.js\nindex 5b8d5e325d..2a30e9119f 100644\n--- a/lib/rules/indent.js\n+++ b/lib/rules/indent.js\n@@ -238,6 +238,19 @@ module.exports = function(context) {\n             indent = getNodeIndent(calleeNode);\n         }\n \n+        // If part of a multi-line chain call, indent one more to differentiate:\n+        // var a = new P()\n+        //     .done(function (result) {\n+        //         doUsefulStuff(result);\n+        //     });\n+        var calleeLoc = calleeNode.type === \"CallExpression\" && calleeNode.callee.loc;\n+        if (calleeLoc &&\n+            calleeNode.loc.start.line < calleeLoc.end.line &&\n+            calleeLoc.end.line < node.loc.start.line\n+        ) {\n+            indent += indentSize;\n+        }\n+\n         indent += indentSize;\n         // If function content is not empty\n         if (node.body.length > 0) {\n",
        "bugId": 2,
        "tax": "IncompFI-MIV-MHS",
        "pan_cat": [
            "IF-APC"
        ],
        "failingTests": 15
    },
    {
        "changedFiles": {
            "lib/rules/no-obj-calls.js": {
                "changes": [
                    31
                ]
            }
        },
        "project": "Eslint",
        "metrics": {
            "files": 1,
            "sizeInLines": 1,
            "linesRem": 0,
            "linesAdd": 0,
            "chunks": 1,
            "linesMod": 1
        },
        "diff": "diff --git a/lib/rules/no-obj-calls.js b/lib/rules/no-obj-calls.js\nindex bd9b6ee4f0..617459c4c2 100644\n--- a/lib/rules/no-obj-calls.js\n+++ b/lib/rules/no-obj-calls.js\n@@ -28,7 +28,7 @@ module.exports = {\n                 if (node.callee.type === \"Identifier\") {\n                     const name = node.callee.name;\n \n-                    if (name === \"Math\" || name === \"JSON\") {\n+                    if (name === \"Math\" || name === \"JSON\" || name === \"Reflect\") {\n                         context.report(node, \"'{{name}}' is not a function.\", { name });\n                     }\n                 }\n",
        "bugId": 1,
        "tax": "IncompFI-MIV",
        "pan_cat": [
            "IF-CC"
        ],
        "failingTests": 56
    }
]